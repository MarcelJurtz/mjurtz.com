<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcel Jurtz</title>
    <description>A software developers blog.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 21 Oct 2018 20:07:15 +0200</pubDate>
    <lastBuildDate>Sun, 21 Oct 2018 20:07:15 +0200</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Building your first API in .NET Core</title>
        <description>&lt;p&gt;Today I want to show you how to develop your first API with .NET Core.&lt;/p&gt;

&lt;p&gt;.NET Core is an alternative to the classic .NET Framework. In contrast to the .NET Framework, .NET Core offers a huge advantage: It is platform-independent and therefore compatible with MacOS, Linux and Windows.&lt;/p&gt;

&lt;p&gt;The purpose of this article is to build a small REST-based API, which will respond to HTTP GET-requests. Of course you can extend the project according to your own ideas and experiment around.&lt;/p&gt;

&lt;h1 id=&quot;setup-and-installation&quot;&gt;Setup and Installation&lt;/h1&gt;

&lt;p&gt;First of all you need to install the .NET Core SDK. You can download it directly from &lt;a href=&quot;https://www.microsoft.com/net/download&quot;&gt;Microsoft&lt;/a&gt;, where you will find two different links. On the one hand you will find the Runtime Environment, as well as the SDK, which also contains the RE, but additionally tools for development. Download and install the SDK for the platform of your choice.&lt;/p&gt;

&lt;p&gt;In addition, it is a good idea to use an IDE for development. You can use Visual Studio for this, or alternatively you can use Visual Studio Code or JetBrains Rider.&lt;/p&gt;

&lt;p&gt;Since I’m currently working on Linux, I’ll use Visual Studio Code.&lt;/p&gt;

&lt;h1 id=&quot;create-a-project&quot;&gt;Create a project&lt;/h1&gt;

&lt;p&gt;When working with .NET Core, the command line is used a lot at the moment. One such point is the creation of a project. Basically you can use any command line interface here, be it the terminal integrated in VS Code or the Windows Power Shell.&lt;/p&gt;

&lt;p&gt;The first command you need to know is dotnet new.  This command initializes a new project, appending the type of the project. For each dotnet command, you can display operating information by appending &lt;em&gt;help&lt;/em&gt;. In the case of &lt;em&gt;dotnet new help&lt;/em&gt; you will be shown among other things the possible project types.&lt;/p&gt;

&lt;p&gt;We want to create a new ASP .NET Core MVC project. But I don’t want to have a preconfiguration, so I initialize my new project with &lt;em&gt;dotnet new web&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&quot;adaptation-of-the-project--implementation-of-the-api&quot;&gt;Adaptation of the project &amp;amp; implementation of the API&lt;/h1&gt;

&lt;p&gt;First the Startup.cs class needs to be reworked. I’ve made some minor changes, which you can find in the following snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Collections.Generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.AspNetCore.Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.AspNetCore.Hosting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.AspNetCore.Http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.AspNetCore.Mvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Microsoft.Extensions.DependencyInjection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApiSample&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Startup&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// This method gets called by the runtime. Use this method to add services to the container. &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940 &lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IServiceCollection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddMvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetCompatibilityVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompatibilityVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version_2_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;c1&quot;&gt;// This method gets called by the runtime. Use this method to configure the HTTP request pipeline.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IHostingEnvironment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsDevelopment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;// Enforce HTTPS for Requests &lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseHsts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseHttpsRedirection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseMvc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once everything is configured, the API can be implemented. I want to build a really simple implementation that returns the status of the service. An HTTP GET request should be answered with an info message telling the caller that the API is running.&lt;/p&gt;

&lt;p&gt;First of all we need a model class, which I built as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApiSample.Models&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationState&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Information&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The heart of the API is the controller that handles the requests. So I add a new controller to my project that responds to GET requests via the &lt;em&gt;/api&lt;/em&gt; route. The implementation looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApiSample.Controllers&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;api/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ControllerBase&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetApplicationState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ApplicationState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Information&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;API is running&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you have already worked with older versions of ASP .NET, you may have been using IActionResult as the return type. Now you can directly use the generic class ActionResult, where the type in braces is the type of the model which is stored in the response. On the one hand, this helps you with the readability of your methods, since the result is directly visible. This in turn is very helpful if you use things like automatic documentation based on method headers.&lt;/p&gt;

&lt;p&gt;Basically the structure as you can see is kept very simple. And that’s it for now. Start your project with the command &lt;em&gt;dotnet run&lt;/em&gt;, you will get the address and port where the application is running. With a browser of your choice or a test tool like Postman you can now test the API. By calling the address with the attachment &lt;em&gt;/api&lt;/em&gt; you should finally get the expected status message.&lt;/p&gt;

&lt;h1 id=&quot;further-information&quot;&gt;Further information&lt;/h1&gt;

&lt;p&gt;This article really only shows the information you need to get started with the topic. If I could arouse your interest, you can read on directly at &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1&quot;&gt;Microsoft&lt;/a&gt;. But of course there are also several other articles about the topic, let your creativity run free and just try a little bit around.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Oct 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/10/your-first-api-net-core</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/your-first-api-net-core</guid>
        
        <category>software</category>
        
        <category>net</category>
        
        <category>netcore</category>
        
        <category>development</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>100 Days of Code</title>
        <description>&lt;p&gt;You might be familiar with the following situation: You are in your first job as a software developer and spend less and less time with your own projects? Or the time you spend on them is generally getting less and less? I have the problem right now and I’ve been thinking about what’s causing it and how I can work on it. Well, the main problem, in my opinion, is that I no longer have the pressure from my studies to learn to take an exam, for example. Although I want to advance my own projects, I have to force myself not to use my time elsewhere. And, according to the motto “it requires pressure to create diamonds” not much works without pressure.&lt;/p&gt;

&lt;p&gt;Personally, I like challenges. And for this reason I have decided to simply build this pressure by myself. On the Internet you can find various articles about the so-called &lt;a href=&quot;https://www.100daysofcode.com/&quot;&gt;100 Days of Code-Challenge&lt;/a&gt;, which is about working on your own projects for at least one hour a day, 100 days in a row. The Challenge defines some basic rules, which I have adapted for myself, but would like to introduce you to in this article.&lt;/p&gt;

&lt;p&gt;The Challenge itself requires you to work on your own projects for one hour or more for 100 days. Tutorials or online courses are not included in this time, a point I have discarded in my case. I have set myself various goals that I want to achieve within these 100 days, which also include various things I want to learn. That’s why I combine the challenge for myself from learning and programming sessions.&lt;/p&gt;

&lt;p&gt;The project defines the process and rules on the website linked above in detail, but the basic idea is regularity and public commitment. This means that if possible you should make your projects publicly available (e.g. via GitHub), tweet your progress, or similar.&lt;/p&gt;

&lt;p&gt;I’ve decided for myself to do the challenge for myself for now. While I understand the idea behind the publication, which should make it easier to keep up with the progress by pushing each other within the community, but I also want to use the time primarily for learning and therefore find the approach less suitable.&lt;/p&gt;

&lt;p&gt;Nevertheless, I would like to encourage you to participate and join in as well. So how exactly do you get started? First set goals for the 100 days. What do you want to achieve? Do you have an idea that has been on your mind forever? Or are you already sitting on a project that you haven’t touched in a long time? Or do you, like me, want to adapt the goal of the challenge a little and improve and deepen your skills in various areas? Whatever it is, take your time to plan and formulate your goals in concrete terms. That’s it, actually. As soon as you know what you want, start with the implementation — and tweet your progress daily under the Hashtag #100DaysOfCode. Good luck! And by the way: If you miss a day, it’s of course not dramatic. Just add the day at the end of the challenge and make sure you don’t miss two days in a row.&lt;/p&gt;
</description>
        <pubDate>Sun, 14 Oct 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/10/100-days-of-code</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/100-days-of-code</guid>
        
        <category>challenge</category>
        
        <category>learn</category>
        
        <category>improvement</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Semantic Versioning</title>
        <description>&lt;p&gt;Have you ever wondered what kind of methodology you should use to label the releases of your software? 
Many projects use a structure with three numbers, each separated by a dot. 
I have good news for you: This structure is very common and well documented. 
It’s called Semantic Versioning and you’ll find all the details about it &lt;a href=&quot;https://semver.org/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;building-version-identifiers-with-semver&quot;&gt;Building Version Identifiers with SemVer&lt;/h1&gt;

&lt;p&gt;Version numbers are structured according to the X.Y.Z. structure. 
X stands for the major version, Y for the minor version and Z for the patch version.&lt;/p&gt;

&lt;p&gt;Changes to the major version indicate incompatible changes to the API, so that software that depends on your software will not necessarily work after an upgrade. Changes to the minor version signal added backward compatible features, while changes to the patch area point out backward compatible bugfixes.&lt;/p&gt;

&lt;p&gt;As you can see, the setup is very simple, but it definitely makes sense.&lt;/p&gt;

&lt;h1 id=&quot;why-semver&quot;&gt;Why SemVer?&lt;/h1&gt;

&lt;p&gt;As I said before: Because it makes sense. Basically, it is essential to mark the versions of software according to a predefined style. By strictly specifying when which part of the version number is increased, you don’t have to think about how to label the release.&lt;/p&gt;

&lt;p&gt;The system also helps to make your project easier to use for other people. For example, the 1.4.42 version identifier tells you directly that this is the first major release and the fourth minor release. You can also see that 42 patches have already been applied, which suggests a not inconsiderable amount of bug fixes.&lt;/p&gt;

&lt;p&gt;In the case of integrated libraries, it is easy to prevent a package from being upgraded that would break the application. If the major version changes, some testing is required before upgrading.&lt;/p&gt;

&lt;h1 id=&quot;how-do-i-use-the-system&quot;&gt;How Do I Use The System?&lt;/h1&gt;

&lt;p&gt;A common question is how to start versioning. Contrary to what you might have thought, the first version is not marked 0.0.1, but 0.1.0. This makes sense because you usually start with a rough draft of your project, not a bugfix.&lt;/p&gt;

&lt;p&gt;Another frequent question is when to release the first major version. Once your application is able to be used in production, you can set the version to 1.0.0. Before that time, there are usually big changes and upheavals in the software, so you shouldn’t be afraid of introducing breaking changes there. This is really only relevant after the go-live.&lt;/p&gt;

&lt;h1 id=&quot;pre-releases&quot;&gt;Pre-Releases&lt;/h1&gt;

&lt;p&gt;Before you release a new major version, you probably want to publish pre-releases. This is done by appending a usually alphanumeric identifier to the normal version code, separated by a hyphen. You can use this to identify alpha or beta versions, for example.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Do you or your company already use Semantic Versioning? If not, which system do you use instead? If you don’t use such a structure, I can definitely recommend the de facto standard. Not only does it help to keep your versioning clean and clear, it also helps those who use your software. And it’s really easy to set up.&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Oct 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/10/semantic-versioning</link>
        <guid isPermaLink="true">http://localhost:4000/2018/10/semantic-versioning</guid>
        
        <category>versioning</category>
        
        <category>management</category>
        
        <category>documentation</category>
        
        <category>release</category>
        
        <category>organization</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Git Workflows</title>
        <description>&lt;p&gt;Almost all programming projects work with some kind of version control.
When I started to work with Git, I used the tool also directly for my private projects. 
But especially at the beginning I found it hard to structure my commits and branches in a practical way. 
For this reason I would like to show you some common strategies today, the so-called Git Workflows.&lt;/p&gt;

&lt;h1 id=&quot;simple-workflow&quot;&gt;Simple Workflow&lt;/h1&gt;

&lt;p&gt;The simple workflow consists of a single master branch. 
There is only this one branch to which changes are pushed. 
This workflow is only suitable for very small projects, e.g. private ones, where only you work on yourself. 
As the team grows, this workflow becomes very messy and you’ re going to have to deal with a lot of merge conflicts.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2018/git_workflow_simple.png&quot; data-lightbox=&quot;git_workflow_simple&quot;&gt;&lt;img src=&quot;/assets/2018/git_workflow_simple.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;feature-branches&quot;&gt;Feature Branches&lt;/h1&gt;

&lt;p&gt;This second level adds feature branches to the simple workflow. 
These branches are used to develop new functionalities separately from the rest of the project. 
After a feature is completed, the branch is merged. 
Unlike the master branch, the feature branches are therefore short-lived and only exist until their merge. 
Depending on their complexity, feature branches can often be further subdivided. 
Just make sure you don’t exaggerate, which could again affect the overall structure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2018/git_workflow_feature.png&quot; data-lightbox=&quot;git_workflow_feature&quot;&gt;&lt;img src=&quot;/assets/2018/git_workflow_feature.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;developer-branch&quot;&gt;Developer Branch&lt;/h1&gt;

&lt;p&gt;With the Developer Branch, a second, long-lived branch is created next to the Master Branch. 
This is the only place where development takes place, so that the master branch always remains in a release-ready state. 
Here, however, similar problems arise as with the simple workflow, which is why it should only be used for very small teams.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2018/git_workflow_develop.png&quot; data-lightbox=&quot;git_workflow_develop&quot;&gt;&lt;img src=&quot;/assets/2018/git_workflow_develop.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;developer-and-feature-branches&quot;&gt;Developer and Feature Branches&lt;/h1&gt;

&lt;p&gt;The previous two strategies can be combined very well. 
Again, the master branch must always be ready for release, feature branches are only ever merged with the developer branch. 
After successful testing of the functionalities on the developer branch, this branch is merged to master, which then can be released.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2018/git_workflow_dev_feature.png&quot; data-lightbox=&quot;git_workflow_dev_feature&quot;&gt;&lt;img src=&quot;/assets/2018/git_workflow_dev_feature.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;release-branches&quot;&gt;Release Branches&lt;/h1&gt;

&lt;p&gt;This extension of the developer and feature branch workflow is often used for large projects that are planning frequent releases. 
For a new release, a new release branch is created from the developer branch. 
This only is used for final bug fixes, no new features are developed here. 
As soon as the release can be shipped, the branch will be merged into both the master and the developer branch. 
The fixes in the release branches allow other teams to work on new features without disturbing the work on the release.&lt;/p&gt;

&lt;p&gt;The model is often complemented by another branch: the hotfix branch which allows direct bug fixing from the master branch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2018/git_workflow_release.png&quot; data-lightbox=&quot;git_workflow_release&quot;&gt;&lt;img src=&quot;/assets/2018/git_workflow_release.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;but-which-concept-is-right-for-me&quot;&gt;But which concept is right for me?&lt;/h1&gt;

&lt;p&gt;Basically, the more complex your project, the more complex the workflow should be. 
But also for one-man projects it often makes sense not to use the simple workflow and to use a branching strategy already here. 
For my own projects, for example, I currently use the Developer Branch concept.
But whatever you decide to do: Make sure you have a consistent naming strategy for branches (and commits, of course) 
and you’re very good to go.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Sep 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/09/git-workflows</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/git-workflows</guid>
        
        <category>git</category>
        
        <category>vcs</category>
        
        <category>organization</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Getting Started With Running</title>
        <description>&lt;p&gt;If you had told me a year ago that I would run an entire Tough Mudder in a year, I probably would have made fun of you. 
Well, to be honest, I didn’t even know about the existence of obstacle course races (OCR) of this kind at the time. 
If that were the case, I would certainly have been able to motivate myself quickly.&lt;/p&gt;

&lt;p&gt;Briefly to my prehistory: I am in my early 20s and have tried various sports since my childhood. 
Athletics, rowing, climbing, mountain biking, snowboarding, baseball, squash - 
again and again I tried different things that seemed interesting. 
Some of them I still do today, but in October 2017 I decided to take up a new challenge.&lt;/p&gt;

&lt;p&gt;During my school time I had to face - like all my friends - long distance races. 
However, long distance is actually already exaggerated. We could choose between a 12-minute and a 30-minute variant, 
the distance reached was graded. I always liked sports, but I hated endurance running. And until the end of last year, 
nothing changed in this regard.&lt;/p&gt;

&lt;p&gt;Last year I was then looking for a challenge. So what could be more obvious than to face the enemy of my youth? 
I came across a video of the NYC marathon on YouTube and decided for myself: I want to run this race for once. 
And the goal was set. Thanks Casey.&lt;/p&gt;

&lt;p&gt;In my article today I show you my way last year, how I pursue my goal and what has happened since then. 
And who knows, maybe the article will help you with your goals.&lt;/p&gt;

&lt;h1 id=&quot;the-first-two-months---c25k&quot;&gt;The First Two Months - C25K&lt;/h1&gt;

&lt;p&gt;I repeatedly tried to enjoy running. And yes, I always failed miserably. 
My problems were consistency on the one hand, but on the other hand the lack of an overall goal.&lt;/p&gt;

&lt;p&gt;So I started by looking for introductions and guides on how best to start. 
At some point I came across the C25K training plan. 
The idea behind it is to build stamina over an eight-week program, which is intended for absolute beginners. 
The goal of the program after 8 weeks is to run a distance of 5 kilometers in 30 minutes completely (without walking). 
The individual runs alternate between walking and running intervals, whereby the running intervals are constantly increased.&lt;/p&gt;

&lt;p&gt;With this concept I have completed the two months and finished the program in December 2017. 
At this point I would also like to thank the &lt;a href=&quot;https://www.reddit.com/r/c25k&quot;&gt;C25K Subreddit&lt;/a&gt;. The community is very supportive and enthusiastic. 
If you lack motivation or have any other problem - they build up and motivate each other.&lt;/p&gt;

&lt;p&gt;There is a follow-up plan that continues the concept and has a target distance of 10 kilometers in 60 minutes. 
I started this plan, but I stopped it quite early. 
I noticed that my second big problem - the lack of consistency - solved itself and I decided to continue running without any help.&lt;/p&gt;

&lt;p&gt;After the two months I was at a point where running was fun for me. So I didn’t have to torture myself out of the house anymore, 
but looked forward to the training sessions. The first milestone was thus reached.&lt;/p&gt;

&lt;h1 id=&quot;my-first-10k--discovering-ocr&quot;&gt;My first 10K &amp;amp; Discovering OCR&lt;/h1&gt;

&lt;p&gt;January and February 2018 didn’t go as planned, to be honest. 
Due to a quite intense cold I had to take a longer break and had a hard time getting back into my routine. 
However, I had already told my uncle, who also runs, about my goal, who now wanted to run with me. 
In order to put pressure on myself, I registered for my first 10 KM run in the neighbouring town at the beginning of March. 
And I quickly regretted the registration.&lt;/p&gt;

&lt;p&gt;But giving up is not an option, so I started training again. 
There was enough time until the run in May, but I rarely managed to really train longer than 5 KM. 
When the run was just around the corner, 
my personal record was a distance of 8 KM at a time and I really thought that the registration was a terrible idea. 
But with the large group of runners I was able to get myself to run through the two laps of 5 KM each without a break 
and finish my first competition with a time of 56:22.&lt;/p&gt;

&lt;p&gt;By chance I came across the obstacle courses at some point and saw that there was one in the surrounding area. 
I decided to sign up for it and have been highly motivated ever since. 
The additional challenge felt just right and the short distance of 8 KM seemed quite feasible. 
In July 2018 the time had come and I finished the Mudiator in Ulm together with my cousin with a time of 1:01:41.&lt;/p&gt;

&lt;p&gt;The run itself was great, but I was a little disappointed by the obstacles. For me these were simply not really challenging. 
But it was fun anyway and we started looking for more runs.&lt;/p&gt;

&lt;p&gt;In the meantime I was able to convince a former fellow student to try the C25K program (check out his blogpost &lt;a href=&quot;https://dominik-spieler.com/2018/09/16/tough-mudder-2018-from-couch-potato-to-a-16-km-10-miles-obstacle-course-in-just-two-month/&quot;&gt;here&lt;/a&gt;!). 
He started with the same attitude to running as I did and I needed some persuasion to get him to start. 
At this point a lot changed again. I have decided to run together with him. 
Although I had already completed the program, I found running together helpful for both of us.&lt;/p&gt;

&lt;p&gt;And the difference was immense: Until then (apart from the competitions) I always ran alone. 
But now I had a training partner and had to really keep to the training sessions. 
Excuses not to run on an agreed day were unacceptable. 
We got each other to keep on running and running longer and further than the training plan provided. 
It was certainly helpful here to have a goal in mind: 
At the beginning of the program we signed up for the Tough Mudder Half - from now on my buddy had two months to prepare 
for the 8 km course.&lt;/p&gt;

&lt;p&gt;The 8 weeks flew by and one week before the race the track was published. 
We originally assumed that the Tough Mudder Full (16 KM) would simply consist of two laps. 
But now we saw that many of the obstacles we were looking forward to wouldn’t be on the short track at all.
This is especially the case for Funky Monkey and Arctic Enema. 
I spontaneously suggested to update our tickets to the full distance. 
However, the idea was rejected, as 16 kilometres seemed to be far too long.&lt;/p&gt;

&lt;p&gt;On the day of the race we then threw all rationally made decisions regarding the track overboard and decided on the full distance. 
At this point, for those of you who don’t know the Tough Mudder, I’d like to briefly mention that the event is not a classic race. 
There is no time keeping and the focus is on teamwork and the collective mastering of the course. 
Accordingly, it was no problem to wait at some obstacles for a short time, because time doesn’t really play a role. 
Due to the resulting breaks, the 16 KM were really doable. 
And in retrospect I would have been really disappointed if we had only run the short distance.&lt;/p&gt;

&lt;p&gt;Beside the Tough Mudder there is meanwhile a large selection of similar events, and the run was certainly not our last. 
My next milestone is a half marathon in December and hopefully a complete one in May 2019.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;If you plan to go running after school or work, put your clothes aside in the morning and start running as soon as you get home. Don’t give yourself a break when you get home, that makes it a lot harder to get your ass up again.&lt;/li&gt;
  &lt;li&gt;Go running after work and you will have new energy for the rest of the day. Search for routes in nature and enjoy the time to clear your head.&lt;/li&gt;
  &lt;li&gt;Find yourself a running partner. It certainly makes sense to start alone to find your own pace. Nevertheless, it is so much easier to motivate yourself to run when you know that others rely on you.&lt;/li&gt;
  &lt;li&gt;Screw your pace. Try to run as long as possible and increase this distance. Your speed will improve all by itself.&lt;/li&gt;
  &lt;li&gt;If running seems too boring to you, look around for obstacle course races in your area.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All beginnings are difficult. If you decide to train with the C25K program, be prepared to have some self-discipline for the first two weeks. Nevertheless, it was the case with me afterwards that you integrated it into your daily routine in such a way that you want to continue on your own.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Sep 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/09/getting-started-with-running</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/getting-started-with-running</guid>
        
        <category>self-disciplin</category>
        
        <category>motivation</category>
        
        <category>sports</category>
        
        <category>running</category>
        
        <category>challenge</category>
        
        
        <category>running</category>
        
      </item>
    
      <item>
        <title>Garbage Collection in .NET</title>
        <description>&lt;p&gt;Today I would like to give you an overview of how the garbage collector of the .NET framework works. Knowledge of it makes a lot of sense to improve your programming skills regarding object creation and lifetime.&lt;/p&gt;

&lt;h1 id=&quot;garbage-collection-in-general&quot;&gt;Garbage Collection in General&lt;/h1&gt;

&lt;p&gt;I want to start with some general theory - what is garbage collection and what do I need it for? Garbage collection (GC) is basically a feature that relieves developers of the work of allocating and deallocating memory for their objects.&lt;/p&gt;

&lt;p&gt;In low-level programming languages, you as the developer have to take care of this allocation and deallocation. If you want the computer to remember an object, you allocate memory for that object. When the object is no longer needed, you have to free up the memory.&lt;/p&gt;

&lt;p&gt;Although this concept leads to very efficient programs, it is also error-prone. For example, if your program doesn’t free memory, but asks for more and more, this can lead to a memory leak, which in turn can lead to the consumption of your computer’s entire memory. Alternatively, the program simply no longer responds to user interaction. Another source of errors are bugs that cause your program to attempt to access a memory section that has not yet been allocated. In this case, the operating system will terminate your program immediately.&lt;/p&gt;

&lt;p&gt;There are more fragile issues, but they are too many to list. The concept of higher-level programming languages in this respect is identical: when you need an object, you request an instance of the respective class. This instance is then used in your program, and as long as there is a reference to the instance, memory is reserved for it. As soon as nothing in your code refers to the instance anymore, the corresponding memory will be freed again.&lt;/p&gt;

&lt;p&gt;Basically, you can memorize that programming languages with GC are usually less efficient than those without. This is due to the fact that the cleanup process is usually performed at regular intervals. For this reason, there is a potential for wasted memory between operations. For data-intensive applications, there is also the possibility that many (de)allocations may occur, which is why the program looks as if it is not responding.&lt;/p&gt;

&lt;h1 id=&quot;garbage-collection-in-net&quot;&gt;Garbage Collection in .NET&lt;/h1&gt;

&lt;p&gt;In general, garbage collection in .NET works as described above. However, I’d like to cover the topic in a bit more detail.&lt;/p&gt;

&lt;h2 id=&quot;memory-allocation-in-net&quot;&gt;Memory Allocation in .NET&lt;/h2&gt;

&lt;p&gt;In the .NET framework, each process has a virtual address space. As an application developer, you never access physical memory, but always an abstraction level of it. The garbage collector takes care of the allocation and deallocation of virtual memory on the managed heap.&lt;/p&gt;

&lt;p&gt;Blocks of the virtual memory are always in one of three states:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Free: There are no references to this block, it is ready for referencing.&lt;/li&gt;
  &lt;li&gt;Reserved: The memory block is free, but reserved for a request and cannot be used by other applications. Until the memory area is assured, no data can be stored.&lt;/li&gt;
  &lt;li&gt;Assured: The memory block is directly assigned to a physical memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gaps can occur in virtual memory. When memory is requested, a suitable space is searched in which the memory is completely available. For example, if you need 100 MB of memory in the working memory, the search will continue until a single free block of at least 100 MB memory is found. Smaller blocks will be skipped.&lt;/p&gt;

&lt;p&gt;You may be familiar with the principle of swap files, especially when you are at home in the Linux world. If available memory becomes too small, it can be swapped out to disk, so called swap files are created. .NET uses this concept, but can also swap out under certain conditions, even if the memory is not full.&lt;/p&gt;

&lt;h3 id=&quot;triggering-the-garbage-collection&quot;&gt;Triggering the Garbage Collection&lt;/h3&gt;

&lt;p&gt;There are several different ways in which exactly the garbage collection can be triggered. Firstly, of course, if the system has little physical memory. This is usually recognized by a message from the operating system. Another possibility is to exceed a limit value of the memory used by objects in the heap. This limit depends on the program and is adjusted at runtime.&lt;/p&gt;

&lt;p&gt;A third method is to manually call the &lt;a href=&quot;https://docs.microsoft.com/en-gb/dotnet/api/system.gc.collect?view=netframework-4.7.2&quot;&gt;GC.Collect() method&lt;/a&gt;. However, you will hardly need this case (except perhaps for testing the functionality of the garbage collector).&lt;/p&gt;

&lt;h3 id=&quot;managed-heap&quot;&gt;Managed Heap&lt;/h3&gt;

&lt;p&gt;I have already mentioned the managed heap several times, but have not explained it further. The Managed Heap describes a memory area of the physical memory, which was reserved by the garbage collector after its instantiation by the CLR for the administration of objects. The operating system manages a system heap in parallel.&lt;/p&gt;

&lt;p&gt;The reservation and release of memory segments is done by the Win32 methods &lt;a href=&quot;https://msdn.microsoft.com/library/aa366887.aspx&quot;&gt;VirtualAlloc()&lt;/a&gt; and &lt;a href=&quot;https://msdn.microsoft.com/library/aa366892.aspx&quot;&gt;VirtualFree()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The more objects there are on the heap, the more complex is the garbage collection process. When releasing memory, active objects are pushed together. This reduces the required memory space, but the objects retain their locality (jointly instantiated objects lie next to each other).&lt;/p&gt;

&lt;p&gt;The size of the memory usage also determines the frequency and size of the individual GC operations.&lt;/p&gt;

&lt;h3 id=&quot;generations&quot;&gt;Generations&lt;/h3&gt;

&lt;p&gt;The heap is built in generations to describe the lifetime of objects. Garbage collection usually takes the form of releasing short-lived objects that occupy only a small part of the working memory. A distinction is made between three generations:&lt;/p&gt;

&lt;p&gt;Generation 0 is the most recent generation. It contains short-lived objects such as local variables.&lt;/p&gt;

&lt;p&gt;Generation 1 also contains short-lived objects, but serves as a buffer between short-lived and long-lived objects.&lt;/p&gt;

&lt;p&gt;Generation 2 finally contains the long-lived objects. These are, for example, objects with static data that are retained throughout the entire application runtime.&lt;/p&gt;

&lt;p&gt;A garbage collection always takes place for a particular generation, if the appropriate conditions are met. The collection within a generation always contains the younger generations. A collection in generation 2 is therefore also referred to as a complete collection because it cleanses all objects in the managed heap.&lt;/p&gt;

&lt;p&gt;Objects that still exist after a garbage collection are moved up the generation hierarchy. If the garbage collector recognizes that this number is very high in a generation, the threshold value for memory allocations for this generation is increased. It is always weighed between two priorities: The size of the memory used by an application and the amount of garbage collection required.&lt;/p&gt;

&lt;p&gt;GC more often takes place in younger generations. If more working memory is required, the older generations (including those below them) are cleaned.&lt;/p&gt;

&lt;h3 id=&quot;garbage-collection-procedure&quot;&gt;Garbage collection procedure&lt;/h3&gt;

&lt;p&gt;At the start of a GC, a list of active objects is created. The objects to be compressed (active objects moved together) are then reassigned. Storage space for inactive objects is released. Objects are now promoted in their generation.&lt;/p&gt;

&lt;h2 id=&quot;gc-in-practice&quot;&gt;GC in practice&lt;/h2&gt;

&lt;p&gt;You have probably already worked with unmanaged resources. In this case, the IDisposable interface can be used to share manually used memory of unmanaged resources. This is usually seen in the form of file access. The construction of a corresponding code snippet is usually based on the construction of a using block. After finishing the code of this block, the Dispose() method is called, which releases the resources again. IDisposable in itself has nothing directly to do with Garbage Collection. However, manual release is required when objects access unmanaged resources, as in the following example: If managed objects refer to unmanaged objects, these must first be released manually so that the managed objects can be cleaned up.&lt;/p&gt;

&lt;p&gt;The following example creates and releases a StreamReader instance:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StreamReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;StreamReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file1.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;c1&quot;&gt;// … &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The using block does not have to be used, alternatively Dispose() can be called within a finally block. Dispose itself does not belong to the garbage collection, so it is not called in a collection! This construct can be used for any class that implements IDisposable.&lt;/p&gt;

&lt;p&gt;You should also not rely on the garbage collector. It’s good style to close database connections or the like by yourself, instead of leaving this task to the GC.&lt;/p&gt;

&lt;p&gt;Also, you should have little reason to initiate the GC yourself. Exceptions occur when you have reason to believe that there is a large number of objects in generations 1 and 2 that are ready to be cleaned up. This may be the case, for example, if you have just closed a large form whose controls are all no longer needed.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope that this article has given you a rough insight into how the Garbage Collection works in C#. But the topic itself gives enough theory for a whole book, so I recommend to the inclined reader to read more detailed articles. &lt;a href=&quot;https://docs.microsoft.com/en-gb/dotnet/standard/garbage-collection/fundamentals&quot;&gt;Microsoft’s own documentation&lt;/a&gt; on the subject is certainly a good starting point, have fun with it!&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Sep 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/09/dotnet-garbage-collection</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/dotnet-garbage-collection</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>programming</category>
        
        <category>csharp</category>
        
        <category>dotnet</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Dialogs in Xamarin.Forms</title>
        <description>&lt;p&gt;If you already have a little experience in cross-platform development with Xamarin.Forms, 
you probably know the problem: Navigation between different pages works very well, 
but there is no easy solution to display dialog boxes overlaying an active page.&lt;/p&gt;

&lt;p&gt;Today I want to show you how you can implement this feature in your Xamarin.Forms application. 
I have created an example project for this purpose, which you can download from my 
&lt;a href=&quot;https://github.com/MarcelJurtz/XamarinDialogDemo&quot;&gt;GitHub site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I first create a new Cross-Platform project in Visual Studio. 
I start without a template (blank) and use .NET standard for the shared code base. 
After the project is initialized, I add the plugin for the dialogs to all projects. 
You can find it via &lt;a href=&quot;https://www.nuget.org/packages/Rg.Plugins.Popup/&quot;&gt;Nuget&lt;/a&gt;. 
The project is also open source on &lt;a href=&quot;https://github.com/rotorgames/Rg.Plugins.Popup&quot;&gt;GitHub&lt;/a&gt;. 
To add a Nuget package to your projects, mark the project (or solution) and select the entry 
&lt;em&gt;Manage NuGet Packages&lt;/em&gt;. Select all projects of your solution to install the package.&lt;/p&gt;

&lt;p&gt;The first thing to do is to initialize the package. This takes place in the platform-specific projects. 
For Android, open the MainActivity.cs file and add the following to your &lt;em&gt;OnCreate()&lt;/em&gt; method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Rg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same goes for iOS: Add the following snippet to your &lt;em&gt;FinishedLaunching()&lt;/em&gt;-Method inside the AppDelegate.cs file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Rg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to support UWP, the relevant code goes inside the App-class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Rg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreviousExecutionState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationExecutionState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Terminated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More detailed information about initializing the plugin can be found in the 
&lt;a href=&quot;https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Getting-started&quot;&gt;projects documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;integrating-dialogs&quot;&gt;Integrating Dialogs&lt;/h2&gt;

&lt;p&gt;Now add a new Content Page to the .NET standard project. This is generated with predefined code, which must be adjusted as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pages.PopUpPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; 
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:pages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PopupDemo.Dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages.PopUpPage&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the foundation of the dialog. I just removed the sample content and added the namespace for the plugin. 
Finally I changed the root element of the page from ContentView to PopUpPage. 
These changes are also required in the code-behind file. 
All you have to do here is change the inheritance from ContentView to PopUpPage.&lt;/p&gt;

&lt;p&gt;Next, I design the content of the dialog window. I want to show the user a simple login dialog, 
so I need input fields for username and password, as well as a button to confirm the input.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; 
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:pages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:animations=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Animations;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PopupDemo.Dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;animations:ScaleAnimation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DurationIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;DurationOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinIn&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinInOut&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;HasBackgroundAnimation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Top&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bottom&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.2&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Padding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Spacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;White&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;HorizontalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Entry&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;me@example.com&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Password&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Entry&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;IsPassword=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Clicked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button_Clicked&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Orange&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Submit&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;TextColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;White&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages:PopupPage&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now there is missing only one possibility to display the dialog. 
I added a simple button to my main page and linked it to an event handler that opens the dialog. 
In real applications, you would do this by adding bindings to the ViewModel, 
but I decided to use the quick and dirty variant to keep the example as simple as possible.&lt;/p&gt;

&lt;p&gt;Calling the dialog probably reminds you syntactically of the normal navigation between the pages. 
Closing the dialog works analogously, I wired this part with the EventHandler in the code-behind file of the dialog.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Open Dialog&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PopupNavigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PushAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Close Dialog&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PopupNavigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PopAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;animations&quot;&gt;Animations&lt;/h2&gt;

&lt;p&gt;If you now start the application on a device or emulator of your choice, everything should already work. 
Besides the pure dialog functionality, the plugin offers the possibility to animate the dialogs. 
The animation is defined in the XAML code of the dialog. 
You can also find complete documentation for this on the 
&lt;a href=&quot;https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Animations&quot;&gt;projects website&lt;/a&gt;. 
Here it’s a good idea to just play around with the available possibilities, but finally you’ll find a small example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; 
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:pages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:animations=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Animations;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PopupDemo.Dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;animations:ScaleAnimation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DurationIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;DurationOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinIn&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinInOut&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;HasBackgroundAnimation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Top&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bottom&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.2&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xgXXz-FT2I4?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 09 Sep 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/09/xamarin-forms-dialogs</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/xamarin-forms-dialogs</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>programming</category>
        
        <category>xamarin</category>
        
        <category>cross-platform</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>TypeScript - Up and Running in 10 Minutes</title>
        <description>&lt;p&gt;You are aware of JavaScript, but have never really made friends with the language? 
Today I would like to show you a first insight into the JS-SuperSet TypeScript, 
so perhaps you can give JavaScript a second chance.&lt;/p&gt;

&lt;p&gt;TypeScript is a SuperSet of JavaScript. SuperSet means that all functionalities of JS are both supported and extended. 
As the name suggests, the main feature of TypeScript are strongly typed variables. But more on this in a moment.&lt;/p&gt;

&lt;p&gt;TypeScript is developed by Microsoft and was initiated by MS employee Anders Hejlsberg, who had already designed C#. 
TypeScript files typically end with the extension .ts and can be converted to JavaScript using the TypeScript Compiler (tsc). 
Did I also mention that TypeScript is completely open source?&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I use Visual Studio code to design the example in this article. Of course you can use any other editor as well. 
My application is also based on NodeJS, which you can download from the project’s website or via the package manager of your choice.&lt;/p&gt;

&lt;p&gt;In short, NodeJS is a way to run JavaScript on the server side. This allows you to use your applications without a browser. 
After you have installed Node, you should install the typescript package, which gives you access to the TS compiler. 
You can use the Node Package Manager (npm) to install packages. 
To do so, open a terminal window of your choice and enter the command &lt;em&gt;npm install -g typescript&lt;/em&gt;.
The -g flag specifies that the package should be installed globally instead of only in the current directory, 
so that the TS compiler is now available to you from anywhere.&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h2&gt;

&lt;p&gt;Let’s start with an example. How could it be otherwise, we will develop our Hello World application in TypeScript. 
Next snippet is all we need:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, variables are declared with the keyword var as in JavaScript. 
However, the type of variable follows the name of the variable, separated by a colon. 
TypeScript provides three basic types: string for strings, 
number for numeric values (always represented by a 64-bit floating point number) and boolean for logical values. 
Here, too, we will go into more detail in a moment, but now we would like to know how to get our program up and running.&lt;/p&gt;

&lt;p&gt;Currently you should have a directory containing a single .ts file. 
To generate a JavaScript file from it, we call the TS compiler from a terminal and pass our script to it. 
In my case it looks like this: tsc main.ts.&lt;/p&gt;

&lt;p&gt;If everything is ok, a new file will be created with the same name as our .ts file. 
Now, however, with the.js extension. The new file contains the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Admittedly, there is hardly any difference here. 
You can see, however, that the typing is no longer applied. The new JavaScript file can now be used with Node. 
Here, too, the terminal is used to invoke the program: node main.js.&lt;/p&gt;

&lt;p&gt;This creates the “Hello World!” output we are looking for.&lt;/p&gt;

&lt;p&gt;The TypeScript compiler also helps you to avoid errors. For example, if you try to assign a text to a variable of type &lt;em&gt;number&lt;/em&gt;, 
you will receive the following error message when compiling:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;main.ts&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: error TS2322: Type &lt;span class=&quot;s1&quot;&gt;'&quot;test&quot;'&lt;/span&gt; is not assignable to &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Depending on which editor or plugins you are using, you will be notified during development. 
VS code, for example, shows you directly the displays the corresponding error message.&lt;/p&gt;

&lt;p&gt;Of course, this is only the tip of the iceberg, but we want to start small.&lt;/p&gt;

&lt;p&gt;Your first piece of TypeScript is ready - but you certainly can’t do too much with it yet. 
My goal for this article was to give you a basic idea of TypeScript and give the language a chance. 
With Microsoft in the background, TypeScript has a strong backing company and offers great potential, especially for C# developers, 
since learning the language should be much easier than using JavaScript directly.&lt;/p&gt;

&lt;p&gt;If you would like to learn more about TypeScript, the language has extensive documentation. 
I have also planned a follow-up article for the next steps.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Sep 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/09/typescript-up-and-running-in-10-minutes</link>
        <guid isPermaLink="true">http://localhost:4000/2018/09/typescript-up-and-running-in-10-minutes</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>programming</category>
        
        <category>typescript</category>
        
        <category>javascript</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Building an MVP - You are doing it wrong</title>
        <description>&lt;p&gt;The term MVP - Minimum Viable Product is no longer a new word. 
The term was first coined by Frank Robinson in 2001 and is now used very frequently.&lt;/p&gt;

&lt;p&gt;The basic idea of an MVP is to make a version of a product available to the customer as quickly as possible. 
The goal is not to generate sales, but to learn. 
Of course it’s not a bad idea and it’s also the intention to earn money with your product, 
but the idea here is to put yourself in the customer’s shoes and better understand their needs and requirements. 
This allows you to use early feedback and improve the quality of your product.&lt;/p&gt;

&lt;p&gt;As you can see, the concept is very simple. But the problem arises during implementation. 
When we develop a product, we usually already have a fairly clear idea of what the final result should look like. 
To define how the associated MVP should look, we start cutting features at various points.&lt;/p&gt;

&lt;p&gt;The result of this process is then certainly minimal, but is it also viable? 
Many teams forget this point and develop a prototype with limited functionality, which is simply not usable. 
As I mentioned in my article about &lt;a href=&quot;/2018/07/agile-get-started-with-scrum&quot;&gt;Scrum&lt;/a&gt;, the goal of every sprint is to add a working increment to the product. 
After each iteration the user should have a basic version of his product, enhanced by features of the last sprint.&lt;/p&gt;

&lt;p&gt;The easiest way to illustrate this is with an example: 
If you want to sell a vehicle to someone, there are (in theory) different levels, each working standalone. 
From a scooter, a bicycle and a motorcycle to a car, each level has its own functionality that offers the customer added value. 
Also, each level adds features and functionality to the previous version.&lt;/p&gt;

&lt;p&gt;The approach, which you might find in practice however, could look more like this: 
The customer receives the tires first, then the mounted underbody, through the body to the fully assembled car. 
So you can only really do something with the end product.&lt;/p&gt;

&lt;p&gt;So when developing a prototype, keep the goal of adding value in mind. Updates should complement and improve the functionality, 
but the original product should already be usable.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Aug 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/08/mvp_youre_doing_it_wrong</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/mvp_youre_doing_it_wrong</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>management</category>
        
        <category>prototyping</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Dockerizing .NET Core Apps</title>
        <description>&lt;p&gt;I have already written two articles about the basics of Docker. 
While these should provide a general overview of you technology, I would like to illustrate a concrete application example today. 
I will show you the whole process, from writing a simple application to using it in the form of a Docker Container.&lt;/p&gt;

&lt;p&gt;If you haven’t read my previous articles, you may not have the idea why you should use Docker at all. 
For a full explanation, I refer to my other articles which you can check out 
&lt;a href=&quot;/2018/07/docker-getting-started&quot;&gt;here&lt;/a&gt; and 
&lt;a href=&quot;/2018/07/docker-installation-and-first-steps&quot;&gt;here&lt;/a&gt;. 
However, I would still like to comment briefly on the idea. Imagine you are writing a.NET application. 
To use your application you now need a special version of the.NET framework, 
as well as possibly a suitable database and other dependencies.&lt;/p&gt;

&lt;p&gt;For larger applications it may well be that just installing and setting up the environment is not a trivial task. 
Over the years, this concept has become simpler, partly through the use of VMs and installation. 
Nevertheless, according to this approach, an application requires a complete VM, which is not really resource-saving.&lt;/p&gt;

&lt;p&gt;Docker allows you to map all dependencies in the form of a docker image. 
This image can later be instantiated as a container, which forms a self-contained, isolated unit. 
You can imagine a container like a VM, but the Docker container does not have its own operating system. 
Starting and stopping a container does not require a complete startup and shutdown of an operating system, 
which significantly reduces the loading times.&lt;/p&gt;

&lt;p&gt;So far so good. Please install Docker first, if you haven’t already done so. You will find instructions on how to do this 
&lt;a href=&quot;/2018/07/docker-installation-and-first-steps&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have now successfully installed Docker and are ready to go. Before we write our own images, 
I would like to go into the general usage. Docker is available from the command line. 
So on Windows you can use the CMD, Powershell or a counterpart of a third party.&lt;/p&gt;

&lt;p&gt;Docker commands are initiated with the keyword docker. If only this is entered without a subsequent command, 
a list of available commands is displayed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docker version&lt;/em&gt; gives you information about the installed version of Docker. 
You see two entries here,a server and a client version. The server version will mention a Linux-OS. 
During installation you could choose between Linux and Windows containers. 
The Linux containers are selected by default, in this case the containers use the Linux kernel of the host operating system. 
If you are using Windows, Docker will create a minimal Linux VM to serve as host. 
You can see this when you open the HyperV Manager, there you will see an entry with the name MobyLinuxVM.&lt;/p&gt;

&lt;p&gt;You can also change your choice of container technology later by selecting the Docker icon in the system tray. 
The context menu that appears contains an entry for switching from Linux to Windows (and vice versa). 
However, Linux containers are the usual variant and I recommend that you use them, unless you have a special reason for changing.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;docker info&lt;/em&gt; command lists information about the installed images and instantiated containers. 
This list is currently empty because Docker has just been installed. 
The &lt;em&gt;docker run hello-world&lt;/em&gt; command starts the image named hello-world. The procedure here is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Docker Client first contacts the Docker Engine (also called Docker Daemon), which determines that the image is not locally available.&lt;/li&gt;
  &lt;li&gt;It then searches the Docker Hub (a platform for exchanging Docker images) and downloads the appropriate image.&lt;/li&gt;
  &lt;li&gt;The engine then creates a container containing an application that outputs “Hello World”.&lt;/li&gt;
  &lt;li&gt;This output is sent to the Docker Client, which outputs the text in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downloaded images are kept locally. If you run it again, no new download takes place, the local image is reinstantiated. 
Images can also be downloaded without being executed immediately. Use the command &lt;em&gt;docker pull imagename&lt;/em&gt; to do so.&lt;/p&gt;

&lt;p&gt;With the command &lt;em&gt;docker ps&lt;/em&gt; you can view the running containers. 
Here, however, you must note that some containers are started, fulfill a task and are then ended again. 
Other containers run passively in the background and are not terminated automatically. 
Examples are web servers or database management systems.
To also display paused and stopped containers, use the flag -a. 
You can in general interact directly with specific containers. 
The basis for this is always the container ID, an alphanumeric character string with which the container can be uniquely identified. 
However, you do not have to enter the entire ID, the first digits are sufficient until no more mix-ups are possible.&lt;/p&gt;

&lt;p&gt;Images are usually tagged. Tags are used to specify a version of an image. 
If no tag is specified, the latest version is used by default. 
However, this is not recommended, as it can lead to problems with later releases. 
So always try to use a specify a version of images you use. 
To do that, simply add a colon, followed by the version after the name of the image.&lt;/p&gt;

&lt;p&gt;I think that’s enough for now with the basics. Now we will develop our own application with Docker support. 
I am using Visual Studio Code, so the approach will work on all major operating systems.&lt;/p&gt;

&lt;p&gt;With the command &lt;em&gt;dotnet new console&lt;/em&gt; I instantiate a new console application. 
The template creates a Hello-World application, which can be started with the command &lt;em&gt;dotnet run&lt;/em&gt;. 
Next, we’ll take care of linking to Docker.&lt;/p&gt;

&lt;p&gt;First, a dockerfile must be created. Dockerfiles describe the structure of an image and are usually based on other images. 
My application is based on the &lt;em&gt;microsoft/dotnet:2.1-sdk&lt;/em&gt; image. 
The dockerfile is created without a file extension with the name dockerfile on csproj file level and it contains the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-generic&quot; data-lang=&quot;generic&quot;&gt;FROM microsoft/dotnet:2.1-sdk

WORKDIR /app
COPY /bin/debug/netcoreapp2.1/ .

ENTRYPOINT [&quot;dotnet&quot;,&quot;NET_CORE_Docker.dll&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NET_CORE_Docker is the name of the project. Now an image must be built based on the docker file. 
This can be done with the command &lt;em&gt;docker built -t net_core_docker .&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The dot at the end defines the current directory as the starting point. 
Net_core_docker is the name of the image, only lowercase letters are allowed.&lt;/p&gt;

&lt;p&gt;The image can now be instantiated with &lt;em&gt;docker run net_core_docker&lt;/em&gt; and the container will be started automatically. 
As expected, the output is &lt;em&gt;Hello World!&lt;/em&gt; Our first project is running!&lt;/p&gt;

&lt;p&gt;Of course you can also work with Visual Studio instead of VS Code. 
Docker support is already implemented here and you can add it to your project by simply right-clicking on the project 
and selecting &lt;em&gt;Add Docker Support&lt;/em&gt;. The docker file is then created automatically.&lt;/p&gt;

&lt;p&gt;Our first.NET core application now runs with Docker. 
Of course, this is not limited to console applications, 
you can also create an ASP.NET core application with Docker support, for example. However, 
this article has shown you how to integrate Docker into the development of.NET Core. 
In addition to deployment, Docker is ideal for test and development environments because you can set up other databases 
or the like without complex installations and compatibility problems with software already installed. 
Containers can be installed in parallel without any problems and thus have access to different options.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Aug 2018 08:00:00 +0200</pubDate>
        <link>http://localhost:4000/2018/08/dockerizing-net-core</link>
        <guid isPermaLink="true">http://localhost:4000/2018/08/dockerizing-net-core</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
  </channel>
</rss>
