<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcel Jurtz</title>
    <description>A software developers blog.
</description>
    <link>http://blog.mjurtz.com/</link>
    <atom:link href="http://blog.mjurtz.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 08 Jul 2018 15:38:25 +0200</pubDate>
    <lastBuildDate>Sun, 08 Jul 2018 15:38:25 +0200</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Docker - Installation and First Steps</title>
        <description>&lt;p&gt;After outlining the theory behind container management with Docker in last week’s article, I would like to continue the topic in a more hands-on way today.&lt;/p&gt;

&lt;p&gt;I’ll show you the installation and the first steps in Docker. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Docker is available for Windows, Linux and Mac OS. For the download you’ll need to sign up for a free account.&lt;/p&gt;

&lt;p&gt;I would like to point out that the Windows version is not intended for production use, only for development and testing. It runs (currently) on a Mobylinux Hypervisor VM, but a native Win10 application is under development. Nevertheless, you will hardly notice this, the usage feels native and you can work on Windows with a command line of your choice.&lt;/p&gt;

&lt;p&gt;The first command I want to show you is docker info. This will show you information about your installation. If you are using Windows, you can see here what I just mentioned: The client specifies Windows as OS, but the server indicates Linux.&lt;/p&gt;

&lt;h2 id=&quot;running-your-first-container&quot;&gt;Running Your First Container&lt;/h2&gt;

&lt;p&gt;Next we want to create and start our first container. We use the following command for this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker run is the command to start a container, followed by the name of the image, in this case hello-world (Tip: If you get a timeout under Windows, try to set the DNS server to fixed in Docker’s network settings, this helped me).&lt;/p&gt;

&lt;p&gt;You will often stumble across the term docker engine. The Docker Engine includes the Docker Client and the Docker Daemon. The client makes API calls to the daemon, which then processes the commands. In my example, the Docker Daemon now looks for an image named hello-world. If this is not found locally, the search is continued in the default registry, usually the docker hub. The image is downloaded (if one is found) from there and started. When a container is stopped, the local copy of the image is retained, so that a later call of it does not require a new download.&lt;/p&gt;

&lt;p&gt;The container has now been started. You can view all active containers with the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the flag -a you can specify that stopped containers should also be displayed.&lt;/p&gt;

&lt;p&gt;You can also download an image without starting a container immediately:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I generally recommend that you always specify the version of the image you want to load. You can enter the version number separated by a colon after the name of the image. Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull hello-world:1.2 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To remove an image, use the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker rmi hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The version number can also be specified here; this is done in the same style as for the pull.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-own-images&quot;&gt;Creating Your Own Images&lt;/h2&gt;

&lt;p&gt;Now I want to create my own image. I want to write a simple PHP hello world application. For this I need a so called dockerfile. These files describe images and serve as a kind of blueprint. For the realization of a PHP application PHP and a compatible web server is required. I will use Apache here, so I need an image with Apache, PHP and my own script. First I need a suitable docker file. Fortunately, I don’t have to write it myself, I can use templates from the Hub.&lt;/p&gt;

&lt;p&gt;On the Docker Hub I can find it by searching for’PHP’ and using one of the entries that lists the keyword’Apache’. You will find here different entries, each with a highly specialized version on the left, to the right the versions become more and more general. I recommend that you use one of the more specialized versions to prevent unwanted updates.&lt;/p&gt;

&lt;p&gt;I decide to use the image with PHP 7.2 and Apache Stretch. The Hub page lists how to handle the template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM php:7.0-apache 
COPY src/ /var/www/html/  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since I want to use PHP 7.2, I update the version number accordingly. This script now corresponds to the content of my docker file. Brief summary: I now have a folder containing my docker file with the above content and another folder ‘src’ containing the index.php with a simple Hello-World script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello Docker!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker images are ‘layered’. The PHP image is based on other images and so on. Our own image is based on php:7.2-apache. This allows us to keep our docker file short and concise and to include PHP and Apache with just a single line. So our docker file will download the PHP image from Docker Hub, and copy the files from the src folder to the /var/www/html/ directory within the container.&lt;/p&gt;

&lt;p&gt;Now the image must be built. To do this, I use the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; hello-docker &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hello-docker is the name of my image, the -t flag is used to assign a name. At the end you have to specify the path to the docker file. The point references the current directory.&lt;/p&gt;

&lt;p&gt;After the image has been created, it can be started in the form of a new container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 hello-docker &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The call looks almost like the one we’ve already met. The -p 80:80 addition merely defines that the traffic arriving at port 80 on the host is forwarded to port 80 of the container.&lt;/p&gt;

&lt;p&gt;After the start you can now reach the web server via localhost. Your first own container is now up and running!&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/docker-installation-and-first-steps</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/docker-installation-and-first-steps</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Tim Ferriss - The 4 Hour Work Week</title>
        <description>&lt;p&gt;Most of you may already know the book by Tim Ferriss. Nevertheless, I would like to hold my thoughts here, because some approaches and concepts have really made an impression on me.&lt;/p&gt;

&lt;p&gt;The basic idea of the book is that you can work from any location and thus combine work and travelling. The modern definition of wealth is not defined by the bank account balance, but by the ability to freely manage one’s time.&lt;/p&gt;

&lt;p&gt;Today’s socially accepted course of life is as follows: Educate yourself in the first 20 years of your life. Work hard for the next 40(+) years and finally retire in the next 20 years. In other words, work hard and save a lot of money that you won’t have any fun with because once you reach the goal you are either old or dead.&lt;/p&gt;

&lt;p&gt;You probably know the idea of three currencies in life: Time, money and energy. At every stage of your life, however, you seem to be missing one of these. In your youth you have time and energy, but no money. When you grow up you have energy and money, but no time. Being a retiree, you have time and money, but no energy.&lt;/p&gt;

&lt;p&gt;So what is the first step to avoid this problem? Appreciate all three currencies - and not just the money.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, Ferriss measures the degree of freedom by means of a “Freedom Multiplier”. To do this, he asks the following 4 questions for anything he does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What do you do?&lt;/li&gt;
  &lt;li&gt;Where do you do it?&lt;/li&gt;
  &lt;li&gt;When do you do it?&lt;/li&gt;
  &lt;li&gt;With Whom do you do it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more of these you control, the freer you are. So if you control all four, you report to no one but yourself.&lt;/p&gt;

&lt;p&gt;Ferriss describes the way to achieve exactly this with the acronym DEAL: Definition, Elimination, Automation and Liberation.&lt;/p&gt;

&lt;p&gt;Definition: Describe your goals. Define what you would do if all time and money-related hurdles were removed from your path.&lt;/p&gt;

&lt;p&gt;Elimination: You can’t do everything at once. A day only has 24 hours. And since time is your most valuable asset, you should use it wisely. Cut the crap! Stop wasting hours on image boards or social media channels and use this time to pursue your dreams. You’ll notice how fast you can come up with results if you just allocate a small, fixed period of time every day.&lt;/p&gt;

&lt;p&gt;Automation describes the idea of earning money passively. After you have implemented your idea, it should be possible for it to generate money without any further effort on your side.&lt;/p&gt;

&lt;p&gt;Finally, Liberation is supposed to loosen locationality and allow you to work anytime, anywhere.&lt;/p&gt;

&lt;p&gt;This is the basic idea of the book, so to speak the TL;DR version of a summary. But let us take up a few concepts in more detail below:&lt;/p&gt;

&lt;h2 id=&quot;retirement-probably-sucks&quot;&gt;Retirement Probably Sucks&lt;/h2&gt;

&lt;p&gt;Retirement is praised everywhere as the big goal that is being worked towards for a very long time. This expectation, however, assumes that you hate what you are doing and finally get your peace of mind when you retire. Also, things like inflation will increase the cost of living during your retirement (which may not matter to you, assuming you have made good investments). But if you have the opportunity to retire early, you will most likely have an excellent willingness and motivation to work, you you might get bored after a short period of retirement and get back into business.&lt;/p&gt;

&lt;p&gt;Ferriss suggests an alternative: Mini-retirements. Instead of betting all your money on never having to work again at the end of your 60s, take mini retirements at regular intervals to recharge your batteries. Use this opportunity to learn something completely new, such as surfing or flying an airplane.&lt;/p&gt;

&lt;p&gt;If you didn’t have to work anymore and have all the time in the world, you’d probably get bored pretty quickly. I’m pretty sure you want to work. But it’s self-determined and based on your own ideas.&lt;/p&gt;

&lt;h2 id=&quot;travel-cheap&quot;&gt;Travel Cheap&lt;/h2&gt;

&lt;p&gt;A first discouraging thought about travelling is often money. But travelling does not have to be expensive. Living and working abroad is often cheaper than paying rent in your home country. Of course, that always depends on what your starting situation is, but keep that in mind. In the book Ferriss also recommends renting a hotel for the first few nights in a new location and finding local rental apartments during these first few days. Online portals for this are often significantly overpriced.&lt;/p&gt;

&lt;h2 id=&quot;consistency-is-key&quot;&gt;Consistency Is Key&lt;/h2&gt;

&lt;p&gt;I do not remember how many times I have read this advice or passed it on myself. More is not always better and consistency is often better than intensity. Try to contribute regularly to your goals and you will notice how great the effects are.&lt;/p&gt;

&lt;p&gt;The same applies to you if you want to start your own business. You don’t have to quit your job and jump right into your new business. This may work, of course, but it scares many people off. Instead, you can simply start to turn your ideas into reality in parallel and - as soon as it turns out that your concept works out - switch to a full-time model.&lt;/p&gt;

&lt;h2 id=&quot;dont-shit-where-you-eat&quot;&gt;Don’t Shit Where You Eat&lt;/h2&gt;

&lt;p&gt;Try to have different places for different things. Don’t work in your bedroom and vice versa. This should help to leave things where they belong and not think about work in bed. I found this really helpful for myself when using my bed to sleep and not to watch movies.&lt;/p&gt;

&lt;h2 id=&quot;utilize-the-pareto-principle&quot;&gt;Utilize The Pareto Principle&lt;/h2&gt;

&lt;p&gt;In many different areas you will encounter the 80-20 spread. The basic idea is that with 20% of the input result into 80% of the output. The “Better done than perfect” rule is also important here. You have to decide for yourself which points are important for you and I’m not saying that for everything you do you should only aim for the 20%. But think carefully what proportion of the remaining 80% of your time is worth to be realized.&lt;/p&gt;

&lt;p&gt;In this context, Ferriss also goes into Parkinson’s law, which states that a task takes as much time as you allow it to take.&lt;/p&gt;

&lt;p&gt;That was new to me, but I realized it is true. And if you started a student research project just before the deadline, I’m sure you’d agree as well.&lt;/p&gt;

&lt;p&gt;If you focus on 20% with a tighter deadline, you will achieve significantly more than you can imagine.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Stop hating your reality, subject it to your will&lt;/li&gt;
  &lt;li&gt;Living in foreign countries is often cheaper than your regular rent&lt;/li&gt;
  &lt;li&gt;Establish financial reserves for the worst case&lt;/li&gt;
  &lt;li&gt;Ask for forgivness, not for permission&lt;/li&gt;
  &lt;li&gt;For the important things in life, it’s never the right time&lt;/li&gt;
  &lt;li&gt;Relative income is more important than absolute income&lt;/li&gt;
  &lt;li&gt;Define your personal nightmare and create a plan to limit ist impacts&lt;/li&gt;
  &lt;li&gt;Define your dreams – short- and longterm&lt;/li&gt;
  &lt;li&gt;Focus on your strengths rather than trying to eliminate your weaknesses&lt;/li&gt;
  &lt;li&gt;What are you waiting for?&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 04 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/book-review-four-hour-work-week</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/book-review-four-hour-work-week</guid>
        
        <category>book</category>
        
        <category>review</category>
        
        <category>ferriss</category>
        
        <category>life</category>
        
        <category>self</category>
        
        <category>business</category>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Getting Started with Docker</title>
        <description>&lt;p&gt;As a software developer, you’ve probably heard about Docker and perhaps already used it. But if you’re like me, you’ve been observing the topic from a distance with some interest, but you haven’t gotten into it yet.&lt;/p&gt;

&lt;p&gt;In this article I would like to introduce you to the concept of docker and the “big picture”. This post will not be a detailed tutorial, but will give you an overview of the technology and help you get started.&lt;/p&gt;

&lt;p&gt;Docker is software for isolating applications through container virtualization. Before we start with Docker as a practical example, I would therefore like to discuss containers in general and describe what distinguishes them from virtual machines.&lt;/p&gt;

&lt;h2 id=&quot;what-are-containers&quot;&gt;What are containers?&lt;/h2&gt;

&lt;p&gt;Imagine a company wants to put a new application into operation. In the past, this was usually done in such a way that new hardware was purchased for this purpose; each physical server was responsible for one application. When a new application was added, however, it was often unclear how much power would be required for the new application, which is why it was often overdimensioned. This, of course, also results in unnecessary costs.&lt;/p&gt;

&lt;p&gt;The successor of this concept, which is often used today, are virtual machines. Physical hardware is distributed across multiple virtual machines on which the applications run. This means that an application is no longer managed per physical server, but per VM.&lt;/p&gt;

&lt;p&gt;However, this concept is already problematic: Although the number of servers is reduced, each VM still requires its own OS installation, which in turn requires license fees (at least in most cases), as well as time for administration of the operating system, etc. This of course was also the case with the previous concept, but we’d like to circumvent that.&lt;/p&gt;

&lt;p&gt;In addition, every operating system needs a whole bunch of storage space, which could otherwise be used elsewhere. This is best illustrated in the following graphic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180701_Container_VM.jpg&quot; alt=&quot;Hypervisor Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The graphic shows a classic hypervisor architecture with three virtual machines. Okay, basically the points OS and VM belong together, but to compare the graphics better with the container counterpart, I have listed them separately here. In return, let’s look at the structure of a container-based architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180701_Container.jpg&quot; alt=&quot;Container Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the layer of hypervisor and VMs disappeared. The containers in which the applications run share the operating system. This approach is much lighter, since no entire OS needs to be loaded to start a container. When you try Docker, you will notice that a Docker container usually takes less than a second to launch. In addition, much less storage space is generally required, as the various operating systems are no longer required.&lt;/p&gt;

&lt;p&gt;The fundamental difference between hypervisor and container technology is therefore the common operating system basis of container-based architecture. Next, let’s look at Docker as a concrete example.&lt;/p&gt;

&lt;h2 id=&quot;what-is-docker&quot;&gt;What is Docker?&lt;/h2&gt;

&lt;p&gt;First of all: Docker is neither the first nor the only container technology. Docker has become the de facto standard thanks to its ease of use and other features and is used productively by a large number of organizations worldwide. One of these important feature of Docker is Docker Hub, which I will cover soon. The many additional applications and plugins are not only provided by Docker Inc., but also by 3rd party developers and companies.&lt;/p&gt;

&lt;p&gt;The company behind Docker, Docker Inc. was founded in San Francisco in 2010 under the name dotCloud and was renamed in 2013.&lt;/p&gt;

&lt;p&gt;Docker Inc. is not the same as Docker. The software itself is open source and released under the Apache 2.0 license. At the core of Docker is the Docker engine, which is used to create and run images. You can think of an image like a disabled container or a template for one.&lt;/p&gt;

&lt;p&gt;Docker Hub is a platform (a so-called image registry) on which images can be exchanged. For example, if you want to create a PHP application and your container needs an Apache web server and a PHP installation, you can search for pre-built images on Docker Hub and integrate them into your project. You will find a multitude of offers for various applications there, which means that you hardly have any effort in creating your own images. You can think of Docker Hub as a “PlayStore for enterprise applications”.&lt;/p&gt;

&lt;p&gt;DockerHub is not the only image registry. Besides this, there are many other cloudbased registries, but there are also ways to host one in your own network. This is especially useful for business applications with a no-cloud policy (however, you can also mark your Docker Hub images as private so that only you have access to them).&lt;/p&gt;

&lt;h2 id=&quot;for-what-kind-of-software-can-docker-be-used&quot;&gt;For what kind of software can Docker be used?&lt;/h2&gt;

&lt;p&gt;Containers can be used for both stateless and statefull applications. Although many advantages of containers only become visible with stateless applications, there are a large number of images for database management systems, for example. Containers will keep your data when turned off, so you can easily run a PostgreSQL instance with Docker, for example. So-called “volumes” can also be used to hold this data even if a container is destroyed.&lt;/p&gt;

&lt;h2 id=&quot;container-orchestration&quot;&gt;Container Orchestration&lt;/h2&gt;

&lt;p&gt;A buzzword you’re sure to stumble upon early on is container orchestration. But what’s it all about? It refers to the (automated) cooperation of many individual services within a complex application. Docker has its own tool for this: Docker Swarm allows you to orchestrate containers across multiple hosts, so you can manage containers across Microsoft Azure or Amazon AWS, for example. Of course, there are also alternatives in this area, for example Kubernetes, initiated by Google.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;Docker offers developers a way to run applications in isolation without having to use a VM for each app. Additional tools such as the Docker Hub enable the exchange of images and thus speed up the creation of your own images.&lt;/p&gt;

&lt;p&gt;I am aware that this short introduction can only give you a minimal insight into how containers work. I hope, however, that I have awakened your interest in getting more involved with this topic and that you now know what to look for. After all, the same applies here: If you want to learn the subject as a developer, you’re best served by getting your hands dirty.&lt;/p&gt;

&lt;p&gt;You can download Docker&lt;a href=&quot;https://www.docker.com/get-docker&quot;&gt;here&lt;/a&gt;, for which you need a free Docker ID (this is also valid for DockerHub). If you want to learn more about the topic, you can find several guides online, I recommend to have a look around at Medium.com, Pluralsight or YouTube.&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/docker-getting-started</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/docker-getting-started</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Introduction to VCS</title>
        <description>&lt;p&gt;When you start learning to program, you rarely think about how you will be able to work on a project at the same time with other people. By the time your side projects take on larger dimensions or you work in a team, you will be confronted with the topic of version control.&lt;/p&gt;

&lt;p&gt;Version control is basically the management of source code, so that several developers can work on the same files at the same time. The sense of a system for monitoring changes can be easily understood by an example:&lt;/p&gt;

&lt;p&gt;Two developers, Bob and John, are working together on a project. They do not use version control and their workflow is as follows:&lt;/p&gt;

&lt;p&gt;The source code is stored on a network drive to which both have access. Every morning they copy the contents of the drive to their local machines. They discuss who is working on which files on that day. Bob decides to work on the connection to the database, while John decides to revise parts of the business logic. At the end of the day, both copy their changed files to the network drive. Since both have worked on different files, this is possible without any problems.&lt;/p&gt;

&lt;p&gt;John now remembers that he also made a small change to the user interface. Knowing that Bob was only working on the database, he simply copies the file to the server. However, Bob also made some changes to this file and he also assumes that John was only updating code in the business logic. He also copies his changes and thus overwrites John’s work.&lt;/p&gt;

&lt;p&gt;When working in this way, precise communication is essential. As the example shows, this procedure is very error-prone, even though only two developers were involved. The coordination effort increases to an immeasurable extent as the number of developers increases.&lt;/p&gt;

&lt;p&gt;I don’t intend to present a multitude of version control systems, but I would like to give you at least a short overview of what has changed as time passed by. I therefore divide the different systems into three generations: Generation 0 works with file locks, Generation 1 consists of CVCS, Centralized Version Control Systems and Generation 2 are the so-called Distributed Version Control Systems (DVCS).&lt;/p&gt;

&lt;p&gt;The first software for version control of files was Source Code Control System (SCSS). The software classifies itself into generation 0 and locks files when they are processed. However, these systems have a significant disadvantage: assuming you want to work on a file that is currently being edited by someone else, you have to wait until they have finished making their changes. You could urge the respective developer to work faster, but he might be sick or on vacation. So it can take quite a while before you can access the file to make your changes. You could now create a local copy of the file and perform your changes right to the copy. As soon as the file itself can be accessed again, you perform a manual merge, i.e. you combine the two files and join the respective changes. However, this is again prone to errors and should be avoided.&lt;/p&gt;

&lt;p&gt;The second generation describes the so-called centralized version control systems. Here you will find a server that manages the source code. To work on a file, a developer must check out this file, i.e. retrieve the latest version of it from the server. I would like to illustrate this again with an example of our already known developers:&lt;/p&gt;

&lt;p&gt;At the moment John wants to make changes to the login.html file. He loads the latest version from the server and starts working. After he has made his modifications, he checks them in, so the file on the server is being updated. In the meantime, Bob has also fetched this file and made some changes. If he wants to check in his modifications again, the server will inform him that the file has been changed in meanwhile. Bob must now perform a merge, which is usually supported or even automated by the software. Once all conflicts (places affected by both changes) have been resolved, the file can be checked in.&lt;/p&gt;

&lt;p&gt;There are many different systems in this category, the best known probably being Subversion (SVN) and Microsoft’s Team Foundation Server (TFS). While these systems are still used very often, a new category was formed around the middle of the 00s: The Distributed Version Control Systems.  First and foremost the best known representative, developed by Linux creator Linus Torvalds: Git. Git’s popularity is certainly also related to the launch of GitHub 2008, but DVCS generally offer advantages over its centralized counterparts.&lt;/p&gt;

&lt;p&gt;The idea of distributed version control systems is that no server is needed to manage the source code. Instead, each copy of the repository contains a full history of all changes made to each file. So, without loading anything from a server, you can reconstruct any point in time of your software. You can also work offline and share your changes with your team members as soon as you can reconnect to them. You also have the advantage that any computer that has a copy of the repository can be used as a backup source. I assume, however, that if you use a CVCS, you also have a corresponding backup strategy, which is why I do not consider this advantage really relevant.&lt;/p&gt;

&lt;p&gt;I hope I could give you a rough overview of the different categories of version control systems. I already wrote an article about Git, if you like, you can read it directly on &lt;a href=&quot;https://blog.mjurtz.com/2017/09/getting-started-git/&quot;&gt;my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, however, I would like to point out that the use of a version control system also has advantages, even if you work alone. Availability of file histories, branching or publishing to, for example, GitHub are just a few of them. But it’s definitely worth trying if you don’t use VCS yet.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/06/introduction-to-vcs</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/06/introduction-to-vcs</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>git</category>
        
        <category>tfs</category>
        
        <category>svn</category>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>C# - Getting Started with Attributes</title>
        <description>&lt;p&gt;In todays post I want to show you how to use attributes in C#. I have to apologize in advance, though, as I’m going to focus only to a limited extent on why they make sense and what you can use them for, that’s a topic for one of the following articles. Nevertheless, I would like to give you a basic understanding so that you can incorporate this concept into your own applications.&lt;/p&gt;

&lt;p&gt;So what are attributes? Well, attributes themselves are just classes. They can’t do much themselves, but they can still be very helpful, especially on a topic called Reflection, which I will be discussing in the next days.&lt;/p&gt;

&lt;p&gt;Attributes are usually utilised to assign metadata to classes, properties and the like. Attributes inherit from the class &lt;em&gt;Attributes&lt;/em&gt;. According to the convention, their names are always appended with the extension &lt;em&gt;Attributes&lt;/em&gt;. They can be placed on various elements, one speaks of &lt;em&gt;decorating&lt;/em&gt; a class, for example. To restrict the use of a custom attribute, the attribute &lt;em&gt;AttributeUsage&lt;/em&gt; can be used.&lt;/p&gt;

&lt;p&gt;That was a whole bunch of attributes, right? Let us test this with an example, so that it will be easier to understand.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)]&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I created my own attribute, DemoAttribute. I have designed the name according to the convention. I want only properties and classes to be decorated with the attribute, which is why I piped these two options together using the AttributeUsage attribute.&lt;/p&gt;

&lt;p&gt;The attribute has a property called Description. With this I want to describe my classes and properties later. Let us also look at an example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[Demo(Description = &quot;Test for class A&quot;)]&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test for Property ClassA.Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Demo(Description = &quot;This is class B&quot;)]&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassB&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassC&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I created three classes to test my attribute: ClassA, ClassB and ClassC. I know, very incredibly creative. I decorated classes A and B with my attribute, class C I deliberately ignored. In addition, class A has a property with the attribute.&lt;/p&gt;

&lt;p&gt;Now I want to show you the real purpose of attributes, but for this I have to be a little ahead of schedule. If you are interested in the relevant topics, just search for the keyword &lt;em&gt;Reflection&lt;/em&gt; (oh, and LINQ, if you are new to this).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Assembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetExecutingAssembly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetCustomAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DemoAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Fount class: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this snippet I first obtain all classes in the current assembly that are decorated with the attribute &lt;em&gt;DemoAttribute&lt;/em&gt;. Then I iterate through the result set and simply output the names of the respective classes.&lt;/p&gt;

&lt;p&gt;You can add the following to search the found classes for properties with the same attribute.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsDefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DemoAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;Fount property: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, the concept can be extended as far as you like. For example, you can design method calls so that all elements within an assembly or across assemblies are called in this way, thus modularizing your application without creating references between projects. But more about this later. With this short introduction I have only shown the basic idea of attributes. As already mentioned, the use of attributes is a separate topic. Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Jun 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/06/csharp-attributes</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/06/csharp-attributes</guid>
        
        <category>csharp</category>
        
        <category>dotnet</category>
        
        <category>development</category>
        
        <category>programming</category>
        
        
        <category>csharp</category>
        
      </item>
    
      <item>
        <title>Simplify your CSS - LESS is more</title>
        <description>&lt;p&gt;First things first: I am not a web developer and certainly not a designer. The following examples are not intended to represent good practices in terms of design or aesthetics.&lt;/p&gt;

&lt;p&gt;But now to the topic: As a software developer you can hardly avoid acquiring basic knowledge in web development. Specifically, I mean the handling of HTML and CSS, also in JavaScript as far as I’m concerned. If you are like me, you basically have no problems with it, but CSS files will become quite confusing and difficult to revise over time. Let’s look at some problems I think CSS has, then I’ll show you how to solve them.&lt;/p&gt;

&lt;h2 id=&quot;the-problems-of-css&quot;&gt;The Problems of CSS&lt;/h2&gt;

&lt;p&gt;The thing that probably bothers me the most is the lack of variables in CSS. Whether to define color codes or font sizes: the constant duplication of corresponding entries makes me crazy, especially if something needs to be changed. Oh, and how about calculating values based on variables? For example something like: format each h2 tag with a font size like h1, only 2 units smaller? Nope.&lt;/p&gt;

&lt;p&gt;Another point is the transparency of nested statements. Long-winded listings of nestings in nestings lead to an almost endless number of CSS statements that no one will have an overview of later. Not to mention old entries that are no longer needed, but are simply overlooked.&lt;/p&gt;

&lt;h2 id=&quot;less-is-more&quot;&gt;LESS is more&lt;/h2&gt;

&lt;p&gt;Well, there are more problems than I have presented that we will solve now. However, I have only gone into what I think are really essential things that bother me about CSS.&lt;/p&gt;

&lt;p&gt;LESS is an extension to CSS, which means that all CSS code is also valid LESS code. LESS, however, offers various ways of circumventing the problems described above. But before I go into these, I would like to show you how you can use LESS at all.&lt;/p&gt;

&lt;p&gt;There are two ways to integrate LESS into your website. One possibility is the conversion from LESS to CSS and the integration of the resulting CSS file into your website (as usual). Alternatively, the LESS file can also be included directly, in combination with &lt;a href=&quot;http://lesscss.org/usage/&quot;&gt;LessJs&lt;/a&gt;, which only evaluates the stylesheets on the client side. I prefer the first option because I don’t have to rely on additional JS libraries.&lt;/p&gt;

&lt;p&gt;If you also choose this approach, there are several ways to do the processing. There are special websites that work on a copy and paste basis, but I prefer to use something like the Gulp integration for ASP.NET Core in Visual Studio. Click &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/client-side/less-sass-fa?view=aspnetcore-2.1&quot;&gt;here&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Now that the basic structure is in place, we can start with the features themselves.&lt;/p&gt;

&lt;p&gt;The first thing I mentioned was using variables that are missing in CSS. LESS offers this functionality, let’s look at an example.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#008FFF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;@defaultFontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultFontSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, variables are declared with an @ character. Variables can be used for various elements, such as colors and sizes. Also, variables can be calculated by using regular arithmetic operators (this also works for colors).&lt;/p&gt;

&lt;p&gt;My second point was the use of nested statements. LESS offers the possibility to style nested elements as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt; 
&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

  &lt;span class=&quot;err&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nl&quot;&gt;list-style-type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

    &lt;span class=&quot;err&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;nl&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I think the result of this example is quite easy to understand. The nested CSS statements apply to HTML elements nested in the same style. The statement for the a tag therefore only applies to those elements that lie within an unordered list, which in turn lies in an element of the’sidebar’ class.&lt;/p&gt;

&lt;p&gt;Those were all the features I really missed. But as promised, there are more: LESS offers possibilities for calculating color values, mixins, imports for distributed CSS files and own functions. I will conclude todays post with a brief comment on the individual elements:&lt;/p&gt;

&lt;p&gt;Another feature are the so-called mixins. These allow the usage of CSS classes within statements. Let’s look at an example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt; 
&lt;span class=&quot;nc&quot;&gt;.borderAll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;nc&quot;&gt;.sidebar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;err&quot;&gt;.borderAll&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;LESS offers predefined functions with which (color) values can be manipulated. A complete overview of available functions can be found here, but their use is identical according to the following syntax:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt; 
&lt;span class=&quot;nt&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;saturate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, I would like to show you how to use import statements. You may know the include function of PHP. It’s kind of the same thing. You can use it to include other CSS or LESS files and thus distribute your instructions. If you omit the file extension, a matching LESS file is automatically searched for.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;base.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I am aware that this short summary is by no means a complete guide to working with LESS. But I hope that I could arouse a little interest and even make your work with CSS a little easier. As in most such topics, the same applies here: Just give it a try. By applying it you will learn the fastest. A full overview of the features can be found on the &lt;a href=&quot;http://lesscss.org/&quot;&gt;official website&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Jun 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/06/less-css</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/06/less-css</guid>
        
        <category>css</category>
        
        <category>web</category>
        
        <category>development</category>
        
        <category>html</category>
        
        <category>asp.net</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Sideproject - ClubGrid</title>
        <description>&lt;p&gt;It is finally time to announce my latest side project. ClubGrid was originally designed to make it easier for my coach to manage our baseball games. However, the result can be used for clubs of any kind and I hope that I can also help others with my software.&lt;/p&gt;

&lt;p&gt;The problem we had was the organization of games and events. Some players posted their acceptance or rejection via Whatsapp, others via Facebook, some via email and others personally. This made it quite complicated for us to keep track of who is present where and when.&lt;/p&gt;

&lt;p&gt;In addition, there was the assignment of duties. Players alone are not enough, additional umpires, scorers, coaches and people who take care of the sales are needed.&lt;/p&gt;

&lt;p&gt;This finally gave me the idea to solve the problem via a portal, which can be integrated into the existing club website. Team members can register there for events and trainers can see at a glance who is participating and where they would like to help.&lt;/p&gt;

&lt;p&gt;The plan was born. I have some knowledge of PHP and therefore decided to implement the platform with this technology. I started with ER modeling. Then I derived my individual pages from this model and created wireframes for the rough design of the website. And then things were ready to start!&lt;/p&gt;

&lt;p&gt;As I said, I started to implement the website in PHP. That worked quite well, even though it seemed rather messy to me. For the time being, I accepted that and continued to work on my prototype. After some time (I had almost finished the features of the MVP), I nevertheless decided to change technology.&lt;/p&gt;

&lt;p&gt;There were several reasons for my decision. The first obvious thing was the lack of transparency in my source code. But I also didn’t want to limit myself to my basic PHP knowledge. However, since I had no real interest in delving deeper into PHP and wanted to strengthen my knowledge in other areas instead, I decided to implement the application in C#. At that time I had heard of ASP.NET, but that was all. I never used it. So I read the basics and quickly switched to a Pluralsight course to get my hands dirty with a real example.&lt;/p&gt;

&lt;p&gt;I don’t want to say much about ASP.NET (Core) here, but compared to my PHP version I’m thrilled. The code is much better structured, clearer and I was able to make much faster progress.&lt;/p&gt;

&lt;p&gt;Another possibility I took during the development was the use of postgres as the underlying database. Besides the regular functions I haven’t played much with it yet, but so far I have a very positive impression.&lt;/p&gt;

&lt;p&gt;But enough about that. Let’s look at the result:&lt;/p&gt;

&lt;p&gt;ClubGrid is my first real web application. The tech stack of the software consists of ASP.NET Core and PostgreSQL, the connection is made using Entity Framework Core. The software offers clubs the possibility to manage their events internally and thus enables trainers to see the status of the promises at a glance. Originally, I only planned to release the software for my local baseball club, but the software can quickly be extended to support other sports or other clubs in general. &lt;a href=&quot;https://clubgrid.mjurtz.com&quot;&gt;I setup a website for showcasing the application&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next days I will implement the last missing functionalities, so that we can put the first instance live. Then I’d like to make some surface improvements and add support for more sports.&lt;/p&gt;

&lt;p&gt;As soon as all this has happened, I would like to include several options for notifications. I am very curious about what will follow and look forward to any feedback or suggestions for new features!&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Jun 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/06/sideproject-clubgrid</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/06/sideproject-clubgrid</guid>
        
        <category>csharp</category>
        
        <category>web</category>
        
        <category>development</category>
        
        <category>programming</category>
        
        <category>sideproject</category>
        
        <category>asp.net</category>
        
        
        <category>csharp</category>
        
      </item>
    
      <item>
        <title>Step Outside Your Comfort Zone!</title>
        <description>&lt;p&gt;We humans tend to make ourselves comfortable. We take the easiest way we can find. But there are so many things we miss this way. In many cases it is the small things that make a big difference. Today I would like to show you how I have taken such a step and what has changed since then.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/comfort_zone_header.png&quot; alt=&quot;Step outside your comfort zone - Header&quot; /&gt;
&lt;a href=&quot;https://unsplash.com/photos/mQVWb7kUoOE&quot;&gt;Photo by Jenny Hill on Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a child I did athletics for several years. I did the standard disciplines and I really enjoyed it. But I never trained any endurance related disciplines besides the regular 3 laps to get warmed up.&lt;/p&gt;

&lt;p&gt;Some day, at a regular tournament, my coach had me signed up for the 1000 meter runs. It was hell. That day, seven year old me decided to never participate in something like this again.&lt;br /&gt;
I kept this promise for 14 years until I successfully finished my first 10K last week. By choice.&lt;/p&gt;

&lt;h2 id=&quot;from-0-to-running&quot;&gt;From 0 To Running&lt;/h2&gt;

&lt;p&gt;If you had asked me during my school days what I would have despised most about sports lessons, I would certainly have answered with “endurance runs”.&lt;/p&gt;

&lt;p&gt;Last September, I decided that I needed change. I wanted to get in general better shape and I wanted to really challenge myself. I thought that the most difficult thing I could try to stick to would be running. Simply because I wanted to prove to myself that I can do it, no matter how much I hate it.&lt;/p&gt;

&lt;p&gt;At first I tried just to run regularly. But I quickly realized that I lacked planning and motivation. On Reddit I came across the C25K (Couch to 5K) program, which seemed to be tailored to my plan. At this point, I’d like to give a big shoutout to the c25k subreddit, the community is amazing and they really support each other. Definitely check it out.&lt;/p&gt;

&lt;p&gt;The idea of the program is simple. Install an app that will help you train within 8 weeks so that you can run a 5 km run in 30 minutes without taking a break.&lt;/p&gt;

&lt;p&gt;The training is based on 3 runs per week, with the training schedule becoming more intensive every week. Training here means changing between walking and running, whereby the running intervals become longer and the walking intervals shorter as you progress.&lt;/p&gt;

&lt;p&gt;And that really works. While the programme is not easy, I think it is feasible in any case. I never thought I’d actually do this, but it works. After 8 weeks I exceeded my target and was ready for further progress.&lt;/p&gt;

&lt;p&gt;We had a pretty cold winter in southern germany and running was quite difficult. In January, I got the flu and had to stop training. It took arount one month until I got myself together and decided to continue. There’s a follow-up app C210K available and I decided to try it out. However, I didn’t really manage to stick to the program as I did with c25k.&lt;/p&gt;

&lt;p&gt;One day later, I signed up for a 10K near my hometown which will take place in early may 2018. This way, I forced myself to train for that. Surrender was no option and my goal was to do the whole thing without walking.&lt;/p&gt;

&lt;p&gt;Eventuall, may came around and I was a bit behind when looking at my goal. I managed to run 8 KM and figured, I could do 10 at the run.&lt;/p&gt;

&lt;p&gt;While the first few kilometres where quite heavy, I really got into it and made the full distance without stopping. Also, I did it in less than an hour.&lt;/p&gt;

&lt;h2 id=&quot;call-to-action&quot;&gt;Call to Action&lt;/h2&gt;

&lt;p&gt;Training alone and going through the program alone is not easy. If you have the possibility to do the whole thing with a partner and you can push each other, this will definitely help you. But even on your own, with a little self-discipline the whole thing is quite feasible.&lt;/p&gt;

&lt;p&gt;But I don’t want to limit this example to my experience, I would say that it can be applied to many different areas of life. Think about why you loathe something. And then try to see the whole thing from a different angle and fight against the laziness. And I’m sure the odds are good that you’ll actually enjoy it. After all, we are growing on challenges, not on dull activities.&lt;/p&gt;
</description>
        <pubDate>Thu, 31 May 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/05/step-outside-your-comfort-zone</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/05/step-outside-your-comfort-zone</guid>
        
        <category>motivation</category>
        
        <category>discipline</category>
        
        <category>self</category>
        
        <category>fitness</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>C# - Mastering the Basics - The Repository Pattern</title>
        <description>&lt;p&gt;There’s a very large number of articles about the repository pattern out there.
Nevertheless, most of them overlap in the description and cause confusion among developers.
For this reason I decided to write my own article to document my opinion.&lt;/p&gt;

&lt;p&gt;In this article I will first clarify the what and why of the repository pattern.
Afterwards I will explain how the pattern can look like in C#.&lt;/p&gt;

&lt;p&gt;In his book, Patterns of Enterprise Application Architecture, Martin Fowler describes the Repository Pattern as a “Mediate between the domain and data mapping layers, acting like an in-memory collection of domain objects”.&lt;/p&gt;

&lt;p&gt;The following benefits of utilizing this pattern are usually listed when reading articles on the topic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minimize query logic&lt;/li&gt;
  &lt;li&gt;Decoupling from persistence frameworks&lt;/li&gt;
  &lt;li&gt;Easier testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The idea of reducing query logic refers to the reusability of code. Imagine you work directly on a collection. If you need a certain subset of the stored objects, you will query them via LINQ. But chances are, you won’t need this query logic in just one place. However, since the entire collection is available everywhere, you will implement this logic in each place, resulting in duplicated code. The alternative is to move this logic to the repository. All code elements involved then retrieve the subset from this.&lt;/p&gt;

&lt;p&gt;The decoupling from persistence frameworks follows the same principle. The connection to data storage only takes place in the repository. The business logic only accesses the repository, the implementation details are irrelevant at this point. This means that the repository can be exchanged at any time, for example with another ORM or even to a new storage strategy.&lt;/p&gt;

&lt;p&gt;The idea behind the simplification of testability is to make repositories easily exchangeable by using an interface and thus to be able to easily implement a mock repository. But this is not a peculiarity of the repository pattern, so I don’t really see this point as an advantage of the pattern.&lt;/p&gt;

&lt;h2 id=&quot;in-a-nutshell&quot;&gt;In a Nutshell&lt;/h2&gt;

&lt;p&gt;As mentioned above, the basic idea of the repository pattern is to design an intermediate layer so that the business logic can operate as if on an in-memory collection. In a very simple way, this interface can look like this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add(obj)&lt;/li&gt;
  &lt;li&gt;Remove(obj)&lt;/li&gt;
  &lt;li&gt;Get(id)&lt;/li&gt;
  &lt;li&gt;GetAll()&lt;/li&gt;
  &lt;li&gt;Find(predicate)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, there is no item for saving changes. And that’s exactly where the in-memory collection comes into play. Since the collections only contain object references, the entries can be edited directly.&lt;/p&gt;

&lt;p&gt;Nevertheless, database entries must somehow be persisted. This is where the Unit-of-Work Pattern comes in. Again, from Martin Fowler: A unit of work maintains a list of objects affected by a business transaction and coordinates the writing out of changes.&lt;/p&gt;

&lt;p&gt;So this means that we will combine one or more repositories with a single unit of work which will persist changes to the database. An interface for a basic unit of work could have the following methods and properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IMyRepository MyRepository { get; }&lt;/li&gt;
  &lt;li&gt;SaveChanges();&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, in a real application, there would be some more repositories.&lt;/p&gt;

&lt;p&gt;If you look at the whole thing now, you might get the idea that Entity Framework already implements these mechanisms. More precisely, a DbSet looks like a repository and a DbContext like a unit of work. Let’s take a closer look:&lt;/p&gt;

&lt;p&gt;At a surface level, a DbSet looks like a repository. It provides access to a collection and allows you to edit, add and remove entries. Using the DbContext you can persist changes afterwards. However, this approach is problematic in view of the previously defined advantages of the repository pattern: One point was the reduction of duplicated source code by outsourcing functionalities with regard to special subsets. With this approach here the pure collection is published and worked with. The result is exactly what we want to avoid, namely the direct selection and projection of items from the collection.&lt;/p&gt;

&lt;p&gt;The use of DbContext is also not suitable here. Another positive argument of the repository pattern was the decoupling of persistence frameworks. This contradicts the approach, since the business logic would be tied to Entity Framework.&lt;/p&gt;

&lt;p&gt;So while DbSet and DbContext look like implementations of the repository and unit of work pattern, they don’t provide the architectural benefits, which is why you still have to provide your own implementation for this.&lt;/p&gt;
</description>
        <pubDate>Sun, 13 May 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/05/c-mastering-the-basics-repository-pattern</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/05/c-mastering-the-basics-repository-pattern</guid>
        
        <category>dotnet</category>
        
        <category>csharp</category>
        
        <category>development</category>
        
        <category>programming</category>
        
        
        <category>csharp</category>
        
      </item>
    
      <item>
        <title>Learning to Learn</title>
        <description>&lt;p&gt;How often did you tell yourself that you want to learn a specific skill and you either stopped while learning it or learned it but never managed to apply it in your workflow?&lt;/p&gt;

&lt;p&gt;I bet you encountered both situations more than once. In this article, I’ll cover my method on how I learn new skills efficiently and actually remember the stuff I read.&lt;/p&gt;

&lt;p&gt;In this post, I’d like to share my thoughts and experiences in learning new skilly. While my examples are mostly centered around programming and software development, I’m sure that you can apply the most of the principles in other topics as well.&lt;/p&gt;

&lt;h2 id=&quot;learning-bydoing&quot;&gt;Learning By Doing&lt;/h2&gt;

&lt;p&gt;You’ve never heard of that idea, have you? Of course you did. Like probably everyone else. Nevertheless, I find it difficult to derive a practical approach.&lt;/p&gt;

&lt;p&gt;One thing that helps me personally very well here is learning under the pressure to immediately apply what I have learned. As a result, I only learn what is absolutely necessary. This usually sticks very well through immediate application.&lt;/p&gt;

&lt;p&gt;Imagine learning to skydive right before jumping out of an airplane. I bet you’ve never been learning as efficient as in that particular situation.&lt;/p&gt;

&lt;p&gt;While this is a very efficient approach, it is certainly not what we would like to see in everyday life. Firstly due to the stress involved, but also due to the lack of an overall view.&lt;/p&gt;

&lt;p&gt;A great way to create a similar environment is to set goals for what you’re learning which requires to apply the newly learned skills. For example, let’s say you’d like to get a grasp on relational databases. Of course, you can dig through books or online courses, but I recommend to try and think of an idea where you can both implement the learned expertise.&lt;/p&gt;

&lt;p&gt;To stick to the database example: this could be a simple app to document your cd collection.
By directly applying new skills, you’ll gain a deeper understanding of the topic and a good feeling of what’s important and what may not right away.&lt;/p&gt;

&lt;h2 id=&quot;my-learningroutine&quot;&gt;My Learning Routine&lt;/h2&gt;

&lt;p&gt;While the whole &lt;em&gt;learning by doing&lt;/em&gt; approach makes a lot of sense, you’ll probably miss some important or interesting facts. To prevent overly complicated solutions, I created my own learning routine. The main thought of it is not to learn anything, but to learn how to look something up when it’s needed.&lt;/p&gt;

&lt;p&gt;When you’re reading non-fiction, let’s say a book about a new programming language, you probably won’t try out every part of the printed syntax. However, chances are that you might stumble across a situation while coding when you think “hey, I think I read about something that could really help me here”. And at this point, you’ll be able to look it up again and implement the code as you like. You don’t have to learn any detail of whatever you’re learning. 
Most of the time you will find a Pareto distribution of the relevance of what you have learned and the effort involved. Assuming you learn one thing 100%, then you will have learned 80% of the knowledge with 20% of the effort. Details are often nice to have, but mostly not absolutely necessary. Use this to set your focus accordingly.&lt;/p&gt;

&lt;p&gt;I use the following steps for learning a new topic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gather information. These can also be thicker books, but be sure to use a few different sources.&lt;/li&gt;
  &lt;li&gt;Go through the tables of contents of your sources and match them&lt;/li&gt;
  &lt;li&gt;Use your summarized tables of contents to define an overview of exactly what you want to learn.&lt;/li&gt;
  &lt;li&gt;If possible, think of an overall goal that you can use to track and monitor your learning progress. If necessary, you can also create a separate goal for each sub-topic.&lt;/li&gt;
  &lt;li&gt;Be consistent during learning. Try to learn a little something every day, instead of fewer larger blocks. Only half an hour a day is enough for this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s all I’m using. How you divide up your time is of course left to you. However, the example of 30 minutes per day should make it clear that even short times can bring great progress, after all, this brings you to 30 hours per month.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 May 2018 20:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/05/learning-to-learn</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/05/learning-to-learn</guid>
        
        <category>efficiency</category>
        
        <category>productivity</category>
        
        <category>self</category>
        
        
        <category>productivity</category>
        
      </item>
    
  </channel>
</rss>
