<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>methodology on Marcel Jurtz</title>
    <link>https://www.mjurtz.com/tags/methodology/</link>
    <description>Recent content in methodology on Marcel Jurtz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Dec 2018 06:00:00 +0000</lastBuildDate><atom:link href="https://www.mjurtz.com/tags/methodology/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Writing Clean Code</title>
      <link>https://www.mjurtz.com/posts/2018-12-16-writing-clean-code/</link>
      <pubDate>Sun, 16 Dec 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-12-16-writing-clean-code/</guid>
      <description>There are lots of articles and even books about the art of writing clean code. But when exactly is code actually to be considered clean? Today I&amp;rsquo;d like to give you a brief overview of how you can assess and improve your code quality. I should perhaps note that writing good code, and therefore this article, is independent of the programming language used and is rather methodical in nature. However, for more detailed information, I recommend that you really get a book on the subject.</description>
    </item>
    
    <item>
      <title>Maximize your Productivity</title>
      <link>https://www.mjurtz.com/posts/2018-10-28-maximize-your-productivity/</link>
      <pubDate>Sun, 28 Oct 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-10-28-maximize-your-productivity/</guid>
      <description>When you&amp;rsquo;re at the beginning of your career as a software developer, like me, you probably know the feeling that you&amp;rsquo;re being overwhelmed by everything you want to learn. Especially at the beginning it is often not easy to work productively and to learn why I want to show you which methodologies I have developed for myself. Even though I use my own experience, my approach is of course not limited to the industry.</description>
    </item>
    
    <item>
      <title>Automated Testing</title>
      <link>https://www.mjurtz.com/posts/2018-08-05-automated-testing/</link>
      <pubDate>Sun, 05 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-08-05-automated-testing/</guid>
      <description>Todays focus is on how you can test your applications automatically to detect bugs early and improve your code quality.
I want to introduce you to the concept of automated testing. In order to make the content accessible to as many users as possible, I will not use code examples and concentrate purely on the underlying idea instead. Once you understand them, you will have no problems implementing the concept in the programming language of your choice.</description>
    </item>
    
    <item>
      <title>How I Learn Anything Quickly</title>
      <link>https://www.mjurtz.com/posts/2018-07-29-learn-anything-quickly/</link>
      <pubDate>Sun, 29 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-29-learn-anything-quickly/</guid>
      <description>As a software developer, you are probably well aware of the feeling: You are overwhelmed by the amount of interesting stuff you want to test and learn. But I&amp;rsquo;m sure that this problem is also very common in other fields.
If you feel like me, you may read and watch various books, blog articles or online courses, but you won&amp;rsquo;t really keep much of their contents.
In today&amp;rsquo;s article, I&amp;rsquo;d like to help you to learn more effectively about the topics that really interest you, wasting less time.</description>
    </item>
    
    <item>
      <title>Agile - Get Started with Kanban</title>
      <link>https://www.mjurtz.com/posts/2018-07-21-agile-get-started-with-kanban/</link>
      <pubDate>Sat, 21 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-21-agile-get-started-with-kanban/</guid>
      <description>After I introduced Scrum in my last article, today will be about Kanban. Like Scrum, Kanban is an agile software development methodology and I have to say that I apply the principles I present today to most of my personal side projects.
Kanban is Japanese and can be translated as &amp;ldquo;billboard&amp;rdquo;. Kanban was first introduced by Toyota in the automotive industry and is now mostly associated with just-in-time concepts. But I don&amp;rsquo;t want to bore you with historical details, I want to show you the usage in software development.</description>
    </item>
    
    <item>
      <title>Agile - Get Started with Scrum</title>
      <link>https://www.mjurtz.com/posts/2018-07-15-agile-get-started-with-scrum/</link>
      <pubDate>Sun, 15 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-15-agile-get-started-with-scrum/</guid>
      <description>As a software developer you are certainly aware of Scrum. You may have already used Scrum or heard about it only marginally. With this article I would like to give you an overview of what Scrum is and how you can apply this methodology. Plus: You can also use many of the principles even for working on your side projects alone or in a small group.
Scrum is probably the best known process model of agile software development.</description>
    </item>
    
  </channel>
</rss>
