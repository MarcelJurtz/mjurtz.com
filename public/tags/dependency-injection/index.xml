<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dependency injection on Marcel Jurtz</title>
    <link>https://www.mjurtz.com/tags/dependency-injection/</link>
    <description>Recent content in dependency injection on Marcel Jurtz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 10 Nov 2020 06:00:00 +0000</lastBuildDate><atom:link href="https://www.mjurtz.com/tags/dependency-injection/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Resolve Open Generics with ASP.NET Cores DI-Container</title>
      <link>https://www.mjurtz.com/posts/2020-11-10-resolve-open-generics-with-asp-net-core-di-container/</link>
      <pubDate>Tue, 10 Nov 2020 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2020-11-10-resolve-open-generics-with-asp-net-core-di-container/</guid>
      <description>ASP .NET Core already has quite a decent di-container built in. However, there are some quirks you might need to be aware of. In one of my applications, I&amp;rsquo;ve been using a factory pattern to register my views by using open generics. To be more clear about that: I have an Interface IView&amp;lt;TView&amp;gt;, and I want to register all of this interfaces implementations.
As I found out, Microsofts DI-Container currently doesn&amp;rsquo;t support that by default (text me if I&amp;rsquo;m wrong!</description>
    </item>
    
  </channel>
</rss>
