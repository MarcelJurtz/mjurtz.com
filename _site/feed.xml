<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcel Jurtz</title>
    <description>A software developers blog.
</description>
    <link>http://blog.mjurtz.com/</link>
    <atom:link href="http://blog.mjurtz.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 19 Aug 2018 15:06:50 +0200</pubDate>
    <lastBuildDate>Sun, 19 Aug 2018 15:06:50 +0200</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Dockerizing .NET Core Apps</title>
        <description>&lt;p&gt;I have already written two articles about the basics of Docker. 
While these should provide a general overview of you technology, I would like to illustrate a concrete application example today. 
I will show you the whole process, from writing a simple application to using it in the form of a Docker Container.&lt;/p&gt;

&lt;p&gt;If you haven’t read my previous articles, you may not have the idea why you should use Docker at all. 
For a full explanation, I refer to my other articles which you can check out 
&lt;a href=&quot;/2018/07/docker-getting-started&quot;&gt;here&lt;/a&gt; and 
&lt;a href=&quot;/2018/07/docker-installation-and-first-steps&quot;&gt;here&lt;/a&gt;. 
However, I would still like to comment briefly on the idea. Imagine you are writing a.NET application. 
To use your application you now need a special version of the.NET framework, 
as well as possibly a suitable database and other dependencies.&lt;/p&gt;

&lt;p&gt;For larger applications it may well be that just installing and setting up the environment is not a trivial task. 
Over the years, this concept has become simpler, partly through the use of VMs and installation. 
Nevertheless, according to this approach, an application requires a complete VM, which is not really resource-saving.&lt;/p&gt;

&lt;p&gt;Docker allows you to map all dependencies in the form of a docker image. 
This image can later be instantiated as a container, which forms a self-contained, isolated unit. 
You can imagine a container like a VM, but the Docker container does not have its own operating system. 
Starting and stopping a container does not require a complete startup and shutdown of an operating system, 
which significantly reduces the loading times.&lt;/p&gt;

&lt;p&gt;So far so good. Please install Docker first, if you haven’t already done so. You will find instructions on how to do this 
&lt;a href=&quot;/2018/07/docker-installation-and-first-steps&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have now successfully installed Docker and are ready to go. Before we write our own images, 
I would like to go into the general usage. Docker is available from the command line. 
So on Windows you can use the CMD, Powershell or a counterpart of a third party.&lt;/p&gt;

&lt;p&gt;Docker commands are initiated with the keyword docker. If only this is entered without a subsequent command, 
a list of available commands is displayed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docker version&lt;/em&gt; gives you information about the installed version of Docker. 
You see two entries here,a server and a client version. The server version will mention a Linux-OS. 
During installation you could choose between Linux and Windows containers. 
The Linux containers are selected by default, in this case the containers use the Linux kernel of the host operating system. 
If you are using Windows, Docker will create a minimal Linux VM to serve as host. 
You can see this when you open the HyperV Manager, there you will see an entry with the name MobyLinuxVM.&lt;/p&gt;

&lt;p&gt;You can also change your choice of container technology later by selecting the Docker icon in the system tray. 
The context menu that appears contains an entry for switching from Linux to Windows (and vice versa). 
However, Linux containers are the usual variant and I recommend that you use them, unless you have a special reason for changing.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;docker info&lt;/em&gt; command lists information about the installed images and instantiated containers. 
This list is currently empty because Docker has just been installed. 
The &lt;em&gt;docker run hello-world&lt;/em&gt; command starts the image named hello-world. The procedure here is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Docker Client first contacts the Docker Engine (also called Docker Daemon), which determines that the image is not locally available.&lt;/li&gt;
  &lt;li&gt;It then searches the Docker Hub (a platform for exchanging Docker images) and downloads the appropriate image.&lt;/li&gt;
  &lt;li&gt;The engine then creates a container containing an application that outputs “Hello World”.&lt;/li&gt;
  &lt;li&gt;This output is sent to the Docker Client, which outputs the text in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downloaded images are kept locally. If you run it again, no new download takes place, the local image is reinstantiated. 
Images can also be downloaded without being executed immediately. Use the command &lt;em&gt;docker pull imagename&lt;/em&gt; to do so.&lt;/p&gt;

&lt;p&gt;With the command &lt;em&gt;docker ps&lt;/em&gt; you can view the running containers. 
Here, however, you must note that some containers are started, fulfill a task and are then ended again. 
Other containers run passively in the background and are not terminated automatically. 
Examples are web servers or database management systems.
To also display paused and stopped containers, use the flag -a. 
You can in general interact directly with specific containers. 
The basis for this is always the container ID, an alphanumeric character string with which the container can be uniquely identified. 
However, you do not have to enter the entire ID, the first digits are sufficient until no more mix-ups are possible.&lt;/p&gt;

&lt;p&gt;Images are usually tagged. Tags are used to specify a version of an image. 
If no tag is specified, the latest version is used by default. 
However, this is not recommended, as it can lead to problems with later releases. 
So always try to use a specify a version of images you use. 
To do that, simply add a colon, followed by the version after the name of the image.&lt;/p&gt;

&lt;p&gt;I think that’s enough for now with the basics. Now we will develop our own application with Docker support. 
I am using Visual Studio Code, so the approach will work on all major operating systems.&lt;/p&gt;

&lt;p&gt;With the command &lt;em&gt;dotnet new console&lt;/em&gt; I instantiate a new console application. 
The template creates a Hello-World application, which can be started with the command &lt;em&gt;dotnet run&lt;/em&gt;. 
Next, we’ll take care of linking to Docker.&lt;/p&gt;

&lt;p&gt;First, a dockerfile must be created. Dockerfiles describe the structure of an image and are usually based on other images. 
My application is based on the &lt;em&gt;microsoft/dotnet:2.1-sdk&lt;/em&gt; image. 
The dockerfile is created without a file extension with the name dockerfile on csproj file level and it contains the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-generic&quot; data-lang=&quot;generic&quot;&gt;FROM microsoft/dotnet:2.1-sdk

WORKDIR /app
COPY /bin/debug/netcoreapp2.1/ .

ENTRYPOINT [&quot;dotnet&quot;,&quot;NET_CORE_Docker.dll&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NET_CORE_Docker is the name of the project. Now an image must be built based on the docker file. 
This can be done with the command &lt;em&gt;docker built -t net_core_docker .&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The dot at the end defines the current directory as the starting point. 
Net_core_docker is the name of the image, only lowercase letters are allowed.&lt;/p&gt;

&lt;p&gt;The image can now be instantiated with &lt;em&gt;docker run net_core_docker&lt;/em&gt; and the container will be started automatically. 
As expected, the output is &lt;em&gt;Hello World!&lt;/em&gt; Our first project is running!&lt;/p&gt;

&lt;p&gt;Of course you can also work with Visual Studio instead of VS Code. 
Docker support is already implemented here and you can add it to your project by simply right-clicking on the project 
and selecting &lt;em&gt;Add Docker Support&lt;/em&gt;. The docker file is then created automatically.&lt;/p&gt;

&lt;p&gt;Our first.NET core application now runs with Docker. 
Of course, this is not limited to console applications, 
you can also create an ASP.NET core application with Docker support, for example. However, 
this article has shown you how to integrate Docker into the development of.NET Core. 
In addition to deployment, Docker is ideal for test and development environments because you can set up other databases 
or the like without complex installations and compatibility problems with software already installed. 
Containers can be installed in parallel without any problems and thus have access to different options.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Aug 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/08/dockerizing-net-core</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/08/dockerizing-net-core</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Automated Testing</title>
        <description>&lt;p&gt;Todays focus is on how you can test your applications automatically to detect bugs early and improve your code quality.&lt;/p&gt;

&lt;p&gt;I want to introduce you to the concept of automated testing. 
In order to make the content accessible to as many users as possible, 
I will not use code examples and concentrate purely on the underlying idea instead. 
Once you understand them, you will have no problems implementing the concept in the programming language of your choice.&lt;/p&gt;

&lt;p&gt;First of all: What is automated testing and what advantages does it offer?&lt;/p&gt;

&lt;p&gt;Automated testing describes writing code that tests your actual code. 
Your source code consists of the production code and test code.&lt;/p&gt;

&lt;p&gt;Think of how you may test the functionality of your software. 
You start the application and log in with your user account if necessary. 
You navigate to the feature you are working on and perform your tests. 
You repeat that for different possibilities.&lt;/p&gt;

&lt;p&gt;You can see from the short description that the whole process is quite time-consuming. 
Each change requires a new run through the procedure and new functions increase the time exponentially. 
And this is exactly where automation comes into play.&lt;/p&gt;

&lt;p&gt;Automated tests can be performed at the push of a button and repeated as often as required. 
In addition, they run much faster than manual tests. 
The repeatability means that no more time is required to test existing functionality when adding new features. 
Basically, bugs are better found because no test scenarios are forgotten, 
this procedure strengthens confidence in deployment and allows calmer weekends when a release is to be rolled out on Fridays.&lt;/p&gt;

&lt;p&gt;The repeatability of such tests brings another advantage that only becomes apparent at second glance: refactoring, 
i.e. changing code without influencing its functionality, 
is also easier to do. Possible effects of changes on other components of the application can thus be identified directly.&lt;/p&gt;

&lt;p&gt;Finally, you automatically think more about the quality of your code as you write it, 
for example, to handle invalid input.&lt;/p&gt;

&lt;p&gt;In general, tests are divided into three different categories:&lt;/p&gt;

&lt;p&gt;Unit tests test individual entities without external dependencies. 
For example, a single function is tested, but things like database connections etc. are not considered. 
It is only necessary to validate the correctness of the implementation. 
Unit tests are cheap to write and quick to test, but do not provide complete confidence by ignoring dependencies.&lt;/p&gt;

&lt;p&gt;Integration tests test an application under consideration of dependencies. 
These tests are often slower because, external resources may have to be accessed, 
but these tests also provide more confidence in the application.&lt;/p&gt;

&lt;p&gt;The last category is end-to-end testing. These describe the direct execution of an application via its graphical interface. 
By imitating human behavior, the tests are correspondingly slow and can already be broken by minor changes in the source code.&lt;/p&gt;

&lt;p&gt;So much for that. But what exactly is to be tested now? To put it briefly - everything. 
But you should be aware of the so-called test pyramid. From bottom to top you should focus on unit tests, 
then integration tests and finally end-to-end tests. 
The latter, for example, does not make sense for examining borderline cases, but only for core elements of the application. 
Unit tests, on the other hand, are ideal for testing conditions and functional results. 
At this point, however, there are often applications that contain little actual logic and, 
for example, only serve as an intermediate layer between UI and database. 
In this case, integration tests are preferred.&lt;/p&gt;

&lt;p&gt;The basic rule is: deal with gaps in your unit tests with integration tests and use end-to-end tests sparingly. 
However, the exact balance of the three categories always depends on the project.&lt;/p&gt;

&lt;p&gt;The approach of implementing automated tests in software projects is usually similar. 
First you are looking for a testing framework for the programming language of your choice. 
For my part I mostly use C#, well-known representatives are MSTest, NUnit or XUnit. 
But you better focus on the basics, not on a special tool.&lt;/p&gt;

&lt;p&gt;Tests are usually written in their own functions, which are executed and evaluated by a Test Runner integrated in the test framework. 
The functions are usually based on the Triple-A pattern (Arrange-Act-Assert) and are named according to a constant scheme. 
This schema usually contains the method name of the function to be tested as well as input parameters or expected result values.&lt;/p&gt;

&lt;p&gt;Detailed information on the design of tests can be found on the Internet in sufficient detail for the language relevant to you.&lt;/p&gt;

&lt;p&gt;I would like to conclude, however, by referring to a concept based fundamentally on the use of automated tests: Test Drive Development (TDD).&lt;/p&gt;

&lt;p&gt;TDD describes a programming concept according to which tests are written before the actual code. 
The idea is to write a test that tests imaginary source code. Since this is not yet available, 
the test will fail (or not compile at all, depending on the language). 
Then the minimum code is written with which the test runs successfully. 
If required, refactoring takes place afterwards. 
The advantage of this concept is testable source code right from the start, 
as well as full code coverage (proportion of code covered by tests). 
Due to the concept of minimalism, TDD often results in a simpler implementation.&lt;/p&gt;

&lt;p&gt;You now have a general overview of the idea behind automated tests in software development 
and I hope I have given you enough motivation to try out the concept. 
And if you’re working on the details, the keyword ‘mock’ might also help. 
Mocks are representatives of components of an application that, for example, 
simulate a database connection and thus facilitate integration tests. Happy testing!&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Aug 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/08/automated-testing</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/08/automated-testing</guid>
        
        <category>development</category>
        
        <category>methodology</category>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>How I Learn Anything Quickly</title>
        <description>&lt;p&gt;As a software developer, you are probably well aware of the feeling: 
You are overwhelmed by the amount of interesting stuff you want to test and learn. 
But I’m sure that this problem is also very common in other fields.&lt;/p&gt;

&lt;p&gt;If you feel like me, you may read and watch various books, blog articles or online courses, 
but you won’t really keep much of their contents.&lt;/p&gt;

&lt;p&gt;In today’s article, I’d like to help you to learn more effectively about the topics that really interest you, wasting less time.&lt;/p&gt;

&lt;p&gt;I apologize in advance for all my personal examples coming from my projects as a software developer, 
but I’m sure you can draw parallels and transfer my experience to your own even without the appropriate knowledge.&lt;/p&gt;

&lt;p&gt;Before we dive in, I would like to introduce you to a tool that has often helped me when I was looking for an initial idea of a topic: 
learn-anything.xyz is a website that lists sources based on a keyword that offers you learning materials. 
There are many different topics and it can’t hurt to drop by here.&lt;/p&gt;

&lt;p&gt;Before I restructured my learning flow, I used to google for “How to learn XY” and work through the first tutorial I could find. 
You can certainly imagine that this is not really effective. Often the contents are outdated, incomplete or just incorrect. 
Another problem I often had is watching video tutorials without trying out the acquired skills directly. 
Based on the idea “That looks easy” I watched the whole video and didn’t even get a simple “Hello World” application to run afterwards.&lt;/p&gt;

&lt;p&gt;I have fundamentally revised my process of learning new things. My new concept can be described in a single sentence:&lt;/p&gt;

&lt;p&gt;Don’t learn without a reason&lt;/p&gt;

&lt;p&gt;Don’t learn anything just because it’s hip or because everyone else seems to use it. 
Learn something because you are enthusiastic about it and, more importantly, because you have a real application for it. 
Vice versa, of course, if you have an idea for something, you can also use this opportunity to learn something new, 
i.e. to implement it with a different technology or something similar.&lt;/p&gt;

&lt;p&gt;For example, I had the idea to write a simple app to manage lists. The application should only be able to manage shopping lists, 
for example, as efficiently and uncomplicatedly as possible. 
The apps I found on this topic were simply too bulky and cumbersome for my application, which is why I decided to write my own.&lt;/p&gt;

&lt;p&gt;I took the opportunity to improve my knowledge in Android development. 
I’ve hardly ever worked with the integrated SQLite database on Android, 
and I’ve decided to try an OR mapper that I’ve only read a little about so far 
(For everyone who’s interested: Room for Android, 
I’ve got a post on the topic &lt;a href=&quot;https://blog.mjurtz.com/2018/02/introduction-to-room-for-android/&quot;&gt;here&lt;/a&gt;. 
For those who don’t know: an OR mapper is used to transfer data records between an application and a database).&lt;/p&gt;

&lt;p&gt;You can see the result &lt;a href=&quot;https://blog.mjurtz.com/2018/03/sideproject-sist/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So come up with an idea you need to learn what you’re interested in. 
Then learn exactly what you need to get ahead with the implementation. 
This gives you the best opportunity to apply what you have learned and to check immediately whether you have really understood it. 
At the same time, you have a concrete goal in mind as you learn so that you are able to improve measureming your progress.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;My concept of learning things quickly and effectively can be summed up in one sentence: Don’t study without a reason.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set yourself a specific goal to work towards&lt;/li&gt;
  &lt;li&gt;Break down your goal into small work units&lt;/li&gt;
  &lt;li&gt;Start with the seemingly simple things&lt;/li&gt;
  &lt;li&gt;Learn something when you need it and can put it into practice right away&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you can’t think of anything to take as your goal, you can also simply just recreate existing things.&lt;/p&gt;

&lt;p&gt;Finally, you don’t have to learn every facet of something. 
The important thing - which you will also learn through this concept - is the ability to ask the right questions. 
In most cases you will be able to find details within a very short time that you don’t have in mind.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/learn-anything-quickly</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/learn-anything-quickly</guid>
        
        <category>learn</category>
        
        <category>self</category>
        
        <category>methodology</category>
        
        <category>programming</category>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>Dependency Injection - Overview and Implementation</title>
        <description>&lt;p&gt;Especially when you are at the beginning of your career as a software developer, you probably know that: 
You have already picked up the term “Dependency Injection”, but can’t do anything with it directly? 
Then today’s post is for you!&lt;/p&gt;

&lt;p&gt;I will introduce you to the principle, functionality and the types of dependency injection. 
Finally, I’ll show you how to write a simple IoC container. And don’t worry if you are unfamiliar with the different terms, 
I will explain everything, you don’t need any previous knowledge. 
However, certain basic knowledge in software development is definitely an advantage today. 
My code examples are written in C#, but you will have no problems understanding them if you are used to another programming language.&lt;/p&gt;

&lt;h2 id=&quot;what-is-dependency-injection&quot;&gt;What is Dependency Injection?&lt;/h2&gt;

&lt;p&gt;Dependency Injection (DI) is a term from the topic area “Inversion of Control” (IoC). 
IoC is a fundamental concept, DI is its implementation. An IoC container is a framework for dependency injection.&lt;/p&gt;

&lt;p&gt;DI is the last point of Robert Martin’s SOLID principle. 
Martin defines that high-level modules should not depend on low-level modules, instead an abstraction level should be used. 
The easiest way to get a grasp on the concept is to look at an example: 
Let’s think of a program which processes input from the keyboard and sends it to a printer. 
This can be implemented by combining a class “printer” and “keyboard”. So far, so good. 
However, this approach becomes problematic if the code should be extended, for example to support other input or output devices.&lt;/p&gt;

&lt;p&gt;Martin’s solution is to use abstraction layers that could be implemented as follows: 
Instead of the communication between the concrete classes “printer” and “keyboard”, 
the abstractions “reader” and “writer” are used. These can be base classes, from which the concrete classes then inherit. 
The program flow only requires access to the base class, the implementation details are irrelevant. 
Changes and extensions are now possible without any problems.&lt;/p&gt;

&lt;h2 id=&quot;and-what-is-inversion-of-control&quot;&gt;And what is Inversion of Control?&lt;/h2&gt;

&lt;p&gt;IoC is the underlying concept behind DI. As the name suggests, there is a inversion of control flow in the program. 
Different use cases are imaginable, for example inversion of control over the flow of the application, 
but also inversion of control over instantiation and binding of dependencies.&lt;/p&gt;

&lt;p&gt;The first of these cases can be thought of as a comparison between a typical console application and a GUI application. 
The console application determines the process flow and waits for user interaction, 
while the user determines the process flow for the GUI application.&lt;/p&gt;

&lt;p&gt;The second case aims to create required elements before they are required. In concrete terms, 
this means that objects are not created in the class in which they are needed, but before. 
They are then bound using constructor parameters or property setters, for example.&lt;/p&gt;

&lt;p&gt;Other techniques that follow this approach include the factory pattern or the service locator pattern.&lt;/p&gt;

&lt;h2 id=&quot;di-in-action&quot;&gt;DI in Action&lt;/h2&gt;

&lt;p&gt;Enough theory. The best way to understand the concept is to use examples. 
There are three types of dependency injection that I want you to understand:&lt;/p&gt;

&lt;p&gt;Constructor Injection is probably the most commonly used type. 
A class is created and passed to the dependent class using constructor parameters 
instead of being instantiated in the dependent class itself.&lt;/p&gt;

&lt;p&gt;The following example illustrates this with the class User, 
which accepts a constructor parameter of type IContactOption. 
The instance of an implementation of the interface is not created in the class itself, 
but is specified externally. The interface only has a SendMessage method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second category is the Setter Injection. No constructor parameter is used, but a property, which is set from the outside.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrimaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrimaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last category is a little bit more complicated, you will find this form in the real world much rarer than the other two. 
Interface injection is based on the dependent class implementing an interface for setting a variable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IDependOnContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDependOnContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, that’s actually it. The implementation of the concept is far less complicated than the theory. 
However, we still lack the concrete application in our project, which will be discussed next. 
But first, I would like to issue a warning:&lt;/p&gt;

&lt;p&gt;DI has a lot of advantages, but you should be careful with its use. 
DI leaks implementation details of your classes and thus contradicts the principle of encapsulation. 
In addition, the corresponding objects are always created before they are even needed. 
Here you should keep an eye on the performance of your application and decide when you really need the approach. 
DI also partially obscures problems in the structure of your classes. 
Testing your applications will be much easier because you can easily pass mocks, 
but you may overlook indications that a class should be divided into two or more components.&lt;/p&gt;

&lt;h2 id=&quot;structure-of-an-ioc-container&quot;&gt;Structure of an IoC Container&lt;/h2&gt;

&lt;p&gt;An IoC container is a framework for implementing dependency injection. 
The basic feature here is the automatic resolution of dependencies via an overall class, the so-called resolver. 
Let’s look at the following implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resolver&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResolveContactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This very simple example returns an EMailContact object for the IContactOption request. 
In practice, of course, you will have several options here, but there is already a problem with this implementation: 
it cannot be extended. Each interface I want to support requires its own method. 
I would prefer an implementation that allows something like: IContactOption contactOption = resolver.Resolve&lt;IContactOption&gt;();&lt;/IContactOption&gt;&lt;/p&gt;

&lt;p&gt;And that is exactly what we want to implement now. 
This can be achieved by creating a Dictionary&amp;lt;Type, Type&amp;gt; to link the interfaces with the appropriate values. 
The entries must be accessible from the outside. 
Then, when requesting an implementation by calling resolve with its interface as argument, 
I will receive an instance of the concrete class.&lt;/p&gt;

&lt;p&gt;To be able to test this more easily, I have adapted my previous classes as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EMailContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;An email has been sent!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resolver is implemented as follows: I’ve created  a method for registering classes and interfaces. 
The resolve-part is done by implementing a method that allows instances to be retrieved using the predefined matching rules. 
The resolving process is as follows: The system first checks whether a suitable entry is stored in the dictionary. 
If this is the case, the system checks whether the stored type has constructor parameters that must be instantiated. 
In the case of a default constructor without parameters, the type is instantiated and this instance is returned. 
Otherwise, the constructor parameters are collected and also instantiated. Here, too, the new instance is returned. 
This way, I’m able to support nested objects.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resolver&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeToResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeToResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyNotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetConstructors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constParams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParameterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To be able to use the container now, only the registration of the relevant types is necessary. This may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The parameter IContactOption for User is automatically instantiated and assigned as EMailContact by the mapping. The call in the last line accordingly outputs the text “An email has been sent”.&lt;/p&gt;

&lt;h2 id=&quot;résumé&quot;&gt;Résumé&lt;/h2&gt;

&lt;p&gt;In a real application you will hardly implement your own IoC container, but use existing solutions. 
Nevertheless, I found the own implementation very helpful in order to be able to better understand the actual concept.
If you want to look at the available solutions, Unity (not the gaming engine), 
Castle Windsor and Ninject are probably the most widely used products (for C#). 
However, the way this works is all similar (though not quite as primitive) to our own implementation.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/dependency-injection-overview-and-implementation</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/dependency-injection-overview-and-implementation</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>pattern</category>
        
        <category>IoC</category>
        
        <category>DI</category>
        
        <category>CSharp</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Agile - Get Started with Kanban</title>
        <description>&lt;p&gt;After I introduced Scrum in my last article, today will be about Kanban. 
Like Scrum, Kanban is an agile software development methodology and I have to say that I apply the principles 
I present today to most of my personal side projects.&lt;/p&gt;

&lt;p&gt;Kanban is Japanese and can be translated as “billboard”. 
Kanban was first introduced by Toyota in the automotive industry and is now mostly associated with just-in-time concepts. 
But I don’t want to bore you with historical details, I want to show you the usage in software development.&lt;/p&gt;

&lt;p&gt;Before we start, you will certainly want to know what advantages Kanban can offer you: 
Kanban helps you to increase quality and speed up the realisation of tasks as well as to identify and eliminate bottlenecks. 
This is done by minimizing the time that tasks spend in queues.&lt;/p&gt;

&lt;p&gt;There are two basic concepts on which Kanban is based: On the one hand this is visualization, 
on the other hand the limitation of parallel work (Work in Progress, WIP).&lt;/p&gt;

&lt;p&gt;The visualization of the work offers various advantages. Tasks are not forgotten, 
which can reduce stress and make it easier to make good decisions. 
It also simplifies the estimation of how long a task will take to complete.&lt;/p&gt;

&lt;p&gt;Limiting parallel work reduces the waiting time of tasks and thus increases the flow of the process. 
At this point I would like to define two key indicators: Lead time and cycle time.&lt;/p&gt;

&lt;p&gt;Lead time describes the period from receipt of a request to delivery of an associated feature. 
It is therefore the time period that is visible to the user. 
Cycle time describes the duration of a task, starting from the beginning of the work until its result is ready for delivery.&lt;/p&gt;

&lt;p&gt;The goal of Kanban is to reduce the response time of a system. This can be achieved in two ways: 
Increasing the throughput of the system or reducing parallel work and thus reducing the time of tasks in queues.&lt;/p&gt;

&lt;p&gt;Let us illustrate this with an example. The workflow of a software company is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After a problem is reported (1), it remains in the ticket list until the next meeting (2).&lt;/li&gt;
  &lt;li&gt;At this meeting the relevance of the problem is prioritized, in the following days the solution will be implemented by a developer (3)&lt;/li&gt;
  &lt;li&gt;Next comes the test of the implementation (4), planning of the release (5) and finally the deployment (6)&lt;/li&gt;
  &lt;li&gt;There are always periods of time between these individual stations that are not used to add value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180722_kanban_valuestreammap.png&quot; alt=&quot;Value Stream Map in Kanban&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following key figures result for this process:
	• Total time (value adding): 6 h 15 min
	• Total waiting time: 20 days
	• Lead Time: 485.25 hours
	• Efficiency: Time (value-adding) / Lead Time = 6.25 / 485.25 = 1.29
	• WIP = Lead Time / Time (value-adding) = 485.25 / 6.25 = 77.64&lt;/p&gt;

&lt;p&gt;As you can see, the efficiency is anything but great. According to Littles Law, there is a WIP of about 78 elements. 
By reducing this to half, the time required could also be reduced to half.&lt;/p&gt;

&lt;p&gt;But now really to software development: 
The idea to use Kanban in software development is to establish a Kanban board to organize tasks. 
Such boards are divided into different columns that define the corresponding stages of a task. 
Typically these are things like “In planning”, “Development”, “Test”, “Deployment”. 
You can see an example of such a board in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180722_kanban_board.png&quot; alt=&quot;Kanban Board Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Different tasks are then moved into these columns, with each task going through the development process from left to right. 
As already mentioned, an important principle of Kanban is the limitation of parallel work. 
That is why each column may only contain a certain predefined maximum number of elements. 
If a task spends too long in a certain column, problems with the specific task or bottlenecks in the process can be identified. 
These are then solved as a team, keeping the stress of the people involved at the appropriate points as low as possible.&lt;/p&gt;

&lt;p&gt;The conversion of a kanban board can be carried out both physically and by software. With a physical kanban board, 
the tasks can be displayed with post-items. The advantage here is the ubiquity of the board, 
each team member is always aware of the current status. 
Alternatively, software solutions such as Trello or Jira offer themselves, which follow exactly the same principle, 
whereby tasks can be provided here with task assignments, checklists, deadlines and comments.&lt;/p&gt;

&lt;p&gt;When transferring tasks from one area to the next, it is important to establish a pull system. 
Completed tasks should therefore not be pushed to the next level by the people who have completed them. 
Instead, the employees there should pull the task to themselves.&lt;/p&gt;

&lt;h2 id=&quot;kanban-and-scrum&quot;&gt;Kanban and Scrum&lt;/h2&gt;

&lt;p&gt;Now that you have a rough idea what Kanban is, let’s compare the methodology briefly with Scrum.
Both are concepts of agile software development, but what is the best solution for which purpose?&lt;/p&gt;

&lt;p&gt;Both concepts are based on a pull system. 
Kanban uses this to move tasks to the next area, Scrum using the agreement of user stories for the sprint backlog. 
Both concepts are based on transparency and aim to reduce parallel work to a minimum. 
Scrum implements this rather indirectly, since the requirements that are implemented within a single sprint are clearly defined.&lt;/p&gt;

&lt;p&gt;The product is also constantly being updated and kept release-ready in both approaches. 
The self-organization of the team also plays an important role in both Scrum and Kanban and both concepts require the division 
of requirements into as small subtasks as possible.&lt;/p&gt;

&lt;p&gt;But of course there are also various differences. Kanban does without the iterative model of Scrum, for example, 
tasks run through the entire cycle individually. A Scrum team agrees before each sprint which tasks are to be implemented. 
Kanban, on the other hand, makes these commitments optional.&lt;/p&gt;

&lt;p&gt;Kanban does not prescribe roles like the division into Scrum Master, Product Owner and Team as known from Scrum.&lt;/p&gt;

&lt;p&gt;It is difficult to define exactly when which methodology should be used. 
As in the previous article, it is often the case that none of the methodologies is used in its pure form, 
but a mixed version according to the team’ s requirements.&lt;/p&gt;

&lt;p&gt;Kanban is suitable for various IT use cases. In my opinion, Kanban is a more flexible way of dealing with requirements than Scrum is.
The concept makes sense here for applications where malfunctions and short-term maintenance are to be expected more frequently.
Here, the interval cycles of Scrum are simply too long. 
In addition, Kanban may be easier to implement in corporate structures that still work with the waterfall model, 
since Kanban allows a slow changeover.&lt;/p&gt;

&lt;h2 id=&quot;one-last-thing&quot;&gt;One last thing&lt;/h2&gt;

&lt;p&gt;Finally, in my opinion, Scrum is also excellently suited for the realization of own projects, 
in principle in the form of a function-enhanced TODO list. You can then combine the tasks for yourself with the Pomodoro technique, 
for example, to really make efficient use of your private time.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/agile-get-started-with-kanban</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/agile-get-started-with-kanban</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>methodology</category>
        
        <category>kanban</category>
        
        <category>management</category>
        
        <category>agile</category>
        
        <category>project</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Agile - Get Started with Scrum</title>
        <description>&lt;p&gt;As a software developer you are certainly aware of Scrum. You may have already used Scrum or heard about it only marginally. 
With this article I would like to give you an overview of what Scrum is and how you can apply this methodology. 
Plus: You can also use many of the principles even for working on your side projects alone or in a small group.&lt;/p&gt;

&lt;p&gt;Scrum is probably the best known process model of agile software development. 
It is a collection of definitions and tools for managing projects. Scrum is not a rigid structure, but a flexible toolbox. 
A scrum project team consists of three parties: the product owner, who determines what is to be developed in the next sprint, 
i.e. the next iteration, the development team itself, who is responsible for the implementation and presentation of the results, 
and the Scrum Master, who guarantees the smooth running of the project. Scrum is designed for small, self-organized teams.&lt;/p&gt;

&lt;p&gt;As already mentioned, the project implementation according to Scrum consists of several iterations, so-called sprints. 
A sprint typically lasts between one and four weeks and is used to prioritize selected user stories 
(formulated system requirements formulated from the user’s perspective) from the product backlog 
(all requirements for the project), transfer a selection of these into the sprint backlog 
(collection of requirements for processing in the current sprint) and implement them.&lt;/p&gt;

&lt;p&gt;This prioritization and selection of requirements is called Sprint Planning. 
Although the requirements are set by the product owner, they are agreed with the team during the planning phase. 
This should ensure that the planned requirements are also realistic and feasible.&lt;/p&gt;

&lt;p&gt;During the sprint the Daily Scrum takes place daily, a short meeting to discuss the current status and to clarify possible problems.&lt;/p&gt;

&lt;p&gt;After a sprint has been completed, the sprint review takes place in which the team, together with the product owner, 
validates the various requirements and checks their fulfillment. This is followed by the Sprint Retrospective, 
in which the Scrum team discusses the cooperation with the Scrum Master and defines suggestions for improvement. 
The result of the sprint is delivered as an “increment” and the process starts again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180715_scrum_workflow.png&quot; alt=&quot;Basic Scrum Workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To summarize the most important terms in a nutshell:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scrum is a collection of agile software development methods for project planning and implementation&lt;/li&gt;
  &lt;li&gt;The product owner defines the goals of the project and validates their achievement&lt;/li&gt;
  &lt;li&gt;User Stories are the requirements described by the product owner, which are defined from the customer’s point of view&lt;/li&gt;
  &lt;li&gt;The Scrum Master is a member of the team, which deals with the elimination of problems and thus enables the team to work with the best possible efficiency.&lt;/li&gt;
  &lt;li&gt;The product backlog contains a collection of all project requirements&lt;/li&gt;
  &lt;li&gt;The Sprint Backlog contains a selection of these requirements that are to be implemented in the current sprint. 
Prioritization and selection is made by the product owner, the team agrees to the selection&lt;/li&gt;
  &lt;li&gt;Daily Scrum is the daily briefing of the team to discuss possible problems and obstacles.&lt;/li&gt;
  &lt;li&gt;Sprint planning is the planning of the sprint before its execution, which usually takes a complete day (so much for “Agile software development does without extensive planning”)&lt;/li&gt;
  &lt;li&gt;Sprint Review is the final discussion and presentation of results after a sprint with the product owner&lt;/li&gt;
  &lt;li&gt;The Sprint Retrospective takes place after the Sprint Review and serves as an agreement within the team regarding points for improvement&lt;/li&gt;
  &lt;li&gt;An increment is the result of a sprint, which is part of the project result, i.e. the product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So much for the rough plan. But what does Scrum have to offer? And why should I use Scrum and not another agile development methodology? 
First of all: Most teams do not work strictly according to a specific agile methodology such as Scrum or Kanban, 
but roughly follow one and adapt it to the individual needs. 
So if you choose to use Scrum, that doesn’t mean you can’t make customizations or add your own tools.&lt;/p&gt;

&lt;p&gt;In general, working according to agile principles does not always make sense. 
The resulting self-responsible way of working does not suit every team and does not make sense for all tasks. 
Nevertheless, there are also many scenarios where the application of the appropriate methodology can make sense.&lt;/p&gt;

&lt;p&gt;There are some disadvantages of agile methodology, which I would now like to discuss. 
Agile methods require a strong involvement of the customer. 
The product owner is usually an employee of the customer who is very familiar with the project. 
However, if the partner company is not or only little familiar with agile methods, 
it is often not easy to convey to the customer why he should spend a not inconsiderable amount of his employee’s time on the project. 
It is very important to give the customer an understanding of the procedure and to actively involve him.&lt;/p&gt;

&lt;p&gt;It is also essential to understand the basics and use agile methods, not only the convenient ones, 
but also those that may seem annoying in the beginning. Another point is the culture of intolerance to mistakes often found in larger, 
older farms. Mistakes are important because you learn from them and thus improve. 
These errors must be communicated in a team and possible solutions discussed. 
If members are afraid to express their concerns and problems, a Scrum project will most likely fail.&lt;/p&gt;

&lt;p&gt;Teams that are new to this approach may also be unsure about the flat hierarchies and the apparent lack of responsibilities. 
Here it can help to integrate an experienced Scrum-Master into the team.&lt;/p&gt;

&lt;p&gt;Scrum does not define any concrete recommendations for action, but only principles and methods that can be applied. 
The exact selection and structure is then left to the team, 
which is certainly also an obstacle in initial contacts with agile software developers.&lt;/p&gt;

&lt;p&gt;Nevertheless, there are some advantages that Scrum offers compared to classical methods: The rules are quick and easy to learn. 
To use Scrum in a team, no extensive training is required, the principles are easy to learn and can be introduced quickly. 
The communication channels are short and flexible, 
which means that changes can be reacted to quickly and problems can be contained quickly.&lt;/p&gt;

&lt;p&gt;The high level of transparency due to the high degree of communication and the continuous improvement process ensures 
that problems are dealt with quickly and thus enables the team to be highly efficient.&lt;/p&gt;

&lt;h2 id=&quot;résumé&quot;&gt;Résumé&lt;/h2&gt;

&lt;p&gt;Finally, the choice of methodology is not a general one, but depends on many different conditions, both for the team and the project. 
And in terms of agile software development, there is not only Scrum. 
Hopefully this article gave you a rough overview of the approach with Scrum. 
In a follow-up post I will describe alternative concepts so that you can form your own picture and decide what is best for your project. 
However, in my experience I prefer Scrum over for example Kanban when working with a larger team. For personal and smaller projects, 
I usually use Kanban. But that’s the topic for the next post. Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/agile-get-started-with-scrum</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/agile-get-started-with-scrum</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>methodology</category>
        
        <category>scrum</category>
        
        <category>management</category>
        
        <category>agile</category>
        
        <category>project</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Docker - Installation and First Steps</title>
        <description>&lt;p&gt;After outlining the theory behind container management with Docker in last week’s article, I would like to continue the topic in a more hands-on way today.&lt;/p&gt;

&lt;p&gt;I’ll show you the installation and the first steps in Docker. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Docker is available for Windows, Linux and Mac OS. For the download you’ll need to sign up for a free account.&lt;/p&gt;

&lt;p&gt;I would like to point out that the Windows version is not intended for production use, only for development and testing. It runs (currently) on a Mobylinux Hypervisor VM, but a native Win10 application is under development. Nevertheless, you will hardly notice this, the usage feels native and you can work on Windows with a command line of your choice.&lt;/p&gt;

&lt;p&gt;The first command I want to show you is docker info. This will show you information about your installation. If you are using Windows, you can see here what I just mentioned: The client specifies Windows as OS, but the server indicates Linux.&lt;/p&gt;

&lt;h2 id=&quot;running-your-first-container&quot;&gt;Running Your First Container&lt;/h2&gt;

&lt;p&gt;Next we want to create and start our first container. We use the following command for this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker run is the command to start a container, followed by the name of the image, in this case hello-world (Tip: If you get a timeout under Windows, try to set the DNS server to fixed in Docker’s network settings, this helped me).&lt;/p&gt;

&lt;p&gt;You will often stumble across the term docker engine. The Docker Engine includes the Docker Client and the Docker Daemon. The client makes API calls to the daemon, which then processes the commands. In my example, the Docker Daemon now looks for an image named hello-world. If this is not found locally, the search is continued in the default registry, usually the docker hub. The image is downloaded (if one is found) from there and started. When a container is stopped, the local copy of the image is retained, so that a later call of it does not require a new download.&lt;/p&gt;

&lt;p&gt;The container has now been started. You can view all active containers with the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the flag -a you can specify that stopped containers should also be displayed.&lt;/p&gt;

&lt;p&gt;You can also download an image without starting a container immediately:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I generally recommend that you always specify the version of the image you want to load. You can enter the version number separated by a colon after the name of the image. Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull hello-world:1.2 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To remove an image, use the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker rmi hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The version number can also be specified here; this is done in the same style as for the pull.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-own-images&quot;&gt;Creating Your Own Images&lt;/h2&gt;

&lt;p&gt;Now I want to create my own image. I want to write a simple PHP hello world application. For this I need a so called dockerfile. These files describe images and serve as a kind of blueprint. For the realization of a PHP application PHP and a compatible web server is required. I will use Apache here, so I need an image with Apache, PHP and my own script. First I need a suitable docker file. Fortunately, I don’t have to write it myself, I can use templates from the Hub.&lt;/p&gt;

&lt;p&gt;On the Docker Hub I can find it by searching for’PHP’ and using one of the entries that lists the keyword’Apache’. You will find here different entries, each with a highly specialized version on the left, to the right the versions become more and more general. I recommend that you use one of the more specialized versions to prevent unwanted updates.&lt;/p&gt;

&lt;p&gt;I decide to use the image with PHP 7.2 and Apache Stretch. The Hub page lists how to handle the template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM php:7.0-apache 
COPY src/ /var/www/html/  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since I want to use PHP 7.2, I update the version number accordingly. This script now corresponds to the content of my docker file. Brief summary: I now have a folder containing my docker file with the above content and another folder ‘src’ containing the index.php with a simple Hello-World script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello Docker!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker images are ‘layered’. The PHP image is based on other images and so on. Our own image is based on php:7.2-apache. This allows us to keep our docker file short and concise and to include PHP and Apache with just a single line. So our docker file will download the PHP image from Docker Hub, and copy the files from the src folder to the /var/www/html/ directory within the container.&lt;/p&gt;

&lt;p&gt;Now the image must be built. To do this, I use the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; hello-docker &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hello-docker is the name of my image, the -t flag is used to assign a name. At the end you have to specify the path to the docker file. The point references the current directory.&lt;/p&gt;

&lt;p&gt;After the image has been created, it can be started in the form of a new container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 hello-docker &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The call looks almost like the one we’ve already met. The -p 80:80 addition merely defines that the traffic arriving at port 80 on the host is forwarded to port 80 of the container.&lt;/p&gt;

&lt;p&gt;After the start you can now reach the web server via localhost. Your first own container is now up and running!&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/docker-installation-and-first-steps</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/docker-installation-and-first-steps</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Tim Ferriss - The 4 Hour Work Week</title>
        <description>&lt;p&gt;Most of you may already know the book by Tim Ferriss. Nevertheless, I would like to hold my thoughts here, because some approaches and concepts have really made an impression on me.&lt;/p&gt;

&lt;p&gt;The basic idea of the book is that you can work from any location and thus combine work and travelling. The modern definition of wealth is not defined by the bank account balance, but by the ability to freely manage one’s time.&lt;/p&gt;

&lt;p&gt;Today’s socially accepted course of life is as follows: Educate yourself in the first 20 years of your life. Work hard for the next 40(+) years and finally retire in the next 20 years. In other words, work hard and save a lot of money that you won’t have any fun with because once you reach the goal you are either old or dead.&lt;/p&gt;

&lt;p&gt;You probably know the idea of three currencies in life: Time, money and energy. At every stage of your life, however, you seem to be missing one of these. In your youth you have time and energy, but no money. When you grow up you have energy and money, but no time. Being a retiree, you have time and money, but no energy.&lt;/p&gt;

&lt;p&gt;So what is the first step to avoid this problem? Appreciate all three currencies - and not just the money.&lt;/p&gt;

&lt;p&gt;As I mentioned earlier, Ferriss measures the degree of freedom by means of a “Freedom Multiplier”. To do this, he asks the following 4 questions for anything he does:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What do you do?&lt;/li&gt;
  &lt;li&gt;Where do you do it?&lt;/li&gt;
  &lt;li&gt;When do you do it?&lt;/li&gt;
  &lt;li&gt;With Whom do you do it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The more of these you control, the freer you are. So if you control all four, you report to no one but yourself.&lt;/p&gt;

&lt;p&gt;Ferriss describes the way to achieve exactly this with the acronym DEAL: Definition, Elimination, Automation and Liberation.&lt;/p&gt;

&lt;p&gt;Definition: Describe your goals. Define what you would do if all time and money-related hurdles were removed from your path.&lt;/p&gt;

&lt;p&gt;Elimination: You can’t do everything at once. A day only has 24 hours. And since time is your most valuable asset, you should use it wisely. Cut the crap! Stop wasting hours on image boards or social media channels and use this time to pursue your dreams. You’ll notice how fast you can come up with results if you just allocate a small, fixed period of time every day.&lt;/p&gt;

&lt;p&gt;Automation describes the idea of earning money passively. After you have implemented your idea, it should be possible for it to generate money without any further effort on your side.&lt;/p&gt;

&lt;p&gt;Finally, Liberation is supposed to loosen locationality and allow you to work anytime, anywhere.&lt;/p&gt;

&lt;p&gt;This is the basic idea of the book, so to speak the TL;DR version of a summary. But let us take up a few concepts in more detail below:&lt;/p&gt;

&lt;h2 id=&quot;retirement-probably-sucks&quot;&gt;Retirement Probably Sucks&lt;/h2&gt;

&lt;p&gt;Retirement is praised everywhere as the big goal that is being worked towards for a very long time. This expectation, however, assumes that you hate what you are doing and finally get your peace of mind when you retire. Also, things like inflation will increase the cost of living during your retirement (which may not matter to you, assuming you have made good investments). But if you have the opportunity to retire early, you will most likely have an excellent willingness and motivation to work, you you might get bored after a short period of retirement and get back into business.&lt;/p&gt;

&lt;p&gt;Ferriss suggests an alternative: Mini-retirements. Instead of betting all your money on never having to work again at the end of your 60s, take mini retirements at regular intervals to recharge your batteries. Use this opportunity to learn something completely new, such as surfing or flying an airplane.&lt;/p&gt;

&lt;p&gt;If you didn’t have to work anymore and have all the time in the world, you’d probably get bored pretty quickly. I’m pretty sure you want to work. But it’s self-determined and based on your own ideas.&lt;/p&gt;

&lt;h2 id=&quot;travel-cheap&quot;&gt;Travel Cheap&lt;/h2&gt;

&lt;p&gt;A first discouraging thought about travelling is often money. But travelling does not have to be expensive. Living and working abroad is often cheaper than paying rent in your home country. Of course, that always depends on what your starting situation is, but keep that in mind. In the book Ferriss also recommends renting a hotel for the first few nights in a new location and finding local rental apartments during these first few days. Online portals for this are often significantly overpriced.&lt;/p&gt;

&lt;h2 id=&quot;consistency-is-key&quot;&gt;Consistency Is Key&lt;/h2&gt;

&lt;p&gt;I do not remember how many times I have read this advice or passed it on myself. More is not always better and consistency is often better than intensity. Try to contribute regularly to your goals and you will notice how great the effects are.&lt;/p&gt;

&lt;p&gt;The same applies to you if you want to start your own business. You don’t have to quit your job and jump right into your new business. This may work, of course, but it scares many people off. Instead, you can simply start to turn your ideas into reality in parallel and - as soon as it turns out that your concept works out - switch to a full-time model.&lt;/p&gt;

&lt;h2 id=&quot;dont-shit-where-you-eat&quot;&gt;Don’t Shit Where You Eat&lt;/h2&gt;

&lt;p&gt;Try to have different places for different things. Don’t work in your bedroom and vice versa. This should help to leave things where they belong and not think about work in bed. I found this really helpful for myself when using my bed to sleep and not to watch movies.&lt;/p&gt;

&lt;h2 id=&quot;utilize-the-pareto-principle&quot;&gt;Utilize The Pareto Principle&lt;/h2&gt;

&lt;p&gt;In many different areas you will encounter the 80-20 spread. The basic idea is that with 20% of the input result into 80% of the output. The “Better done than perfect” rule is also important here. You have to decide for yourself which points are important for you and I’m not saying that for everything you do you should only aim for the 20%. But think carefully what proportion of the remaining 80% of your time is worth to be realized.&lt;/p&gt;

&lt;p&gt;In this context, Ferriss also goes into Parkinson’s law, which states that a task takes as much time as you allow it to take.&lt;/p&gt;

&lt;p&gt;That was new to me, but I realized it is true. And if you started a student research project just before the deadline, I’m sure you’d agree as well.&lt;/p&gt;

&lt;p&gt;If you focus on 20% with a tighter deadline, you will achieve significantly more than you can imagine.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Stop hating your reality, subject it to your will&lt;/li&gt;
  &lt;li&gt;Living in foreign countries is often cheaper than your regular rent&lt;/li&gt;
  &lt;li&gt;Establish financial reserves for the worst case&lt;/li&gt;
  &lt;li&gt;Ask for forgivness, not for permission&lt;/li&gt;
  &lt;li&gt;For the important things in life, it’s never the right time&lt;/li&gt;
  &lt;li&gt;Relative income is more important than absolute income&lt;/li&gt;
  &lt;li&gt;Define your personal nightmare and create a plan to limit ist impacts&lt;/li&gt;
  &lt;li&gt;Define your dreams – short- and longterm&lt;/li&gt;
  &lt;li&gt;Focus on your strengths rather than trying to eliminate your weaknesses&lt;/li&gt;
  &lt;li&gt;What are you waiting for?&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 04 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/book-review-four-hour-work-week</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/book-review-four-hour-work-week</guid>
        
        <category>book</category>
        
        <category>review</category>
        
        <category>ferriss</category>
        
        <category>life</category>
        
        <category>self</category>
        
        <category>business</category>
        
        
        <category>books</category>
        
      </item>
    
      <item>
        <title>Getting Started with Docker</title>
        <description>&lt;p&gt;As a software developer, you’ve probably heard about Docker and perhaps already used it. But if you’re like me, you’ve been observing the topic from a distance with some interest, but you haven’t gotten into it yet.&lt;/p&gt;

&lt;p&gt;In this article I would like to introduce you to the concept of docker and the “big picture”. This post will not be a detailed tutorial, but will give you an overview of the technology and help you get started.&lt;/p&gt;

&lt;p&gt;Docker is software for isolating applications through container virtualization. Before we start with Docker as a practical example, I would therefore like to discuss containers in general and describe what distinguishes them from virtual machines.&lt;/p&gt;

&lt;h2 id=&quot;what-are-containers&quot;&gt;What are containers?&lt;/h2&gt;

&lt;p&gt;Imagine a company wants to put a new application into operation. In the past, this was usually done in such a way that new hardware was purchased for this purpose; each physical server was responsible for one application. When a new application was added, however, it was often unclear how much power would be required for the new application, which is why it was often overdimensioned. This, of course, also results in unnecessary costs.&lt;/p&gt;

&lt;p&gt;The successor of this concept, which is often used today, are virtual machines. Physical hardware is distributed across multiple virtual machines on which the applications run. This means that an application is no longer managed per physical server, but per VM.&lt;/p&gt;

&lt;p&gt;However, this concept is already problematic: Although the number of servers is reduced, each VM still requires its own OS installation, which in turn requires license fees (at least in most cases), as well as time for administration of the operating system, etc. This of course was also the case with the previous concept, but we’d like to circumvent that.&lt;/p&gt;

&lt;p&gt;In addition, every operating system needs a whole bunch of storage space, which could otherwise be used elsewhere. This is best illustrated in the following graphic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180701_Container_VM.jpg&quot; alt=&quot;Hypervisor Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The graphic shows a classic hypervisor architecture with three virtual machines. Okay, basically the points OS and VM belong together, but to compare the graphics better with the container counterpart, I have listed them separately here. In return, let’s look at the structure of a container-based architecture:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180701_Container.jpg&quot; alt=&quot;Container Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the layer of hypervisor and VMs disappeared. The containers in which the applications run share the operating system. This approach is much lighter, since no entire OS needs to be loaded to start a container. When you try Docker, you will notice that a Docker container usually takes less than a second to launch. In addition, much less storage space is generally required, as the various operating systems are no longer required.&lt;/p&gt;

&lt;p&gt;The fundamental difference between hypervisor and container technology is therefore the common operating system basis of container-based architecture. Next, let’s look at Docker as a concrete example.&lt;/p&gt;

&lt;h2 id=&quot;what-is-docker&quot;&gt;What is Docker?&lt;/h2&gt;

&lt;p&gt;First of all: Docker is neither the first nor the only container technology. Docker has become the de facto standard thanks to its ease of use and other features and is used productively by a large number of organizations worldwide. One of these important feature of Docker is Docker Hub, which I will cover soon. The many additional applications and plugins are not only provided by Docker Inc., but also by 3rd party developers and companies.&lt;/p&gt;

&lt;p&gt;The company behind Docker, Docker Inc. was founded in San Francisco in 2010 under the name dotCloud and was renamed in 2013.&lt;/p&gt;

&lt;p&gt;Docker Inc. is not the same as Docker. The software itself is open source and released under the Apache 2.0 license. At the core of Docker is the Docker engine, which is used to create and run images. You can think of an image like a disabled container or a template for one.&lt;/p&gt;

&lt;p&gt;Docker Hub is a platform (a so-called image registry) on which images can be exchanged. For example, if you want to create a PHP application and your container needs an Apache web server and a PHP installation, you can search for pre-built images on Docker Hub and integrate them into your project. You will find a multitude of offers for various applications there, which means that you hardly have any effort in creating your own images. You can think of Docker Hub as a “PlayStore for enterprise applications”.&lt;/p&gt;

&lt;p&gt;DockerHub is not the only image registry. Besides this, there are many other cloudbased registries, but there are also ways to host one in your own network. This is especially useful for business applications with a no-cloud policy (however, you can also mark your Docker Hub images as private so that only you have access to them).&lt;/p&gt;

&lt;h2 id=&quot;for-what-kind-of-software-can-docker-be-used&quot;&gt;For what kind of software can Docker be used?&lt;/h2&gt;

&lt;p&gt;Containers can be used for both stateless and statefull applications. Although many advantages of containers only become visible with stateless applications, there are a large number of images for database management systems, for example. Containers will keep your data when turned off, so you can easily run a PostgreSQL instance with Docker, for example. So-called “volumes” can also be used to hold this data even if a container is destroyed.&lt;/p&gt;

&lt;h2 id=&quot;container-orchestration&quot;&gt;Container Orchestration&lt;/h2&gt;

&lt;p&gt;A buzzword you’re sure to stumble upon early on is container orchestration. But what’s it all about? It refers to the (automated) cooperation of many individual services within a complex application. Docker has its own tool for this: Docker Swarm allows you to orchestrate containers across multiple hosts, so you can manage containers across Microsoft Azure or Amazon AWS, for example. Of course, there are also alternatives in this area, for example Kubernetes, initiated by Google.&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-Up&lt;/h2&gt;

&lt;p&gt;Docker offers developers a way to run applications in isolation without having to use a VM for each app. Additional tools such as the Docker Hub enable the exchange of images and thus speed up the creation of your own images.&lt;/p&gt;

&lt;p&gt;I am aware that this short introduction can only give you a minimal insight into how containers work. I hope, however, that I have awakened your interest in getting more involved with this topic and that you now know what to look for. After all, the same applies here: If you want to learn the subject as a developer, you’re best served by getting your hands dirty.&lt;/p&gt;

&lt;p&gt;You can download Docker&lt;a href=&quot;https://www.docker.com/get-docker&quot;&gt;here&lt;/a&gt;, for which you need a free Docker ID (this is also valid for DockerHub). If you want to learn more about the topic, you can find several guides online, I recommend to have a look around at Medium.com, Pluralsight or YouTube.&lt;/p&gt;

</description>
        <pubDate>Sun, 01 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/docker-getting-started</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/docker-getting-started</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Introduction to VCS</title>
        <description>&lt;p&gt;When you start learning to program, you rarely think about how you will be able to work on a project at the same time with other people. By the time your side projects take on larger dimensions or you work in a team, you will be confronted with the topic of version control.&lt;/p&gt;

&lt;p&gt;Version control is basically the management of source code, so that several developers can work on the same files at the same time. The sense of a system for monitoring changes can be easily understood by an example:&lt;/p&gt;

&lt;p&gt;Two developers, Bob and John, are working together on a project. They do not use version control and their workflow is as follows:&lt;/p&gt;

&lt;p&gt;The source code is stored on a network drive to which both have access. Every morning they copy the contents of the drive to their local machines. They discuss who is working on which files on that day. Bob decides to work on the connection to the database, while John decides to revise parts of the business logic. At the end of the day, both copy their changed files to the network drive. Since both have worked on different files, this is possible without any problems.&lt;/p&gt;

&lt;p&gt;John now remembers that he also made a small change to the user interface. Knowing that Bob was only working on the database, he simply copies the file to the server. However, Bob also made some changes to this file and he also assumes that John was only updating code in the business logic. He also copies his changes and thus overwrites John’s work.&lt;/p&gt;

&lt;p&gt;When working in this way, precise communication is essential. As the example shows, this procedure is very error-prone, even though only two developers were involved. The coordination effort increases to an immeasurable extent as the number of developers increases.&lt;/p&gt;

&lt;p&gt;I don’t intend to present a multitude of version control systems, but I would like to give you at least a short overview of what has changed as time passed by. I therefore divide the different systems into three generations: Generation 0 works with file locks, Generation 1 consists of CVCS, Centralized Version Control Systems and Generation 2 are the so-called Distributed Version Control Systems (DVCS).&lt;/p&gt;

&lt;p&gt;The first software for version control of files was Source Code Control System (SCSS). The software classifies itself into generation 0 and locks files when they are processed. However, these systems have a significant disadvantage: assuming you want to work on a file that is currently being edited by someone else, you have to wait until they have finished making their changes. You could urge the respective developer to work faster, but he might be sick or on vacation. So it can take quite a while before you can access the file to make your changes. You could now create a local copy of the file and perform your changes right to the copy. As soon as the file itself can be accessed again, you perform a manual merge, i.e. you combine the two files and join the respective changes. However, this is again prone to errors and should be avoided.&lt;/p&gt;

&lt;p&gt;The second generation describes the so-called centralized version control systems. Here you will find a server that manages the source code. To work on a file, a developer must check out this file, i.e. retrieve the latest version of it from the server. I would like to illustrate this again with an example of our already known developers:&lt;/p&gt;

&lt;p&gt;At the moment John wants to make changes to the login.html file. He loads the latest version from the server and starts working. After he has made his modifications, he checks them in, so the file on the server is being updated. In the meantime, Bob has also fetched this file and made some changes. If he wants to check in his modifications again, the server will inform him that the file has been changed in meanwhile. Bob must now perform a merge, which is usually supported or even automated by the software. Once all conflicts (places affected by both changes) have been resolved, the file can be checked in.&lt;/p&gt;

&lt;p&gt;There are many different systems in this category, the best known probably being Subversion (SVN) and Microsoft’s Team Foundation Server (TFS). While these systems are still used very often, a new category was formed around the middle of the 00s: The Distributed Version Control Systems.  First and foremost the best known representative, developed by Linux creator Linus Torvalds: Git. Git’s popularity is certainly also related to the launch of GitHub 2008, but DVCS generally offer advantages over its centralized counterparts.&lt;/p&gt;

&lt;p&gt;The idea of distributed version control systems is that no server is needed to manage the source code. Instead, each copy of the repository contains a full history of all changes made to each file. So, without loading anything from a server, you can reconstruct any point in time of your software. You can also work offline and share your changes with your team members as soon as you can reconnect to them. You also have the advantage that any computer that has a copy of the repository can be used as a backup source. I assume, however, that if you use a CVCS, you also have a corresponding backup strategy, which is why I do not consider this advantage really relevant.&lt;/p&gt;

&lt;p&gt;I hope I could give you a rough overview of the different categories of version control systems. I already wrote an article about Git, if you like, you can read it directly on &lt;a href=&quot;https://blog.mjurtz.com/2017/09/getting-started-git/&quot;&gt;my blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, however, I would like to point out that the use of a version control system also has advantages, even if you work alone. Availability of file histories, branching or publishing to, for example, GitHub are just a few of them. But it’s definitely worth trying if you don’t use VCS yet.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Jun 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/06/introduction-to-vcs</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/06/introduction-to-vcs</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>git</category>
        
        <category>tfs</category>
        
        <category>svn</category>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
