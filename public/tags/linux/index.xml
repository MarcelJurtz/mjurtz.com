<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Marcel Jurtz</title>
    <link>https://www.mjurtz.com/tags/linux/</link>
    <description>Recent content in linux on Marcel Jurtz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 28 Feb 2018 06:00:57 +0000</lastBuildDate><atom:link href="https://www.mjurtz.com/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to i3</title>
      <link>https://www.mjurtz.com/posts/2018-02-28-introduction-to-i3/</link>
      <pubDate>Wed, 28 Feb 2018 06:00:57 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-02-28-introduction-to-i3/</guid>
      <description>In today&amp;rsquo;s article I would like to give you an insight into the usage of a tiling window manager, which I will illustrate with the example of i3.
A tiling window manager divides the screen into non-overlapping areas. You are probably more used to a stack-based system where windows can overlap. However, the concept of avoiding overlapping offers a major advantage: Due to the pure operation of the computer via keyboard, it is possible to work at a faster pace after a short training period.</description>
    </item>
    
    <item>
      <title>Using GitHub over SSH on public WIFI</title>
      <link>https://www.mjurtz.com/posts/2018-01-29-how-to-use-github-over-ssh-on-public-wifi/</link>
      <pubDate>Mon, 29 Jan 2018 06:00:11 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-01-29-how-to-use-github-over-ssh-on-public-wifi/</guid>
      <description>When using GitHub via SSH, port 22 will be used per default. However, often times you&amp;rsquo;ll see this port being blocked on public WIFI networks. On a Linux machine, there is a simple way to change the default port.
To test if our plan works out, you can use the following command:
bash &amp;gt;ssh -T -p 443 git@ssh.github.com
This will test the ssh connection by using port 443. If this returns a positive result, you can change the port in your ssh config file.</description>
    </item>
    
    <item>
      <title>Installing MagicaVoxel on Linux</title>
      <link>https://www.mjurtz.com/posts/2018-01-20-install-magicavoxel-on-linux/</link>
      <pubDate>Sat, 20 Jan 2018 06:00:57 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-01-20-install-magicavoxel-on-linux/</guid>
      <description>As a programmer with definite lack of visual skills, MagicaVoxel is a gift from God to create usable 3D models. Unfortunately, there is no installation option for Linux on the official website. With the help of Wine it is possible to use MagicaVoxel under Linux. And it really works great!
Installation Prerequisites As I said you need to run Wine. As stated on their landing page, Wine is a compatibility layer that allows Windows applications to run under POSIX-compliant operating systems such as Linux, macOS and BSD.</description>
    </item>
    
    <item>
      <title>Octoprint on a Raspberry Pi</title>
      <link>https://www.mjurtz.com/posts/2017-12-23-octoprint-raspberry-pi/</link>
      <pubDate>Sat, 23 Dec 2017 15:44:40 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-23-octoprint-raspberry-pi/</guid>
      <description>Being tired of running back and forth to my 3D-printer to change stl files and starting / stopping prints, I decided to give Octoprint a shot. Octoprint basically provides a webinterface for 3D-printers, which allows you to send tasks over your local network to the printer and to monitor the prints. The software also provides a plugin functionality, so you can create your custom addons if required.
Note that you can use Octoprint for slicing, but in my case I will be starting of with only sending pre sliced stl files to print.</description>
    </item>
    
    <item>
      <title>Getting Started with .NET Core on Arch Linux</title>
      <link>https://www.mjurtz.com/posts/2017-12-16-getting-started-net-core-arch-linux/</link>
      <pubDate>Sat, 16 Dec 2017 16:40:56 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-16-getting-started-net-core-arch-linux/</guid>
      <description>Hello Internet! Today, we will try to develop and run .NET Core Apps on a Macbook running Arch Linux! Because what could go wrong!
(Honestly, this went way better than I thought.)
Installation Before we can start writing .NET Core applications on Linux, we need to install some packages. The Arch Wiki states that to run .NET Core applications, the dotnet-runtime package needs to be installed. Additionally, we will need dotnet-sdk-2.</description>
    </item>
    
  </channel>
</rss>
