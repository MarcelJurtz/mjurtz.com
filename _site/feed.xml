<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcel Jurtz</title>
    <description>A software developers blog.
</description>
    <link>http://blog.mjurtz.com/</link>
    <atom:link href="http://blog.mjurtz.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Jan 2019 18:23:23 +0100</pubDate>
    <lastBuildDate>Sun, 20 Jan 2019 18:23:23 +0100</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>.NET Core on a Raspberry Pi</title>
        <description>&lt;p&gt;The Raspberry Pi is one of my favorite toys when it comes to hosting local applications or services like relational databases for testing purposes. At the moment I am trying to test an ASP.NET core application with this setup. However, getting .NET Core to run on the Raspberry Pi is not as easy as I thought, so I’d like to briefly outline the necessary steps.&lt;/p&gt;

&lt;p&gt;On &lt;a href=&quot;https://github.com/dotnet/core/tree/master/release-notes/download-archives&quot;&gt;GitHub&lt;/a&gt; you will find the download links we need. In my example I am using version 2.1.1. By following the link to the required version, you’ll see a table with different download links.&lt;/p&gt;

&lt;p&gt;Important for the Raspberry Pi are now the downloads for ARM architecture, I need the SDK and the ASP.NET Core Runtime. So I copy the two links and download the archives with wget:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget https://download.microsoft.com/download/D/0/4/D04C5489-278D-4C11-9BD3-6128472A7626/dotnet-sdk-2.1.301-linux-arm.tar.gz 
wget https://download.microsoft.com/download/9/3/E/93ED35C8-57B9-4D50-AE32-0330111B38E8/aspnetcore-runtime-2.1.1-linux-arm.tar.gz &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then create a new directory for .NET Core and extract both of the archives to this new directory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /opt/dotnet 
&lt;span class=&quot;nb&quot;&gt;sudo tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; dotnet-sdk-2.1.301-linux-arm.tar.gz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /opt/dotnet/ 
&lt;span class=&quot;nb&quot;&gt;sudo tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xvf&lt;/span&gt; aspnetcore-runtime-2.1.1-linux-arm.tar.gz &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; /opt/dotnet/ &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that’s left to do now is to create a symbolic link to the folder and you’re good to go:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /opt/dotnet/dotnet /usr/local/bin &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it! Now you have access to the familiar .NET commands like dotnet build or run, and your ASP.NET core application is ready to run.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Jan 2019 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/dotnet-core-raspberry-pi</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/dotnet-core-raspberry-pi</guid>
        
        <category>programming</category>
        
        <category>software</category>
        
        <category>development</category>
        
        <category>microsoft</category>
        
        <category>dotnet</category>
        
        <category>raspberrypi</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Partial Classes and Methods in C#</title>
        <description>&lt;p&gt;The &lt;em&gt;partial&lt;/em&gt; keyword in C# allows you to spread a class definition across multiple files. You’ve probably seen this before when you created a WinForms application and viewed the MyForm.Designer.cs file, which contains the properties you define in the Designer. So the Visual Designer stores the entire definition of your user interface in this separate file. The class of your form itself is always marked &lt;em&gt;partial&lt;/em&gt;. Files of partial methods must not be in different assemblies and will be merged during compilation. The IL code therefore looks exactly the same as if the class were a single file.&lt;/p&gt;

&lt;p&gt;This example also shows you the main purpose of partial classes: Code generation, without accidentally changing existing code of the programmer or complicated evaluations, which code now belongs to the designer.&lt;/p&gt;

&lt;p&gt;Basically, this feature is a good way to split class components and thus make the file content clearer. However, it is often discouraged from overusing partial classes, as the goal of clarity can easily result in  the opposite. In short - When used prudently, partial classes offer a great feature to split code files thematically and provide more clarity. It would be conceivable, for example, to implement interfaces in your own files, so that the corresponding members can be found more quickly.&lt;/p&gt;

&lt;p&gt;But now to the probably less known feature in this matter: partial methods. Partial methods can only be defined in partial classes and generally have the return type &lt;em&gt;void&lt;/em&gt;.  It is also not possible to bypass this condition using out parameters. Also not allowed are access modifiers and keywords like &lt;em&gt;virtual&lt;/em&gt;, &lt;em&gt;sealed&lt;/em&gt;, &lt;em&gt;override&lt;/em&gt;, &lt;em&gt;new&lt;/em&gt; or &lt;em&gt;abstract&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On the one hand, partial methods are always defined with the method header only (quasi as in abstract classes), the implementation then takes place elsewhere. It is possible to define several method headers with different overloads. The implementation itself always takes place in one piece, so at this point nothing is distributed to several places in the code.&lt;/p&gt;

&lt;p&gt;If you stumble across partial methods in a project, you will usually find the definition of the method and its implementation in different files, as this is the only way to get the idea behind the concept. This code element is also usually found in generated code. If a partial method is called and an implementation of it is found, it is called and executed normally. However, if no implementation is found, the method (or more precisely the method header) and the calls to it are not compiled at all. Partial methods thus indicate optional additions to the source code.&lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jan 2019 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/c-partial-classes-and-methods</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/c-partial-classes-and-methods</guid>
        
        <category>programming</category>
        
        <category>software</category>
        
        <category>development</category>
        
        <category>microsoft</category>
        
        <category>dotnet</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Writing .NET Core Desktop Apps with Electron.NET</title>
        <description>&lt;p&gt;The team behind GitHub has created its own interesting open source projects in addition to the web platform. One of them is Electron, a cross-platform desktop solution used for the Atom editor. Microsoft also uses Electron for Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Electron runs with NodeJS, so applications for it are usually written in JavaScript. For .NET developers there is now &lt;a href=&quot;https://github.com/ElectronNET/Electron.NET&quot;&gt;Electron.NET&lt;/a&gt; available, an Electron wrapper for ASP.NET Core applications.&lt;/p&gt;

&lt;p&gt;An Electron.NET application hosts the ASP.NET Core project. Electron.NET then provides access to Electron via API. This enables platform-specific functionalities such as push notifications or clipboard access. And the best thing about it is that you don’t notice anything about the underlying JavaScript.&lt;/p&gt;

&lt;p&gt;Let’s start right away and develop a simple application with Electron.NET. You need first the .NET Core 2 SDK, as well as NodeJS, at least in version 8.6.0. I use Visual Studio 2017 as development environment.  I start by creating an empty ASP.NET Core project. In the following dialog I choose the MVC template. And I’m ready to go.&lt;/p&gt;

&lt;p&gt;First I install Electron.NET using &lt;a href=&quot;https://www.nuget.org/packages/ElectronNET.API/&quot;&gt;NuGet&lt;/a&gt;. After that the WebHostBuilder in Program.cs has to be adjusted as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;CreateWebHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IWebHostBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CreateWebHostBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;WebHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDefaultBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;UseElectron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseStartup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Startup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The application has now been extended with Electron, but so far you don’t see anything of it. If you start the project now, it will be started in the browser as usual. However, I would like the application to be started in the familiar Electron window as it would be displayed in the browser. To achieve this, I add the following line at the end of the Configure() method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Electron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateWindowAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to be able to start your application as a classic web application, you have to put this statement in an if statement with the condition &lt;em&gt;HybridSupport.IsElectronActive&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now another Nuget package is needed, which is not installed for the project itself, but as a global toolset. Use the following command in the Nuget console:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;dotnet tool install ElectronNET.CLI -g &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This package provides several tools that you can use, among other things, to initialize and start your project. Then navigate to the project directory and execute the command “electronize init”. The command creates a configuration file called electron.manifest.json. Now you can start your application from here with the command “electronize start”. The first start takes a while, but this does not apply to the following starts. At this point you should be able to see your ASP.NET Core application in the normal Electron interface. So let’s try some of the features now.&lt;/p&gt;

&lt;p&gt;A quick tip at this point: To debug the application you can simply select the menu item “Debugging” in Visual Studio and then select the application in the “Attach to Process” area. You can also use the shortcut CTRL + SHIFT + I to access the Chrome Developer Tools. This functionality is provided via Electron.NET CLI, however, if you want to implement such functionality for later use, you can do it yourself: Electron.WindowManager.BrowserWindows.First().WebContents.OpenDevTools().&lt;/p&gt;

&lt;p&gt;Electron creates multiple processes. The main process called Main contains the code of Startup.cs and Program.cs. A separate renderer process is created for each desktop window, which prevents the entire application from crashing when a renderer process crashes. The communication between these processes is based on Inter-Process Communication (IPC).&lt;/p&gt;

&lt;p&gt;The classic workflow for ASP.NET Core MVC is as follows: The user makes an input and an action command is sent to a controller. The controller returns a result in the form of a view instance, which has a disadvantage: The page is reloaded, which doesn’t provide great user experience. With the help of IPC, however, it is easy to remedy the situation:&lt;/p&gt;

&lt;p&gt;I add code to my Index.cshtml file that uses JS to access the API of the renderer process. The ipcRenderer allows message-based communication, optional arguments can be passed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h3&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h3&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmdShowData&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Show Data&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt; 

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;electron&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmdShowData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;getData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'args'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 

    &lt;span class=&quot;nx&quot;&gt;ipcRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sendData'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also need a possibility to listen to incoming messages. This is implemented inside the controller (HomeController.cs):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;Electron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IpcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;getData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainWindow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Electron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BrowserWindows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;Electron&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IpcMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sendData&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello IPC World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, I am only returning a simple message, but of course you can extend this or implement advanced functionality like repeated execution and update of the message by loops.&lt;/p&gt;

&lt;p&gt;I don’t want to go into much application development at this point, but you can see how quickly you can package an ASP.NET core application in Electron. But there is one important detail missing for developing real applications: Deployment. In fact, two applications are created when the Electron.NET app is being built. On the one hand, the ASP.NET core application is built including .NET Core runtime. This application is then packaged by Electron Packer like a regular Electron application. You can specify the target operating system by adding the relevant target flag to the build command: Use the command electronize build /target win. Use the flag osx for macOS, or linux for Linux. After execution, you have your application packaged and ready for use.&lt;/p&gt;
</description>
        <pubDate>Sun, 06 Jan 2019 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2019/01/dotnet-core-ui-with-electron</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2019/01/dotnet-core-ui-with-electron</guid>
        
        <category>programming</category>
        
        <category>software</category>
        
        <category>development</category>
        
        <category>csharp</category>
        
        <category>microsoft</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>C# Attributes</title>
        <description>&lt;p&gt;During the development with C# you have certainly already encountered attributes, whether consciously or unaware. Today I want to go a little deeper into what attributes are, what kind of them are already present in the .NET framework, and how you can define your own attributes.&lt;/p&gt;

&lt;p&gt;Microsoft defines attributes as a powerful way to associate metadata or descriptive information with code. But what exactly does that mean?&lt;/p&gt;

&lt;p&gt;Classes have, among other characteristics, fields, methods, properties, but also a state and behavior. You can “decorate” code elements with attributes to further describe them. Doing so, however, has no effect on their state.&lt;/p&gt;

&lt;p&gt;You can imagine this a bit like tags or post-its attached to code and providing additional information.&lt;/p&gt;

&lt;p&gt;Attributes are applicable at different times. While writing code, for example, debugging can be controlled, or additional instructions can be added to the compiler. A widespread use of attributes in this category is, for example, marking code elements as obsolete to indicate to developers that something should no longer be used.&lt;/p&gt;

&lt;p&gt;At design time it is conceivable to control positioning etc. via attributes.&lt;/p&gt;

&lt;p&gt;Finally, it is possible to use attributes at runtime. This is done for example for the validation of data in ASP.NET applications. At runtime, attributes can be evaluated using Reflection. Code execution can then be controlled by the presence or absence of attributes or based on their property values. I don’t want to go into the validation using attributes separately in the course of this article, but you can find a detailed overview of the available attributes &lt;a href=&quot;https://docs.microsoft.com/de-de/dotnet/api/system.componentmodel.dataannotations?view=netframework-4.7.2&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are some other use cases, some of which you have probably already used yourself. In the course of the article you will surely notice a few of them.&lt;/p&gt;

&lt;p&gt;Attributes are enclosed in square brackets: &lt;code class=&quot;highlighter-rouge&quot;&gt;[MyCustomAttribute]&lt;/code&gt;. By convention, the name of all attributes ends with “Attributes”, which can be omitted. So it comes out the same whether you write &lt;code class=&quot;highlighter-rouge&quot;&gt;[ObsoleteAttribute]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;[Obsolete]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Attributes can be used at different levels of code elements. On one hand this is directly on assembly level, when defining classes or structures, as well as interfaces and enumerations. But also methods, fields, properties or structures, events, delegates and single parameters can be decorated with attributes. In addition, an attribute can also be defined to the return value of a method.&lt;/p&gt;

&lt;p&gt;It should be noted that not every attribute can be used for every code element. The author of the attribute specifies what it is valid for and where the invalid use throws a compile-time error.&lt;/p&gt;

&lt;h2 id=&quot;inheritance-of-attributes&quot;&gt;Inheritance of Attributes&lt;/h2&gt;

&lt;p&gt;Attributes on classes are inherited, that is, if class A is decorated with an attribute, class B, which inherits from class A, also has this attribute. You no longer have to specify this explicitly. However, this behavior can be deactivated at attribute level if required.&lt;/p&gt;

&lt;h2 id=&quot;using-attributes&quot;&gt;Using Attributes&lt;/h2&gt;

&lt;p&gt;As mentioned above, attributes are used by using square brackets. An attribute itself is a normal class which inherits from System.Attribute. If you add an attribute to a code element, you can specify constructor parameters of the underlying class using regular parentheses. Nothing new, so far.&lt;/p&gt;

&lt;p&gt;There are different types of constructor parameters: required and optional parameters, and additional properties. As with normal methods, optional parameters are just parameters with default values. You can specify parameters comma separated as usual, and you can also use named arguments. If you want to use properties that cannot be filled by a constructor, this is also possible within the brackets. The syntax, however, is as follows: first the name of the property, followed by an equal sign and the corresponding value. As with regular classes, you can also use constructor-overloads for attributes, which are a bit clearer than the representation with properties.&lt;/p&gt;

&lt;p&gt;Let’s first take a look at some of the predefined attributes in C#. First, I’d like to briefly look at attributes that will help you when developing. I’ll start with the DebuggerDisplay attribute: This is used to change the text that is displayed during debugging when you move the mouse over an object. To use it, all you have to do is specify a string to be used as text. You can also use curly braces to include property values.&lt;/p&gt;

&lt;p&gt;Another helpful attribute in this area is the DebuggerBrowsable attribute. This is defined at property level and indicates how you can inspect the element during debugging. The attribute has a required DebuggerBrowsableState constructor parameter, an enumeration that can take one of the values Collapsed, Never, and RootHidden. Never hides the property completely from the inspector, Collapsed collapses the nested elements and RootHidden is used for collections. The latter ensures that the elements of the collection itself are displayed in the inspector, but the main element is hidden.&lt;/p&gt;

&lt;p&gt;Another attribute for adjusting the display in the debugger window is the DebuggerTypeProxy attribute. This attribute specifies a proxy class that is used instead of the original class to display the details in the debugger. For example, you can define a helper class here that displays various details of the actual class in a simplified way to save you cumbersome navigation in the debugging window. This is often useful for nested properties or combinations of multiple properties. At this point it should be noted that you can still view the properties of the underlying class, you’ll find them at the bottom at the “Raw View” item when you hover the mouse over the object you want to inspect.&lt;/p&gt;

&lt;p&gt;A widespread attribute, which I mentioned in the introduction and which I’m sure you’ve already seen when using external libraries in your applications, is the Obsolete attribute. This is used to mark code as deprecated and to tell the developer not to use this element anymore. If you want to use the attribute itself, you will notice that you can configure it in two ways: First, only a warning is generated, but you can still use the code element. The second variant is that the use throws a compilation error.&lt;/p&gt;

&lt;p&gt;You can use the attribute with default constructor, so no arguments are required. In this case only a warning will be displayed, as well as when you move the mouse over the corresponding code element. But you can use it to adjust the behavior. There are two constructor overloads for this: In both cases you can specify a message here, which will be displayed as a hint, optionally you can also use boolean-flag to specify whether a compilation error should be generated.&lt;/p&gt;

&lt;p&gt;An example of the attribute might look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Obsolete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Use Property 'FormattedName' instead&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetFormattedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FormattedName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Accessing the GetFormattedName-Method displays the following warning: “Student.GetFormattedName()” is obsolete: Use Property ‘FormattedName’ instead.&lt;/p&gt;

&lt;p&gt;I already mentioned that you can use attributes at the assembly level as well. To do this, you have to prefix the keyword “assembly:”.&lt;/p&gt;

&lt;p&gt;If you are working on a .NET Framework project, you can check out the “AssemblyInfo” class, which you can find in the “properties” folder. This class already contains some metadata declarations on your project like title, description or copyright. Of course, you can also define custom attributes here as well, just think of the “assembly:” prefix. If you’re using .NET Core, you won’t find such a file, since the metadata is generated automatically. However, you can override the values by adding assembly level attributes by yourself, which you can do at any position in your project.&lt;/p&gt;

&lt;p&gt;An attribute that is great if you are working on a project for which you want to write tests, but don’t want to change it (for now), is InternalsVisibleTo. Suppose you are writing a test project for the very other project and want to test a class or method but can’t access it due to its protection level, you can use this attribute to allow access by specifying the project name of your test project. This attribute is defined at assembly level and therefore does not have to be assigned to each class / method individually.&lt;/p&gt;

&lt;p&gt;A less common feature of attributes is their use in conjunction with method return values. The attribute is specified above the method signature, including the prefix “return:”.&lt;/p&gt;

&lt;p&gt;Finally, attributes can be used for serialization. Use the “NonSerialized” attribute for properties that are not to be serialized.&lt;/p&gt;

&lt;p&gt;As you can see, you can already do a lot with the predefined attributes. Nevertheless, it is sometimes necessary to define your own attributes. This is what I want to show you now.&lt;/p&gt;

&lt;h2 id=&quot;creating-and-using-your-own-attributes&quot;&gt;Creating and using your own attributes&lt;/h2&gt;

&lt;p&gt;To restrict the usage of the attribute, the class is assigned another attribute: AttributeUsage. The constructor of this attribute requires an argument of type &lt;a href=&quot;https://docs.microsoft.com/de-de/dotnet/api/system.attributetargets?view=netframework-4.7.2&quot;&gt;AttributeTargets&lt;/a&gt;, which is an enumeration from which you can select one or more code elements. If you want to support multiple code elements, you can do that by utilizing the bitwise-or operator like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;[AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can add another property to the constructor if you want to allow multiple use on a single code element. This is done with the AllowMultiple flag, the default value is false.&lt;/p&gt;

&lt;p&gt;The last option to customize at this point is to control inheritance. By default, attributes are inherited with the inheritance of a class. This can be deactivated by setting the property “Inherited” to false.&lt;/p&gt;

&lt;p&gt;So, enough for theory. Let’s illustrate this with an example:&lt;/p&gt;

&lt;p&gt;I define a simple attribute that I want to use later to control the output on the console. I inherit my custom attribute from System.attribute and end the name of the class with “attributes” according to the convention. The attribute has two properties, one of which is required and the other has a default value. In the case of a null value for the required parameter, an ArgumentException is thrown.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;na&quot;&gt;[AttributeUsage(AttributeTargets.Property)]&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DisplayAttribute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DisplayAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConsoleColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConsoleColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;TextColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConsoleColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then I want to evaluate the attribute at runtime. To do this, I use Reflection, where I first evaluate a property for the presence of the attribute, and then I get the value. After that, I want to output the contents of the tag property, followed by the value of the actual property decorated with the attribute. The entire output should be in the color that is stored for the attribute.&lt;/p&gt;

&lt;p&gt;I continue to use my student class from earlier, and create a new writer class to control the output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Writer&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConsoleColor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;_student&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;PropertyInfo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstNameProp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 

    &lt;span class=&quot;n&quot;&gt;DisplayAttribute&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstNameDisplayAttr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DisplayAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetCustomAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstNameProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DisplayAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstNameDisplayAttr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;nf&quot;&gt;SaveDefaultForegroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForegroundColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;firstNameDisplayAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;firstNameDisplayAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
      &lt;span class=&quot;nf&quot;&gt;RestoreDefaultForegroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_student&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FirstName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SaveDefaultForegroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;_color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForegroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RestoreDefaultForegroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForegroundColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, if the attribute is present, I save the current text color of the console to be able to reset it after the output. Then the output takes place. If the attribute does not exist, only the value of the property is printed to the console.&lt;/p&gt;

&lt;p&gt;The section of reflection shown here is only a minimal part of the available options. For example, you could search an assembly for classes that have a specific attribute, and then use it to control the functionality of your application. You can also set or remove attributes at runtime. But I’ll cover that with a separate article about Reflection.&lt;/p&gt;

&lt;p&gt;I hope I was able to give you a general overview of attributes in C#. If you need more information, I recommend checking out MSDNs &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/attributes/&quot;&gt;full documentation on the topic&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sun, 30 Dec 2018 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/csharp-attributes</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/csharp-attributes</guid>
        
        <category>programming</category>
        
        <category>software</category>
        
        <category>development</category>
        
        <category>csharp</category>
        
        <category>microsoft</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Using LESS with ASP.NET Core</title>
        <description>&lt;p&gt;I have already written about the advantages of a CSS preprocessor like LESS in this post. Today I want to show you how you can easily implement support for such a preprocessor in your ASP.NET Core project. I will use Gulp to create the ability to write LESS files and convert them to CSS files so that they can be integrated into the ASP.NET Core application. Finally, I will automate the whole thing so that the LESS file is converted without manual interaction on every build.&lt;/p&gt;

&lt;p&gt;To convert from LESS to CSS I use Gulp. Gulp is a workflow automation tool for JavaScript. This allows me to implement the whole thing per npm into my ASP.NET core project. I don’t have any node packages in use yet, so I need a new package.json file first. I don’t create it with Visual Studio because I didn’t get it to work correctly. You are welcome to try it, but if it doesn’t work either, try the following:&lt;/p&gt;

&lt;p&gt;Start the setup wizard using npm init, and fill in the configuration as needed. Then I need the following dependencies, which will be added to the dev-dependencies section. After adding them. the area will look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.9.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp-less&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.3.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp-clean-css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.9.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I need to setup gulp using a new file called gulpfile.js:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;cleanCss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp-clean-css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gulp-less&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
 

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Styles/*.less'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;less&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cleanCss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;compatibility&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ie8'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'wwwroot/css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s about it, actually. If your LESS files are in a directory other than “Styles”, you have to change the configuration accordingly. You can now start the conversion with the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;node_modules\.bin\gulp &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I would like to automate this, because I do not want to manually execute the conversion everytime I changed something. To achieve that, I edit the .csproj file of my project by hand and add the following command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Target&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyPreCompileTarget&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BeforeTargets=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Build&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Exec&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;WorkingDirectory=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$(ProjectDir)&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Command=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;node_modules\.bin\gulp&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Target&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That’s it. That’s it. The conversion process is now fully automated and you can define and use your LESS files without worrying about the conversion.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Dec 2018 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/using-less-with-asp-net-core</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/using-less-with-asp-net-core</guid>
        
        <category>programming</category>
        
        <category>software</category>
        
        <category>development</category>
        
        <category>css</category>
        
        <category>web</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Writing Clean Code</title>
        <description>&lt;p&gt;There are lots of articles and even books about the art of writing clean code. But when exactly is code actually to be considered clean? Today I’d like to give you a brief overview of how you can assess and improve your code quality. I should perhaps note that writing good code, and therefore this article, is independent of the programming language used and is rather methodical in nature. However, for more detailed information, I recommend that you really get a book on the subject. The standard advice on this is certainly “Clean Code” by Robert C. Martin.&lt;/p&gt;

&lt;p&gt;First of all: What is clean code? Everyone probably has their own definition here, but there are a lot of overlaps. A key characteristic of clean code, for example, is good readability and maintainability. Why should the readability of your code be good? If you think about how much time you spend writing code and how much you spend reading it, you will probably get a ratio of 1:10. So if you make your code readable, you’ll make future work easier.&lt;/p&gt;

&lt;p&gt;Everyone probably knows the following scenario: You are pressurized by deadlines and tend to write “Quick and Dirty” code. Although the problem is solved quickly, in the long run this is the more costly approach. If this code has to be extended later, it will be much more difficult than if somebody thought about a suitable strategy before implementing it in the first place.&lt;/p&gt;

&lt;p&gt;You alone are responsible for your code. Imagine another profession: For example, in the food industry or as a doctor or nurse. If someone else told you not to wash your hands from now on to save time - would you do that? Probably not. And that’s exactly what makes your business professional. But what can you do to actually make your code more readable?&lt;/p&gt;

&lt;p&gt;Use self-explanatory names. Variables, classes or methods have to directly expose what they do. Name methods and variables so that a class does exactly what you expect it to do after reading the source code. Also, avoid using abbreviations in your naming to make reading easier. Oh, and even if it feels tempting to name all variables, classes, methods, and the like after different Pokémon, don’t. Clarity is unfortunately more important here than being funny. Also, make sure you name similar concepts the same way. Suppose you write an API that receives data and performs simple CRUD operations - name all functions that perform similar tasks identically. For example, choose Insert, Add, or Append for creating new objects, but don’t mix these names.&lt;/p&gt;

&lt;p&gt;Your code should speak for itself. This does not mean that you have to avoid comments completely. However, comments are often used when the purpose of the code is not clear. The problem here is very often that the code is changed, but the corresponding comment remains, and thus provides wrong information. So if you are in the process of writing a comment, think about whether it really makes sense or whether you should revise the code.&lt;/p&gt;

&lt;p&gt;There is another point regarding naming, especially for methods and functions: The single-responsibility principle. A method should do exactly one thing, and it should be done well. If you have a method that creates and returns an instance of a class with default values, that method should not add the object to a collection of objects of that class as well. Each method has exactly one task. If your method takes 5 arguments, it might probably do more than one thing.&lt;/p&gt;

&lt;p&gt;Write tests. I confess myself guilty of doing too little of this, but write automated tests. Not just to sleep better before releases. Write unit tests to validate individual parts of your application and combine them using integration tests. Of course, you can also add other test categories like UI testing, but I think you should start small: Anything is better than nothing.&lt;/p&gt;

&lt;p&gt;Practice, practice, practice. This list is not complete, not at all. But it is certainly a good start. To write clean code, it’s all about practice. Look at other people’s source code. Ask developers to look at your code and give you feedback. You will notice if your code is good and internalize the important characteristics all by yourself.&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Dec 2018 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/writing-clean-code</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/writing-clean-code</guid>
        
        <category>programming</category>
        
        <category>software</category>
        
        <category>development</category>
        
        <category>methodology</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Some Updates about this Website</title>
        <description>&lt;p&gt;Hey, today just a short note on a few changes to my website.&lt;/p&gt;

&lt;p&gt;Basically I planned to take up various topics in the area of software development and to capture my thoughts on this blog. However, as you may have noticed, I have published a lot about other subjects lately. I want to return to my roots on this site, so I decided to set up a separate blog. From now on you will only find posts on software development and related topics on this blog. Sports-related posts will now be posted to mjurtz.com/triblog or triblog.mjurtz.com as soon as I get the subdomain set up correctly.&lt;/p&gt;

&lt;p&gt;Thanks for your attention, regular posts will follow!&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Dec 2018 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/website-update</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/website-update</guid>
        
        <category>website</category>
        
        <category>blog</category>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Why you should write your own Impossible List</title>
        <description>&lt;p&gt;Writing down your goals is extremely helpful for really achieving them. With fixed, terminable goals with fixed intermediate steps, 
you make it much easier for yourself to really achieve your self-imposed goals.&lt;/p&gt;

&lt;p&gt;Today I would like to show you a way to define your goals with the help of the so-called “Impossible List”. 
At first glance this list looks like an Impossible List, but it is definitely not: Joel Runyon, the author of the first &lt;a href=&quot;https://impossiblehq.com/the-impossible-list-is-not-a-bucket-list/&quot;&gt;Impossible List&lt;/a&gt; describes the classic Bucket List as a static list that was written at some point in life and usually none of the points written down really affect the life of the creator. 
So the goals are written down, but never reached or at least actively pursued.&lt;/p&gt;

&lt;p&gt;The Impossible List goes a different way: It is not a list of entries waiting to be ticked off. The Impossible List continues to evolve. It describes things you’ve done, you should be constantly checking off entries. But you should also add new items. With the list you broaden your horizons and reach goals you didn’t think possible before. The bucket list describes the things you want done before you die. But the Impossible List describes your life. The Bucket List describes dreams, while the Impossible List requires you to take action now.&lt;/p&gt;

&lt;p&gt;What is probably the most common answer from students to the question, what are their goals in life? Often you will hear something like “My goal is a good college degree, a well paid job and my own house”. But what happens when these goals are achieved? You are in the middle of life and suddenly have no goal to work towards. And off you go with the midlife crisis.&lt;/p&gt;

&lt;p&gt;This is where the Impossible List comes in. Joel Runyon set up his Impossible List after graduating from college and it helped him run ultra marathons and much more. The Impossible List is not only set up, but also made publicly available online and can therefore be viewed by everyone. If you look at &lt;a href=&quot;/impossible/&quot;&gt;my list&lt;/a&gt;, you will also see that many targets follow similar ones, but with more difficult characteristics. This allows you to track your progress. This is the already mentioned developing character of the Impossible List.&lt;/p&gt;

&lt;p&gt;As someone who wants to do many things, it is often difficult to set the focus. That’s why I use a status for my goals, where you can directly see if I’m working on this entry or not.&lt;/p&gt;

&lt;p&gt;I hope I have sparked your interest in the concept. If you want to build your own Impossible List, I suggest you leave room for iterations. Of course, you can also make your work easier by doing the whole thing digitally. I decided to use AirTable, the tool Joel Runyon also uses. Of course, you can also use any other table editing software.&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Dec 2018 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/why-you-should-write-your-own-impossible-list</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/why-you-should-write-your-own-impossible-list</guid>
        
        <category>self-disciplin</category>
        
        <category>motivation</category>
        
        <category>challenge</category>
        
        
        <category>goals</category>
        
      </item>
    
      <item>
        <title>Learning to program does not have to be easy</title>
        <description>&lt;p&gt;I have been asked all too often which programming language to learn first. And I’ve heard almost the same number of different opinions. Java or C++? Python or C#? Or maybe C?&lt;/p&gt;

&lt;p&gt;High-level programming languages like Java offer the big advantage that the entry hurdle is very low. You can quickly put together a functional application that does what it’s supposed to do. The extensive ecosystem allows you to make rapid progress and concentrate on the functionality of your software. But that’s exactly the point that advocates of programming languages like C or C++ criticize. These are generally referred to as “ more difficult “, which is due to the lack of abstraction of different system concepts. The most common example is probably memory management. While in C the developer himself is responsible for the allocation and release of memory, in Java this task is abstracted from the developer. Although this is an enormous convenience for the developer in later working life, there is a lack of knowledge about what is actually happening in the background for many developers who have only worked with such languages so far.&lt;/p&gt;

&lt;p&gt;One often hears the argument that the processes in the background are not so important and that people should concentrate on the functionality of the software. But that’s the critical point: Once the basic concepts have been understood, the developer will be more careful with objects and will think twice about whether instantiation is necessary or whether access is also possible via already existing objects. In the end, this way of thinking has a direct effect on the performance of the application. Even if current computers are more and more difficult to bring to the limits of their load, this does not mean that this is a goal to achieve.&lt;/p&gt;

&lt;p&gt;At this point I would like to point out again that this article is specifically about learning programming. The later application is on a different page. With regard to the learning process, however, it makes sense to start from scratch and thus understand the most basic principles. Who should be familiar with the details of a programming language and the internal mechanisms, if not a computer scientist?&lt;/p&gt;

&lt;p&gt;During my studies I also started with high-level programming languages (and didn’t touch any of them during my studies), so after my studies I had to invest some time to really understand the different concepts. Since you might feel the same way, I’d like to show you what I think is the best way to get started in programming.&lt;/p&gt;

&lt;p&gt;I don’t think you should start with Java or C# directly, but also not with C. The reason is quite simple: With C as the first programming language you make slow progress and possibly lose the desire to learn quickly. But Java, C# or the like hide essential concepts and are therefore also not suitable for beginners. I think the best solution is the combination: Start with a simple programming language, with which you can make fast progress and see early what you can achieve. But don’t stay too long at this level and then switch to a challenging language like C or C++. Here you will learn the different concepts like variables, memory allocation, collections and so on. Once you understand this, you can eventually switch to higher level abstraction languages.&lt;/p&gt;

&lt;p&gt;If you find this concept interesting, I recommend &lt;a href=&quot;https://www.edx.org/course/cs50s-introduction-computer-science-harvardx-cs50x&quot;&gt;CS50&lt;/a&gt;, Harvard University’s computer science course, which you can take online for free.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Dec 2018 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/12/learning-to-program-does-not-have-to-be-easy</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/12/learning-to-program-does-not-have-to-be-easy</guid>
        
        <category>learning</category>
        
        <category>development</category>
        
        <category>programming</category>
        
        <category>course</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Announcing MTG LifeCounter V2</title>
        <description>&lt;p&gt;With my LifeCounter app for Magic The Gathering, I released my first Android app on the Google PlayStore over two years ago. Besides my first release, this was also another milestone for me: My first real app. Over two years later, I am proud to announce a completely revamped version of the app. Several complete revisions have taken place in the meantime and I’m already planning the next one, as I admittedly tried to learn the MVP pattern with the app and now, a few months later, I’m completely dissatisfied and want to switch to MVVM. But that doesn’t really matter at the moment.&lt;/p&gt;

&lt;p&gt;Today I announce the release of version 2.0, providing major improvements and enhancements. If the player only had the possibility to manage health points in a 2-player game so far, now up to four players can be served in parallel. In addition there are other features like a dice function for a 20-sided dice, a counter manager to organize counters on individual cards and the adjustment of various values such as the standard colors of the game areas.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/2018/lifecounter_v2.png&quot; data-lightbox=&quot;MTG LifeCounter V2&quot;&gt;&lt;img src=&quot;/assets/2018/lifecounter_v2.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have decided to offer a paid Pro version in addition to the standard version. Quite simply for the reason that in the meantime a lot of work went into the creation of the app and I would like to compensate at least parts of my expenses with it again. V2 will be released in the PlayStore in the course of the next week.&lt;/p&gt;

&lt;h2 id=&quot;4-player-mode&quot;&gt;4 Player Mode&lt;/h2&gt;

&lt;p&gt;Probably the biggest innovation of the app is the 4-player mode. The mode can be started via the menu which can be dragged sideways into the app. The view adapts to the screen size. By default, for example, the color selection is displayed above the life points. If the screen of the device is too small, the points are hidden during the customization, so that a certain clarity remains ensured.&lt;/p&gt;

&lt;p&gt;Game scores are saved in both game modes, so opening and closing the app, as well as switching between 2 and 4 player modes, will not result in any loss of scores. The 4-player mode is only available in the Pro version.&lt;/p&gt;

&lt;h2 id=&quot;counter-manager&quot;&gt;Counter Manager&lt;/h2&gt;

&lt;p&gt;Another major innovation is the Counter Manager. You are probably familiar with the problem that tokens to change the attack and defense values of your cards are documented in a complicated manner using a tally sheet. This new feature allows you to manage the values of your cards in a simple and intuitive way. These values will also be saved when you exit the application, so you won’t accidentally delete any entries. This feature is also only available in the pro version.&lt;/p&gt;

&lt;h2 id=&quot;dice&quot;&gt;Dice&lt;/h2&gt;

&lt;p&gt;A rather small innovation is the dice function. Touching the screen displays a random number between one and 20, simulating a 20-sided dice.&lt;/p&gt;

&lt;h2 id=&quot;energy-saving-mode&quot;&gt;Energy Saving Mode&lt;/h2&gt;

&lt;p&gt;Already implemented in earlier app versions, the power-saving mode provides a way for devices with AMOLED technology to darken the large areas during the game. This means the device consumes less power because black pixels do not consume energy.&lt;/p&gt;

&lt;h2 id=&quot;introductory-screen&quot;&gt;Introductory Screen&lt;/h2&gt;

&lt;p&gt;Finally, I’d like to briefly discuss another feature that I can provide thanks to Paolo Rotolo’s AppIntro library. The first time you start the application, you will see an introduction that demonstrates how to use the app and introduces you to the various features. Optionally, this introduction can be recalled from the Preferences pane.&lt;/p&gt;

&lt;h2 id=&quot;questions-answers&quot;&gt;Questions? Answers!&lt;/h2&gt;

&lt;p&gt;You have found suggestions for improvements, ideas, or perhaps an error in the application? I’m always happy to hear from you, preferably by sending an email to feedback@mjurtz.com or via Twitter: @MarcelJurtz. And of course I’m always happy about every review in the PlayStore!&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Nov 2018 07:00:00 +0100</pubDate>
        <link>http://blog.mjurtz.com/2018/11/announcing-lifecounter-v2</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/11/announcing-lifecounter-v2</guid>
        
        <category>android</category>
        
        <category>app</category>
        
        <category>development</category>
        
        <category>programming</category>
        
        <category>sideproject</category>
        
        
        <category>android</category>
        
      </item>
    
  </channel>
</rss>
