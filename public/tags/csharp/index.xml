<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>csharp on Marcel Jurtz</title>
    <link>https://www.mjurtz.com/tags/csharp/</link>
    <description>Recent content in csharp on Marcel Jurtz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 19 Apr 2020 06:00:00 +0000</lastBuildDate><atom:link href="https://www.mjurtz.com/tags/csharp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Editing Zwift Workouts in C#</title>
      <link>https://www.mjurtz.com/posts/2020-04-19-editing-zwift-workouts-in-csharp/</link>
      <pubDate>Sun, 19 Apr 2020 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2020-04-19-editing-zwift-workouts-in-csharp/</guid>
      <description>I&amp;rsquo;ve been using Zwift pretty extensively for the last few months. For anyone unfamiliar: Zwift is a VR Biking platform. That means, you can put your bike on a smarttrainer, connect it to your pc (directly via ant+ / ble or by bridging with your phone), and then you can ride virtual worlds without having to go outside. Sounds not too bad, right?
After a few sessions, just riding became kind of tedious, so I&amp;rsquo;ve tried to do some of the preconfigured workouts.</description>
    </item>
    
    <item>
      <title>Writing .NET Core Desktop Apps with Electron.NET</title>
      <link>https://www.mjurtz.com/posts/2019-01-06-dotnet-core-ui-with-electron/</link>
      <pubDate>Sun, 06 Jan 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2019-01-06-dotnet-core-ui-with-electron/</guid>
      <description>The team behind GitHub has created its own interesting open source projects in addition to the web platform. One of them is Electron, a cross-platform desktop solution used for the Atom editor. Microsoft also uses Electron for Visual Studio Code.
Electron runs with NodeJS, so applications for it are usually written in JavaScript. For .NET developers there is now Electron.NET available, an Electron wrapper for ASP.NET Core applications.
An Electron.NET application hosts the ASP.</description>
    </item>
    
    <item>
      <title>C# Attributes</title>
      <link>https://www.mjurtz.com/posts/2018-12-30-csharp-attributes/</link>
      <pubDate>Sun, 30 Dec 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-12-30-csharp-attributes/</guid>
      <description>During the development with C# you have certainly already encountered attributes, whether consciously or unaware. Today I want to go a little deeper into what attributes are, what kind of them are already present in the .NET framework, and how you can define your own attributes.
Microsoft defines attributes as a powerful way to associate metadata or descriptive information with code. But what exactly does that mean?
Classes have, among other characteristics, fields, methods, properties, but also a state and behavior.</description>
    </item>
    
    <item>
      <title>Garbage Collection in .NET</title>
      <link>https://www.mjurtz.com/posts/2018-09-16-dotnet-garbage-collecion/</link>
      <pubDate>Sun, 16 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-09-16-dotnet-garbage-collecion/</guid>
      <description>Today I would like to give you an overview of how the garbage collector of the .NET framework works. Knowledge of it makes a lot of sense to improve your programming skills regarding object creation and lifetime.
Garbage Collection in General I want to start with some general theory - what is garbage collection and what do I need it for? Garbage collection (GC) is basically a feature that relieves developers of the work of allocating and deallocating memory for their objects.</description>
    </item>
    
    <item>
      <title>Dependency Injection - Overview and Implementation</title>
      <link>https://www.mjurtz.com/posts/2018-07-23-dependency-injection-overview-and-implementation/</link>
      <pubDate>Mon, 23 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-23-dependency-injection-overview-and-implementation/</guid>
      <description>Especially when you are at the beginning of your career as a software developer, you probably know that: You have already picked up the term &amp;ldquo;Dependency Injection&amp;rdquo;, but can&amp;rsquo;t do anything with it directly? Then today&amp;rsquo;s post is for you!
I will introduce you to the principle, functionality and the types of dependency injection. Finally, I&amp;rsquo;ll show you how to write a simple IoC container. And don&amp;rsquo;t worry if you are unfamiliar with the different terms, I will explain everything, you don&amp;rsquo;t need any previous knowledge.</description>
    </item>
    
    <item>
      <title>C# - Getting Started with Attributes</title>
      <link>https://www.mjurtz.com/posts/2018-06-18-csharp-attributes/</link>
      <pubDate>Mon, 18 Jun 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-06-18-csharp-attributes/</guid>
      <description>In todays post I want to show you how to use attributes in C#. I have to apologize in advance, though, as I&amp;rsquo;m going to focus only to a limited extent on why they make sense and what you can use them for, that&amp;rsquo;s a topic for one of the following articles. Nevertheless, I would like to give you a basic understanding so that you can incorporate this concept into your own applications.</description>
    </item>
    
    <item>
      <title>Sideproject - ClubGrid</title>
      <link>https://www.mjurtz.com/posts/2018-06-13-sideproject-clubgrid/</link>
      <pubDate>Wed, 13 Jun 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-06-13-sideproject-clubgrid/</guid>
      <description>It is finally time to announce my latest side project. ClubGrid was originally designed to make it easier for my coach to manage our baseball games. However, the result can be used for clubs of any kind and I hope that I can also help others with my software.
The problem we had was the organization of games and events. Some players posted their acceptance or rejection via Whatsapp, others via Facebook, some via email and others personally.</description>
    </item>
    
    <item>
      <title>C# - Mastering the Basics - The Repository Pattern</title>
      <link>https://www.mjurtz.com/posts/2018-05-13-c-mastering-the-basics-repository-pattern/</link>
      <pubDate>Sun, 13 May 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-05-13-c-mastering-the-basics-repository-pattern/</guid>
      <description>There’s a very large number of articles about the repository pattern out there. Nevertheless, most of them overlap in the description and cause confusion among developers. For this reason I decided to write my own article to document my opinion.
In this article I will first clarify the what and why of the repository pattern. Afterwards I will explain how the pattern can look like in C#.
In his book, Patterns of Enterprise Application Architecture, Martin Fowler describes the Repository Pattern as a “Mediate between the domain and data mapping layers, acting like an in-memory collection of domain objects”.</description>
    </item>
    
    <item>
      <title>C# - Mastering the Basics - Events and Delegates</title>
      <link>https://www.mjurtz.com/posts/2018-04-26-c-mastering-the-basics-delegates-events/</link>
      <pubDate>Thu, 26 Apr 2018 10:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-04-26-c-mastering-the-basics-delegates-events/</guid>
      <description>Delegates and Events are powerful tools in C#, but they can definitely be confusing in the beginning. Todays article covers the basics of this topic and helps you to get comfortable implementing this approach in your own applications.
Delegates I think, the main problem is that delegates are often explained unnecessarily complicated. For this reason, I want to give you an easily understandable introduction. Let&amp;rsquo;s look at a basic delegate declaration:</description>
    </item>
    
    <item>
      <title>C# – Mastering the Basics – Operator Overloading</title>
      <link>https://www.mjurtz.com/posts/2018-01-21-c-mastering-the-basics-operator-overloading/</link>
      <pubDate>Sun, 21 Jan 2018 11:00:20 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-01-21-c-mastering-the-basics-operator-overloading/</guid>
      <description>Most of the built-in operators that are available in C# can be redefined. In todays article, I&amp;rsquo;ll be showing you how you can redefine operators to match your custom classes. Additionally, I&amp;rsquo;ll cover which operators actually can be overwritten.
Redefining Operators
 To create custom functionality for operators in combination with your own classes, you&amp;rsquo;ll simply need to create methods matching a specific pattern. These methods require the usage of the keyword operator, followed by the actual operator you&amp;rsquo;ll want to overwrite.</description>
    </item>
    
    <item>
      <title>C# – Mastering the Basics – Lambda Expressions</title>
      <link>https://www.mjurtz.com/posts/2018-01-18-c-mastering-the-basics-lambda-expressions/</link>
      <pubDate>Thu, 18 Jan 2018 17:52:31 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-01-18-c-mastering-the-basics-lambda-expressions/</guid>
      <description>Are you one of the people who are easily intimidated by complicated-looking things? I felt a little bit like that when I saw lambda expressions for the first time. But let me tell you this: they really only look scary on the very first look. This article covers the basics of using lambda expressions and should be seen as quick introduction rather than extensive documentation.
What are Lambda Expressions? Lambda expressions somehow belong to the anonymous methods.</description>
    </item>
    
    <item>
      <title>Xamarin Debugging over WIFI</title>
      <link>https://www.mjurtz.com/posts/2018-01-10-debugging-xamarin-apps-on-physical-device-over-wifi/</link>
      <pubDate>Wed, 10 Jan 2018 06:00:31 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-01-10-debugging-xamarin-apps-on-physical-device-over-wifi/</guid>
      <description>Xamarin utilizes the Android Debug Bridge (ADB) for debugging on physical devices, which are usually connected over usb. While this feature definitely is useful, it would sometimes be more practical if you could do this over WIFI instead.
Luckily, that is possible! You can simple switch between using USB and TCP/IP for debugging. To get started, you need to connect your device via USB to the computer you&amp;rsquo;re debugging from. I&amp;rsquo;m using Windows, so the commands I&amp;rsquo;ll execute the following commands from the commandline (which runs as an administrator), but since they are adb commands, they should be the same on Linux or macOS.</description>
    </item>
    
    <item>
      <title>C# – Mastering the Basics – Advanced Statements</title>
      <link>https://www.mjurtz.com/posts/2017-12-26-c-mastering-basics-advanced-statements/</link>
      <pubDate>Tue, 26 Dec 2017 13:01:09 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-26-c-mastering-basics-advanced-statements/</guid>
      <description>In todays episode, I&amp;rsquo;ll show you how to use three advanced statements in C#. I&amp;rsquo;ll go over the so-called null-conditional operator, the null-coalescing operator and the ternary operator.
Null-Conditional Operator You can use the null-conditional operator to prevent _NullReferenceException_s. The basic principle of the operator is to return a value if it is not null, and return null if it is. The following code shows you how to use the operator, which is initiated by a question mark, followed by a dot.</description>
    </item>
    
    <item>
      <title>C# – Mastering the Basics - Extension Methods</title>
      <link>https://www.mjurtz.com/posts/2017-12-22-c-mastering-basics-extension-methods/</link>
      <pubDate>Fri, 22 Dec 2017 12:00:58 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-22-c-mastering-basics-extension-methods/</guid>
      <description>In this series, I go over the very basics of the C# programming language. In todays guide, I will focus on writing custom extension methods for existing, prebuilt classes.
You can use extension methods to add custom functionality to classes that are built by others. In my very case, I&amp;rsquo;d like to extend the functionality of the String class to set its first letter to upper case. I already implemented this functionality in my sideproject CryptoFolio, be sure to check out my article on the topic!</description>
    </item>
    
    <item>
      <title>C# – Mastering the Basics – Collections</title>
      <link>https://www.mjurtz.com/posts/2017-12-19-c-mastering-the-basics-collections/</link>
      <pubDate>Tue, 19 Dec 2017 09:30:04 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-19-c-mastering-the-basics-collections/</guid>
      <description>Altough the topic &amp;ldquo;Collections&amp;rdquo; matches programming in general, I&amp;rsquo;ve decided to add it to my series on mastering the basics of C#. For this reason, you will find some content here that is generally applicable, but I will also discuss different language-specific elements.
Collections support several different use cases, e. g. searching through a set for objects with certain properties, or iterating through multiple elements by predefined sorting specifications.
In the first part of this article, I will cover the two basic types of collections in C#, lists and dictionaries.</description>
    </item>
    
    <item>
      <title>Sideproject: CryptoFolio</title>
      <link>https://www.mjurtz.com/posts/2017-12-10-sideproject-cryptofolio/</link>
      <pubDate>Sun, 10 Dec 2017 14:24:38 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-10-sideproject-cryptofolio/</guid>
      <description>Today I would like to introduce my current side project. I&amp;rsquo;m currently developing CryptoFolio, an app that allows you to keep track of your investments in cryptocurrencies.
Functionality &amp;amp; MVP The first release of the application will allow you to view the current rates of the top 100 cryptocurrencies with the highest market capitalization. You can then add investments, where input, output and the date of the transaction is recorded.</description>
    </item>
    
    <item>
      <title>ServiceStack Logging with Slack Integration</title>
      <link>https://www.mjurtz.com/posts/2017-12-06-servicestack-logging-with-slack-integration/</link>
      <pubDate>Wed, 06 Dec 2017 23:30:43 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-06-servicestack-logging-with-slack-integration/</guid>
      <description>Besides my series on how to get started with ServiceStack, I have already published a few articles that are related to the topic, but do not belong directly to the introductory series. In the last such article, I used the example of coinmarketcap.com to show how to access third-party APIs using the C# client.
Today, I&amp;rsquo;ll show you how to use ServiceStacks Logging API and link it to a slack channel.</description>
    </item>
    
    <item>
      <title>Query Coinmarketcap API using ServiceStack</title>
      <link>https://www.mjurtz.com/posts/2017-12-04-query-coinmarketcap-api-using-servicestack/</link>
      <pubDate>Mon, 04 Dec 2017 21:45:36 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-04-query-coinmarketcap-api-using-servicestack/</guid>
      <description>In the first article of my series on using ServiceStack I mentioned the feature of the framework that the individual components can be used independently of each other.
This short article is intended as an example of how the C# client can be used separately from a custom service to communicate with third-party APIs. If you would like to know more about the client specifically, you can read my article on this feature.</description>
    </item>
    
    <item>
      <title>C# Preprocessor Directives</title>
      <link>https://www.mjurtz.com/posts/2017-12-02-c-preprocessor-directives/</link>
      <pubDate>Sat, 02 Dec 2017 15:00:26 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-02-c-preprocessor-directives/</guid>
      <description>You can use preprocessor directives in csharp to provide straightforward instructions to the compiler. For example, these directives allow you to execute certain code elements only under predefined conditions. Another possible field of use is simply the structuring of your source code into blocks, which can be folded in and out of Visual Studio.
In this article I will discuss some of these directives. Preprocessor directives are always started with a #-symbol.</description>
    </item>
    
    <item>
      <title>ServiceStack - Authentication and Authorization</title>
      <link>https://www.mjurtz.com/posts/2017-12-01-servicestack-authentication-and-authorization/</link>
      <pubDate>Fri, 01 Dec 2017 15:00:40 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-12-01-servicestack-authentication-and-authorization/</guid>
      <description>This is the fourth part on my series on how to get started using ServiceStack. Be sure to check out the earlier articles, if you haven&amp;rsquo;t read them already:
 Part 1 - What is ServiceStack and why should I use it? Part 2 - Building a Simple Service Part 3 - Using the C#-Client  Today, I&amp;rsquo;ll be adding basic authentication and authorization to the project we&amp;rsquo;ve created over the last parts.</description>
    </item>
    
    <item>
      <title>ServiceStack - Using the C#-Client</title>
      <link>https://www.mjurtz.com/posts/2017-11-27-servicestack-using-the-c-client/</link>
      <pubDate>Mon, 27 Nov 2017 18:35:13 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-11-27-servicestack-using-the-c-client/</guid>
      <description>After we covered the basics of ServiceStack in part one and how to set up a service in part two of this series. Today we&amp;rsquo;ll go through how the C#-Client can be utilized to make communication between applications even easier. The sourcecode for todays article is available GitHub. If you missed one of the previous parts, feel free to check out Part 1 - What is ServiceStack and why should I use it?</description>
    </item>
    
    <item>
      <title>ServiceStack - Building a Simple Service</title>
      <link>https://www.mjurtz.com/posts/2017-11-25-servicestack-building-simple-service/</link>
      <pubDate>Sat, 25 Nov 2017 19:00:46 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-11-25-servicestack-building-simple-service/</guid>
      <description>This is the second post in my series on building web services with ServiceStack. In the first part, I covered the benefits of using ServiceStack, this article continues with the setup of a basic service and its several components.
In this and the following parts I will create a simple example project to illustrate the use of servicestack. This project will be an expenses tracker. In this part, we will develop the functionality to add expenses and establish an overall balance.</description>
    </item>
    
    <item>
      <title>C# - Mastering the Basics - Application Architecture</title>
      <link>https://www.mjurtz.com/posts/2017-11-25-csharp-architecture-basics/</link>
      <pubDate>Sat, 25 Nov 2017 12:00:05 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-11-25-csharp-architecture-basics/</guid>
      <description>In this series, I discuss the optimization of the basics of programming in C#. This article deals with the basic structure of an application and its different components.
C# Application Architecture The top level always represents the so-called solution. A solution can contain several different projects, whereby a project can be used by different solutions, which allows to reuse source code. Each of a solutions projects compiles into either an executable or a dll.</description>
    </item>
    
    <item>
      <title>What is ServiceStack and why should I use it?</title>
      <link>https://www.mjurtz.com/posts/2017-11-23-what-is-servicestack/</link>
      <pubDate>Thu, 23 Nov 2017 20:00:40 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-11-23-what-is-servicestack/</guid>
      <description>This article is the beginning of a series of articles in which I want to discuss the basics of building web services and designing REST APIs using ServiceStack. This first article discusses the question of what ServiceStack is all about, the benefits of it, and why you should use (or at least try out) this framework. The following articles will then discuss the design of a simple service by using a simple example to illustrate the various possibilities it offers.</description>
    </item>
    
    <item>
      <title>Voxel Explosions in Unity</title>
      <link>https://www.mjurtz.com/posts/2017-11-16-voxel-explosions-unity/</link>
      <pubDate>Thu, 16 Nov 2017 18:00:04 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-11-16-voxel-explosions-unity/</guid>
      <description>This article describes the process of creating voxel explosions in Unity by using particles. For our models, we use MagicaVoxel, but every other tool can be used as well. The final result will look similar to this:
Setting up the test environment For test purposes, I&amp;rsquo;ve set up a basic FPS environment using the built-in CharacterController package. I then added a gun model to the _FirstPersonCharacter _game object, which is located as child element in the hierarchy of the FPSController.</description>
    </item>
    
    <item>
      <title>Touch Controls for Unity Game Development</title>
      <link>https://www.mjurtz.com/posts/2017-11-15-touch-controls-unity-game-development/</link>
      <pubDate>Wed, 15 Nov 2017 18:00:46 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-11-15-touch-controls-unity-game-development/</guid>
      <description>Some time ago, I created this game (online playable version) in Unity, and I wanted to be able to play it on my Android phone. Since the input options on the smartphone are slightly different from those on the pc, a certain amount of adjustments were necessary. I won&amp;rsquo;t go over the specific details on the game mechanics, you can check out these on GitHub, they are described in the README file.</description>
    </item>
    
    <item>
      <title>Decoupling Views in Xamarin</title>
      <link>https://www.mjurtz.com/posts/2017-11-12-decoupling-views-in-xamarin/</link>
      <pubDate>Sun, 12 Nov 2017 10:05:27 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-11-12-decoupling-views-in-xamarin/</guid>
      <description>As a software developer, you&amp;rsquo;ve probably stumbled across old source code you&amp;rsquo;ve written from time to time and you&amp;rsquo;ve just been thinking &amp;lsquo;how the hell can someone come up with such bullshit?&amp;rsquo;. I don&amp;rsquo;t see myself as an exception regarding this topic and just recently had such a case, which I would like to document in this article. More specifically, I want to discuss the decoupling of views under xamarin. The source I use in this article is available on my GitHub profile.</description>
    </item>
    
    <item>
      <title>RESTful Services with ServiceStack - Part 2</title>
      <link>https://www.mjurtz.com/posts/2017-09-23-restful-services-servicestack-part-2/</link>
      <pubDate>Sat, 23 Sep 2017 18:00:14 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-09-23-restful-services-servicestack-part-2/</guid>
      <description>In my last post, I&amp;rsquo;ve set up a basic RESTful service using ServiceStack. This article deals with the implementation of a corresponding functionality on the client side. The application will query the path provided by the server and apply the pre-defined authentication method, requiring the user to log in with username and password before the application delivers the desired content.
Both projects, client and server are located on my GitHub-profile and can be viewed and downloaded there.</description>
    </item>
    
    <item>
      <title>Creating RESTful Services with ServiceStack</title>
      <link>https://www.mjurtz.com/posts/2017-09-21-creating-restful-services-servicestack/</link>
      <pubDate>Thu, 21 Sep 2017 18:00:26 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2017-09-21-creating-restful-services-servicestack/</guid>
      <description>This articles covers the basic usage of ServiceStack, a .NET-framework for creating RESTful services. The framework has a really great documentation, where you can check out all the details.
Configuration To get started, you&amp;rsquo;ll want to create a new ASP.NET project, and load the ServiceStack package via NuGet. Then, you&amp;rsquo;ll have to edit your Web.config to look like the following (mentioned versions may differ from your project):
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt; &amp;lt;!</description>
    </item>
    
  </channel>
</rss>
