<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>development on Marcel Jurtz</title>
    <link>https://www.mjurtz.com/categories/development/</link>
    <description>Recent content in development on Marcel Jurtz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 03 Jan 2021 06:00:00 +0000</lastBuildDate><atom:link href="https://www.mjurtz.com/categories/development/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a CrossFit Workout-App with Node.JS and Vue</title>
      <link>https://www.mjurtz.com/posts/2021-01-03-crossfit-workout-app-with-node-and-vue/</link>
      <pubDate>Sun, 03 Jan 2021 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2021-01-03-crossfit-workout-app-with-node-and-vue/</guid>
      <description>If you follow my blog a bit more closely, you might know that my most time-consuming hobby is triathlon. Strength training in the gym or at home is and remains part of it, but is more a means to an end. Then in October 2020 I had my first experience with CrossFit - (very) short, very intense workouts without too much equipment, leaving you with a feeling like the one you have after finishing a very hard interval session on the running track - I was immediately captivated.</description>
    </item>
    
    <item>
      <title>Resolve Open Generics with ASP.NET Cores DI-Container</title>
      <link>https://www.mjurtz.com/posts/2020-11-10-resolve-open-generics-with-asp-net-core-di-container/</link>
      <pubDate>Tue, 10 Nov 2020 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2020-11-10-resolve-open-generics-with-asp-net-core-di-container/</guid>
      <description>ASP .NET Core already has quite a decent di-container built in. However, there are some quirks you might need to be aware of. In one of my applications, I&amp;rsquo;ve been using a factory pattern to register my views by using open generics. To be more clear about that: I have an Interface IView&amp;lt;TView&amp;gt;, and I want to register all of this interfaces implementations.
As I found out, Microsofts DI-Container currently doesn&amp;rsquo;t support that by default (text me if I&amp;rsquo;m wrong!</description>
    </item>
    
    <item>
      <title>Partial Classes and Methods in C#</title>
      <link>https://www.mjurtz.com/posts/2019-01-13-c-partial-classes-and-methods/</link>
      <pubDate>Sun, 13 Jan 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2019-01-13-c-partial-classes-and-methods/</guid>
      <description>The partial keyword in C# allows you to spread a class definition across multiple files. You&amp;rsquo;ve probably seen this before when you created a WinForms application and viewed the MyForm.Designer.cs file, which contains the properties you define in the Designer. So the Visual Designer stores the entire definition of your user interface in this separate file. The class of your form itself is always marked partial. Files of partial methods must not be in different assemblies and will be merged during compilation.</description>
    </item>
    
    <item>
      <title>Writing .NET Core Desktop Apps with Electron.NET</title>
      <link>https://www.mjurtz.com/posts/2019-01-06-dotnet-core-ui-with-electron/</link>
      <pubDate>Sun, 06 Jan 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2019-01-06-dotnet-core-ui-with-electron/</guid>
      <description>The team behind GitHub has created its own interesting open source projects in addition to the web platform. One of them is Electron, a cross-platform desktop solution used for the Atom editor. Microsoft also uses Electron for Visual Studio Code.
Electron runs with NodeJS, so applications for it are usually written in JavaScript. For .NET developers there is now Electron.NET available, an Electron wrapper for ASP.NET Core applications.
An Electron.NET application hosts the ASP.</description>
    </item>
    
    <item>
      <title>C# Attributes</title>
      <link>https://www.mjurtz.com/posts/2018-12-30-csharp-attributes/</link>
      <pubDate>Sun, 30 Dec 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-12-30-csharp-attributes/</guid>
      <description>During the development with C# you have certainly already encountered attributes, whether consciously or unaware. Today I want to go a little deeper into what attributes are, what kind of them are already present in the .NET framework, and how you can define your own attributes.
Microsoft defines attributes as a powerful way to associate metadata or descriptive information with code. But what exactly does that mean?
Classes have, among other characteristics, fields, methods, properties, but also a state and behavior.</description>
    </item>
    
    <item>
      <title>Using LESS with ASP.NET Core</title>
      <link>https://www.mjurtz.com/posts/2018-12-23-using-less-with-asp-net-core/</link>
      <pubDate>Sun, 23 Dec 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-12-23-using-less-with-asp-net-core/</guid>
      <description>I have already written about the advantages of a CSS preprocessor like LESS in this post. Today I want to show you how you can easily implement support for such a preprocessor in your ASP.NET Core project. I will use Gulp to create the ability to write LESS files and convert them to CSS files so that they can be integrated into the ASP.NET Core application. Finally, I will automate the whole thing so that the LESS file is converted without manual interaction on every build.</description>
    </item>
    
    <item>
      <title>Writing Clean Code</title>
      <link>https://www.mjurtz.com/posts/2018-12-16-writing-clean-code/</link>
      <pubDate>Sun, 16 Dec 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-12-16-writing-clean-code/</guid>
      <description>There are lots of articles and even books about the art of writing clean code. But when exactly is code actually to be considered clean? Today I&amp;rsquo;d like to give you a brief overview of how you can assess and improve your code quality. I should perhaps note that writing good code, and therefore this article, is independent of the programming language used and is rather methodical in nature. However, for more detailed information, I recommend that you really get a book on the subject.</description>
    </item>
    
    <item>
      <title>Semantic Versioning</title>
      <link>https://www.mjurtz.com/posts/2018-10-07-semantic-versioning/</link>
      <pubDate>Sun, 07 Oct 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-10-07-semantic-versioning/</guid>
      <description>Have you ever wondered what kind of methodology you should use to label the releases of your software? Many projects use a structure with three numbers, each separated by a dot. I have good news for you: This structure is very common and well documented. It&amp;rsquo;s called Semantic Versioning and you&amp;rsquo;ll find all the details about it here.
Building Version Identifiers with SemVer Version numbers are structured according to the X.</description>
    </item>
    
    <item>
      <title>Git Workflows</title>
      <link>https://www.mjurtz.com/posts/2018-09-30-git-workflows/</link>
      <pubDate>Sun, 30 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-09-30-git-workflows/</guid>
      <description>Almost all programming projects work with some kind of version control. When I started to work with Git, I used the tool also directly for my private projects. But especially at the beginning I found it hard to structure my commits and branches in a practical way. For this reason I would like to show you some common strategies today, the so-called Git Workflows.
Simple Workflow The simple workflow consists of a single master branch.</description>
    </item>
    
    <item>
      <title>Garbage Collection in .NET</title>
      <link>https://www.mjurtz.com/posts/2018-09-16-dotnet-garbage-collecion/</link>
      <pubDate>Sun, 16 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-09-16-dotnet-garbage-collecion/</guid>
      <description>Today I would like to give you an overview of how the garbage collector of the .NET framework works. Knowledge of it makes a lot of sense to improve your programming skills regarding object creation and lifetime.
Garbage Collection in General I want to start with some general theory - what is garbage collection and what do I need it for? Garbage collection (GC) is basically a feature that relieves developers of the work of allocating and deallocating memory for their objects.</description>
    </item>
    
    <item>
      <title>Dialogs in Xamarin.Forms</title>
      <link>https://www.mjurtz.com/posts/2018-09-09-xamarin-forms-dialogs/</link>
      <pubDate>Sun, 09 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-09-09-xamarin-forms-dialogs/</guid>
      <description>If you already have a little experience in cross-platform development with Xamarin.Forms, you probably know the problem: Navigation between different pages works very well, but there is no easy solution to display dialog boxes overlaying an active page.
Today I want to show you how you can implement this feature in your Xamarin.Forms application. I have created an example project for this purpose, which you can download from my GitHub site.</description>
    </item>
    
    <item>
      <title>TypeScript - Up and Running in 10 Minutes</title>
      <link>https://www.mjurtz.com/posts/2018-09-02-typescript-up-and-running-in-10-minutes/</link>
      <pubDate>Sun, 02 Sep 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-09-02-typescript-up-and-running-in-10-minutes/</guid>
      <description>You are aware of JavaScript, but have never really made friends with the language? Today I would like to show you a first insight into the JS-SuperSet TypeScript, so perhaps you can give JavaScript a second chance.
TypeScript is a SuperSet of JavaScript. SuperSet means that all functionalities of JS are both supported and extended. As the name suggests, the main feature of TypeScript are strongly typed variables. But more on this in a moment.</description>
    </item>
    
    <item>
      <title>Building an MVP - You are doing it wrong</title>
      <link>https://www.mjurtz.com/posts/2018-08-26-mvp_youre_doing_it_wrong/</link>
      <pubDate>Sun, 26 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-08-26-mvp_youre_doing_it_wrong/</guid>
      <description>The term MVP - Minimum Viable Product is no longer a new word. The term was first coined by Frank Robinson in 2001 and is now used very frequently.
The basic idea of an MVP is to make a version of a product available to the customer as quickly as possible. The goal is not to generate sales, but to learn. Of course it&amp;rsquo;s not a bad idea and it&amp;rsquo;s also the intention to earn money with your product, but the idea here is to put yourself in the customer&amp;rsquo;s shoes and better understand their needs and requirements.</description>
    </item>
    
    <item>
      <title>Dockerizing .NET Core Apps</title>
      <link>https://www.mjurtz.com/posts/2018-08-19-dockerizing-net-core/</link>
      <pubDate>Sun, 19 Aug 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-08-19-dockerizing-net-core/</guid>
      <description>I have already written two articles about the basics of Docker. While these should provide a general overview of you technology, I would like to illustrate a concrete application example today. I will show you the whole process, from writing a simple application to using it in the form of a Docker Container.
If you haven&amp;rsquo;t read my previous articles, you may not have the idea why you should use Docker at all.</description>
    </item>
    
    <item>
      <title>Agile - Get Started with Kanban</title>
      <link>https://www.mjurtz.com/posts/2018-07-21-agile-get-started-with-kanban/</link>
      <pubDate>Sat, 21 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-21-agile-get-started-with-kanban/</guid>
      <description>After I introduced Scrum in my last article, today will be about Kanban. Like Scrum, Kanban is an agile software development methodology and I have to say that I apply the principles I present today to most of my personal side projects.
Kanban is Japanese and can be translated as &amp;ldquo;billboard&amp;rdquo;. Kanban was first introduced by Toyota in the automotive industry and is now mostly associated with just-in-time concepts. But I don&amp;rsquo;t want to bore you with historical details, I want to show you the usage in software development.</description>
    </item>
    
    <item>
      <title>Agile - Get Started with Scrum</title>
      <link>https://www.mjurtz.com/posts/2018-07-15-agile-get-started-with-scrum/</link>
      <pubDate>Sun, 15 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-15-agile-get-started-with-scrum/</guid>
      <description>As a software developer you are certainly aware of Scrum. You may have already used Scrum or heard about it only marginally. With this article I would like to give you an overview of what Scrum is and how you can apply this methodology. Plus: You can also use many of the principles even for working on your side projects alone or in a small group.
Scrum is probably the best known process model of agile software development.</description>
    </item>
    
    <item>
      <title>Docker - Installation and First Steps</title>
      <link>https://www.mjurtz.com/posts/2018-07-08-docker-installation-and-first-steps/</link>
      <pubDate>Sun, 08 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-08-docker-installation-and-first-steps/</guid>
      <description>After outlining the theory behind container management with Docker in last week&amp;rsquo;s article, I would like to continue the topic in a more hands-on way today.
I&amp;rsquo;ll show you the installation and the first steps in Docker. Let&amp;rsquo;s get started!
Installation Docker is available for Windows, Linux and Mac OS. For the download you&amp;rsquo;ll need to sign up for a free account.
I would like to point out that the Windows version is not intended for production use, only for development and testing.</description>
    </item>
    
    <item>
      <title>Getting Started with Docker</title>
      <link>https://www.mjurtz.com/posts/2018-07-01-docker-getting-started/</link>
      <pubDate>Sun, 01 Jul 2018 06:00:00 +0000</pubDate>
      
      <guid>https://www.mjurtz.com/posts/2018-07-01-docker-getting-started/</guid>
      <description>As a software developer, you&amp;rsquo;ve probably heard about Docker and perhaps already used it. But if you&amp;rsquo;re like me, you&amp;rsquo;ve been observing the topic from a distance with some interest, but you haven&amp;rsquo;t gotten into it yet.
In this article I would like to introduce you to the concept of docker and the &amp;ldquo;big picture&amp;rdquo;. This post will not be a detailed tutorial, but will give you an overview of the technology and help you get started.</description>
    </item>
    
  </channel>
</rss>
