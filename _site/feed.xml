<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcel Jurtz</title>
    <description>A software developers blog.
</description>
    <link>http://blog.mjurtz.com/</link>
    <atom:link href="http://blog.mjurtz.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Sep 2018 16:31:26 +0200</pubDate>
    <lastBuildDate>Sun, 09 Sep 2018 16:31:26 +0200</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Dialogs in Xamarin.Forms</title>
        <description>&lt;p&gt;If you already have a little experience in cross-platform development with Xamarin.Forms, 
you probably know the problem: Navigation between different pages works very well, 
but there is no easy solution to display dialog boxes overlaying an active page.&lt;/p&gt;

&lt;p&gt;Today I want to show you how you can implement this feature in your Xamarin.Forms application. 
I have created an example project for this purpose, which you can download from my 
&lt;a href=&quot;https://github.com/MarcelJurtz/XamarinDialogDemo&quot;&gt;GitHub site&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I first create a new Cross-Platform project in Visual Studio. 
I start without a template (blank) and use .NET standard for the shared code base. 
After the project is initialized, I add the plugin for the dialogs to all projects. 
You can find it via &lt;a href=&quot;https://www.nuget.org/packages/Rg.Plugins.Popup/&quot;&gt;Nuget&lt;/a&gt;. 
The project is also open source on &lt;a href=&quot;https://github.com/rotorgames/Rg.Plugins.Popup&quot;&gt;GitHub&lt;/a&gt;. 
To add a Nuget package to your projects, mark the project (or solution) and select the entry 
&lt;em&gt;Manage NuGet Packages&lt;/em&gt;. Select all projects of your solution to install the package.&lt;/p&gt;

&lt;p&gt;The first thing to do is to initialize the package. This takes place in the platform-specific projects. 
For Android, open the MainActivity.cs file and add the following to your &lt;em&gt;OnCreate()&lt;/em&gt; method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Rg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
    &lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same goes for iOS: Add the following snippet to your &lt;em&gt;FinishedLaunching()&lt;/em&gt;-Method inside the AppDelegate.cs file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Rg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;LoadApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you want to support UWP, the relevant code goes inside the App-class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;Rg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PreviousExecutionState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApplicationExecutionState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Terminated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More detailed information about initializing the plugin can be found in the 
&lt;a href=&quot;https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Getting-started&quot;&gt;projects documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;integrating-dialogs&quot;&gt;Integrating Dialogs&lt;/h2&gt;

&lt;p&gt;Now add a new Content Page to the .NET standard project. This is generated with predefined code, which must be adjusted as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pages.PopUpPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; 
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:pages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PopupDemo.Dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages.PopUpPage&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the foundation of the dialog. I just removed the sample content and added the namespace for the plugin. 
Finally I changed the root element of the page from ContentView to PopUpPage. 
These changes are also required in the code-behind file. 
All you have to do here is change the inheritance from ContentView to PopUpPage.&lt;/p&gt;

&lt;p&gt;Next, I design the content of the dialog window. I want to show the user a simple login dialog, 
so I need input fields for username and password, as well as a button to confirm the input.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; 
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:pages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:animations=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Animations;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PopupDemo.Dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;animations:ScaleAnimation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DurationIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;DurationOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinIn&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinInOut&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;HasBackgroundAnimation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Top&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bottom&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.2&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;12&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Padding=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;Spacing=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;White&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;HorizontalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Entry&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;me@example.com&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Password&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Entry&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;IsPassword=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;

        &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Clicked=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button_Clicked&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;BackgroundColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Orange&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Large&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Submit&quot;&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;TextColor=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;White&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages:PopupPage&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now there is missing only one possibility to display the dialog. 
I added a simple button to my main page and linked it to an event handler that opens the dialog. 
In real applications, you would do this by adding bindings to the ViewModel, 
but I decided to use the quick and dirty variant to keep the example as simple as possible.&lt;/p&gt;

&lt;p&gt;Calling the dialog probably reminds you syntactically of the normal navigation between the pages. 
Closing the dialog works analogously, I wired this part with the EventHandler in the code-behind file of the dialog.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Open Dialog&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PopupNavigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PushAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Close Dialog&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;PopupNavigation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PopAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;animations&quot;&gt;Animations&lt;/h2&gt;

&lt;p&gt;If you now start the application on a device or emulator of your choice, everything should already work. 
Besides the pure dialog functionality, the plugin offers the possibility to animate the dialogs. 
The animation is defined in the XAML code of the dialog. 
You can also find complete documentation for this on the 
&lt;a href=&quot;https://github.com/rotorgames/Rg.Plugins.Popup/wiki/Animations&quot;&gt;projects website&lt;/a&gt;. 
Here it’s a good idea to just play around with the available possibilities, but finally you’ll find a small example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; 
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:pages=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Pages;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:animations=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:Rg.Plugins.Popup.Animations;assembly=Rg.Plugins.Popup&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PopupDemo.Dialog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;animations:ScaleAnimation&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DurationIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;200&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;DurationOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinIn&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;EasingOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SinInOut&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;HasBackgroundAnimation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Top&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;PositionOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Bottom&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleIn=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1.2&quot;&lt;/span&gt;
                                   &lt;span class=&quot;na&quot;&gt;ScaleOut=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/pages:PopupPage.Animation&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/xgXXz-FT2I4?rel=0&quot; frameborder=&quot;0&quot; allow=&quot;autoplay; encrypted-media&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</description>
        <pubDate>Sun, 09 Sep 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/09/xamarin-forms-dialogs</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/09/xamarin-forms-dialogs</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>programming</category>
        
        <category>xamarin</category>
        
        <category>cross-platform</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>TypeScript - Up and Running in 10 Minutes</title>
        <description>&lt;p&gt;You are aware of JavaScript, but have never really made friends with the language? 
Today I would like to show you a first insight into the JS-SuperSet TypeScript, 
so perhaps you can give JavaScript a second chance.&lt;/p&gt;

&lt;p&gt;TypeScript is a SuperSet of JavaScript. SuperSet means that all functionalities of JS are both supported and extended. 
As the name suggests, the main feature of TypeScript are strongly typed variables. But more on this in a moment.&lt;/p&gt;

&lt;p&gt;TypeScript is developed by Microsoft and was initiated by MS employee Anders Hejlsberg, who had already designed C#. 
TypeScript files typically end with the extension .ts and can be converted to JavaScript using the TypeScript Compiler (tsc). 
Did I also mention that TypeScript is completely open source?&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I use Visual Studio code to design the example in this article. Of course you can use any other editor as well. 
My application is also based on NodeJS, which you can download from the project’s website or via the package manager of your choice.&lt;/p&gt;

&lt;p&gt;In short, NodeJS is a way to run JavaScript on the server side. This allows you to use your applications without a browser. 
After you have installed Node, you should install the typescript package, which gives you access to the TS compiler. 
You can use the Node Package Manager (npm) to install packages. 
To do so, open a terminal window of your choice and enter the command &lt;em&gt;npm install -g typescript&lt;/em&gt;.
The -g flag specifies that the package should be installed globally instead of only in the current directory, 
so that the TS compiler is now available to you from anywhere.&lt;/p&gt;

&lt;h2 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h2&gt;

&lt;p&gt;Let’s start with an example. How could it be otherwise, we will develop our Hello World application in TypeScript. 
Next snippet is all we need:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, variables are declared with the keyword var as in JavaScript. 
However, the type of variable follows the name of the variable, separated by a colon. 
TypeScript provides three basic types: string for strings, 
number for numeric values (always represented by a 64-bit floating point number) and boolean for logical values. 
Here, too, we will go into more detail in a moment, but now we would like to know how to get our program up and running.&lt;/p&gt;

&lt;p&gt;Currently you should have a directory containing a single .ts file. 
To generate a JavaScript file from it, we call the TS compiler from a terminal and pass our script to it. 
In my case it looks like this: tsc main.ts.&lt;/p&gt;

&lt;p&gt;If everything is ok, a new file will be created with the same name as our .ts file. 
Now, however, with the.js extension. The new file contains the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Admittedly, there is hardly any difference here. 
You can see, however, that the typing is no longer applied. The new JavaScript file can now be used with Node. 
Here, too, the terminal is used to invoke the program: node main.js.&lt;/p&gt;

&lt;p&gt;This creates the “Hello World!” output we are looking for.&lt;/p&gt;

&lt;p&gt;The TypeScript compiler also helps you to avoid errors. For example, if you try to assign a text to a variable of type &lt;em&gt;number&lt;/em&gt;, 
you will receive the following error message when compiling:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;main.ts&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3,5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: error TS2322: Type &lt;span class=&quot;s1&quot;&gt;'&quot;test&quot;'&lt;/span&gt; is not assignable to &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'number'&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Depending on which editor or plugins you are using, you will be notified during development. 
VS code, for example, shows you directly the displays the corresponding error message.&lt;/p&gt;

&lt;p&gt;Of course, this is only the tip of the iceberg, but we want to start small.&lt;/p&gt;

&lt;p&gt;Your first piece of TypeScript is ready - but you certainly can’t do too much with it yet. 
My goal for this article was to give you a basic idea of TypeScript and give the language a chance. 
With Microsoft in the background, TypeScript has a strong backing company and offers great potential, especially for C# developers, 
since learning the language should be much easier than using JavaScript directly.&lt;/p&gt;

&lt;p&gt;If you would like to learn more about TypeScript, the language has extensive documentation. 
I have also planned a follow-up article for the next steps.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Sep 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/09/typescript-up-and-running-in-10-minutes</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/09/typescript-up-and-running-in-10-minutes</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>programming</category>
        
        <category>typescript</category>
        
        <category>javascript</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Building an MVP - You are doing it wrong</title>
        <description>&lt;p&gt;The term MVP - Minimum Viable Product is no longer a new word. 
The term was first coined by Frank Robinson in 2001 and is now used very frequently.&lt;/p&gt;

&lt;p&gt;The basic idea of an MVP is to make a version of a product available to the customer as quickly as possible. 
The goal is not to generate sales, but to learn. 
Of course it’s not a bad idea and it’s also the intention to earn money with your product, 
but the idea here is to put yourself in the customer’s shoes and better understand their needs and requirements. 
This allows you to use early feedback and improve the quality of your product.&lt;/p&gt;

&lt;p&gt;As you can see, the concept is very simple. But the problem arises during implementation. 
When we develop a product, we usually already have a fairly clear idea of what the final result should look like. 
To define how the associated MVP should look, we start cutting features at various points.&lt;/p&gt;

&lt;p&gt;The result of this process is then certainly minimal, but is it also viable? 
Many teams forget this point and develop a prototype with limited functionality, which is simply not usable. 
As I mentioned in my article about &lt;a href=&quot;/2018/07/agile-get-started-with-scrum&quot;&gt;Scrum&lt;/a&gt;, the goal of every sprint is to add a working increment to the product. 
After each iteration the user should have a basic version of his product, enhanced by features of the last sprint.&lt;/p&gt;

&lt;p&gt;The easiest way to illustrate this is with an example: 
If you want to sell a vehicle to someone, there are (in theory) different levels, each working standalone. 
From a scooter, a bicycle and a motorcycle to a car, each level has its own functionality that offers the customer added value. 
Also, each level adds features and functionality to the previous version.&lt;/p&gt;

&lt;p&gt;The approach, which you might find in practice however, could look more like this: 
The customer receives the tires first, then the mounted underbody, through the body to the fully assembled car. 
So you can only really do something with the end product.&lt;/p&gt;

&lt;p&gt;So when developing a prototype, keep the goal of adding value in mind. Updates should complement and improve the functionality, 
but the original product should already be usable.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Aug 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/08/mvp_youre_doing_it_wrong</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/08/mvp_youre_doing_it_wrong</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>management</category>
        
        <category>prototyping</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Dockerizing .NET Core Apps</title>
        <description>&lt;p&gt;I have already written two articles about the basics of Docker. 
While these should provide a general overview of you technology, I would like to illustrate a concrete application example today. 
I will show you the whole process, from writing a simple application to using it in the form of a Docker Container.&lt;/p&gt;

&lt;p&gt;If you haven’t read my previous articles, you may not have the idea why you should use Docker at all. 
For a full explanation, I refer to my other articles which you can check out 
&lt;a href=&quot;/2018/07/docker-getting-started&quot;&gt;here&lt;/a&gt; and 
&lt;a href=&quot;/2018/07/docker-installation-and-first-steps&quot;&gt;here&lt;/a&gt;. 
However, I would still like to comment briefly on the idea. Imagine you are writing a.NET application. 
To use your application you now need a special version of the.NET framework, 
as well as possibly a suitable database and other dependencies.&lt;/p&gt;

&lt;p&gt;For larger applications it may well be that just installing and setting up the environment is not a trivial task. 
Over the years, this concept has become simpler, partly through the use of VMs and installation. 
Nevertheless, according to this approach, an application requires a complete VM, which is not really resource-saving.&lt;/p&gt;

&lt;p&gt;Docker allows you to map all dependencies in the form of a docker image. 
This image can later be instantiated as a container, which forms a self-contained, isolated unit. 
You can imagine a container like a VM, but the Docker container does not have its own operating system. 
Starting and stopping a container does not require a complete startup and shutdown of an operating system, 
which significantly reduces the loading times.&lt;/p&gt;

&lt;p&gt;So far so good. Please install Docker first, if you haven’t already done so. You will find instructions on how to do this 
&lt;a href=&quot;/2018/07/docker-installation-and-first-steps&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You have now successfully installed Docker and are ready to go. Before we write our own images, 
I would like to go into the general usage. Docker is available from the command line. 
So on Windows you can use the CMD, Powershell or a counterpart of a third party.&lt;/p&gt;

&lt;p&gt;Docker commands are initiated with the keyword docker. If only this is entered without a subsequent command, 
a list of available commands is displayed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docker version&lt;/em&gt; gives you information about the installed version of Docker. 
You see two entries here,a server and a client version. The server version will mention a Linux-OS. 
During installation you could choose between Linux and Windows containers. 
The Linux containers are selected by default, in this case the containers use the Linux kernel of the host operating system. 
If you are using Windows, Docker will create a minimal Linux VM to serve as host. 
You can see this when you open the HyperV Manager, there you will see an entry with the name MobyLinuxVM.&lt;/p&gt;

&lt;p&gt;You can also change your choice of container technology later by selecting the Docker icon in the system tray. 
The context menu that appears contains an entry for switching from Linux to Windows (and vice versa). 
However, Linux containers are the usual variant and I recommend that you use them, unless you have a special reason for changing.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;docker info&lt;/em&gt; command lists information about the installed images and instantiated containers. 
This list is currently empty because Docker has just been installed. 
The &lt;em&gt;docker run hello-world&lt;/em&gt; command starts the image named hello-world. The procedure here is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The Docker Client first contacts the Docker Engine (also called Docker Daemon), which determines that the image is not locally available.&lt;/li&gt;
  &lt;li&gt;It then searches the Docker Hub (a platform for exchanging Docker images) and downloads the appropriate image.&lt;/li&gt;
  &lt;li&gt;The engine then creates a container containing an application that outputs “Hello World”.&lt;/li&gt;
  &lt;li&gt;This output is sent to the Docker Client, which outputs the text in the console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Downloaded images are kept locally. If you run it again, no new download takes place, the local image is reinstantiated. 
Images can also be downloaded without being executed immediately. Use the command &lt;em&gt;docker pull imagename&lt;/em&gt; to do so.&lt;/p&gt;

&lt;p&gt;With the command &lt;em&gt;docker ps&lt;/em&gt; you can view the running containers. 
Here, however, you must note that some containers are started, fulfill a task and are then ended again. 
Other containers run passively in the background and are not terminated automatically. 
Examples are web servers or database management systems.
To also display paused and stopped containers, use the flag -a. 
You can in general interact directly with specific containers. 
The basis for this is always the container ID, an alphanumeric character string with which the container can be uniquely identified. 
However, you do not have to enter the entire ID, the first digits are sufficient until no more mix-ups are possible.&lt;/p&gt;

&lt;p&gt;Images are usually tagged. Tags are used to specify a version of an image. 
If no tag is specified, the latest version is used by default. 
However, this is not recommended, as it can lead to problems with later releases. 
So always try to use a specify a version of images you use. 
To do that, simply add a colon, followed by the version after the name of the image.&lt;/p&gt;

&lt;p&gt;I think that’s enough for now with the basics. Now we will develop our own application with Docker support. 
I am using Visual Studio Code, so the approach will work on all major operating systems.&lt;/p&gt;

&lt;p&gt;With the command &lt;em&gt;dotnet new console&lt;/em&gt; I instantiate a new console application. 
The template creates a Hello-World application, which can be started with the command &lt;em&gt;dotnet run&lt;/em&gt;. 
Next, we’ll take care of linking to Docker.&lt;/p&gt;

&lt;p&gt;First, a dockerfile must be created. Dockerfiles describe the structure of an image and are usually based on other images. 
My application is based on the &lt;em&gt;microsoft/dotnet:2.1-sdk&lt;/em&gt; image. 
The dockerfile is created without a file extension with the name dockerfile on csproj file level and it contains the following content:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-generic&quot; data-lang=&quot;generic&quot;&gt;FROM microsoft/dotnet:2.1-sdk

WORKDIR /app
COPY /bin/debug/netcoreapp2.1/ .

ENTRYPOINT [&quot;dotnet&quot;,&quot;NET_CORE_Docker.dll&quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;NET_CORE_Docker is the name of the project. Now an image must be built based on the docker file. 
This can be done with the command &lt;em&gt;docker built -t net_core_docker .&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The dot at the end defines the current directory as the starting point. 
Net_core_docker is the name of the image, only lowercase letters are allowed.&lt;/p&gt;

&lt;p&gt;The image can now be instantiated with &lt;em&gt;docker run net_core_docker&lt;/em&gt; and the container will be started automatically. 
As expected, the output is &lt;em&gt;Hello World!&lt;/em&gt; Our first project is running!&lt;/p&gt;

&lt;p&gt;Of course you can also work with Visual Studio instead of VS Code. 
Docker support is already implemented here and you can add it to your project by simply right-clicking on the project 
and selecting &lt;em&gt;Add Docker Support&lt;/em&gt;. The docker file is then created automatically.&lt;/p&gt;

&lt;p&gt;Our first.NET core application now runs with Docker. 
Of course, this is not limited to console applications, 
you can also create an ASP.NET core application with Docker support, for example. However, 
this article has shown you how to integrate Docker into the development of.NET Core. 
In addition to deployment, Docker is ideal for test and development environments because you can set up other databases 
or the like without complex installations and compatibility problems with software already installed. 
Containers can be installed in parallel without any problems and thus have access to different options.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Aug 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/08/dockerizing-net-core</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/08/dockerizing-net-core</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Automated Testing</title>
        <description>&lt;p&gt;Todays focus is on how you can test your applications automatically to detect bugs early and improve your code quality.&lt;/p&gt;

&lt;p&gt;I want to introduce you to the concept of automated testing. 
In order to make the content accessible to as many users as possible, 
I will not use code examples and concentrate purely on the underlying idea instead. 
Once you understand them, you will have no problems implementing the concept in the programming language of your choice.&lt;/p&gt;

&lt;p&gt;First of all: What is automated testing and what advantages does it offer?&lt;/p&gt;

&lt;p&gt;Automated testing describes writing code that tests your actual code. 
Your source code consists of the production code and test code.&lt;/p&gt;

&lt;p&gt;Think of how you may test the functionality of your software. 
You start the application and log in with your user account if necessary. 
You navigate to the feature you are working on and perform your tests. 
You repeat that for different possibilities.&lt;/p&gt;

&lt;p&gt;You can see from the short description that the whole process is quite time-consuming. 
Each change requires a new run through the procedure and new functions increase the time exponentially. 
And this is exactly where automation comes into play.&lt;/p&gt;

&lt;p&gt;Automated tests can be performed at the push of a button and repeated as often as required. 
In addition, they run much faster than manual tests. 
The repeatability means that no more time is required to test existing functionality when adding new features. 
Basically, bugs are better found because no test scenarios are forgotten, 
this procedure strengthens confidence in deployment and allows calmer weekends when a release is to be rolled out on Fridays.&lt;/p&gt;

&lt;p&gt;The repeatability of such tests brings another advantage that only becomes apparent at second glance: refactoring, 
i.e. changing code without influencing its functionality, 
is also easier to do. Possible effects of changes on other components of the application can thus be identified directly.&lt;/p&gt;

&lt;p&gt;Finally, you automatically think more about the quality of your code as you write it, 
for example, to handle invalid input.&lt;/p&gt;

&lt;p&gt;In general, tests are divided into three different categories:&lt;/p&gt;

&lt;p&gt;Unit tests test individual entities without external dependencies. 
For example, a single function is tested, but things like database connections etc. are not considered. 
It is only necessary to validate the correctness of the implementation. 
Unit tests are cheap to write and quick to test, but do not provide complete confidence by ignoring dependencies.&lt;/p&gt;

&lt;p&gt;Integration tests test an application under consideration of dependencies. 
These tests are often slower because, external resources may have to be accessed, 
but these tests also provide more confidence in the application.&lt;/p&gt;

&lt;p&gt;The last category is end-to-end testing. These describe the direct execution of an application via its graphical interface. 
By imitating human behavior, the tests are correspondingly slow and can already be broken by minor changes in the source code.&lt;/p&gt;

&lt;p&gt;So much for that. But what exactly is to be tested now? To put it briefly - everything. 
But you should be aware of the so-called test pyramid. From bottom to top you should focus on unit tests, 
then integration tests and finally end-to-end tests. 
The latter, for example, does not make sense for examining borderline cases, but only for core elements of the application. 
Unit tests, on the other hand, are ideal for testing conditions and functional results. 
At this point, however, there are often applications that contain little actual logic and, 
for example, only serve as an intermediate layer between UI and database. 
In this case, integration tests are preferred.&lt;/p&gt;

&lt;p&gt;The basic rule is: deal with gaps in your unit tests with integration tests and use end-to-end tests sparingly. 
However, the exact balance of the three categories always depends on the project.&lt;/p&gt;

&lt;p&gt;The approach of implementing automated tests in software projects is usually similar. 
First you are looking for a testing framework for the programming language of your choice. 
For my part I mostly use C#, well-known representatives are MSTest, NUnit or XUnit. 
But you better focus on the basics, not on a special tool.&lt;/p&gt;

&lt;p&gt;Tests are usually written in their own functions, which are executed and evaluated by a Test Runner integrated in the test framework. 
The functions are usually based on the Triple-A pattern (Arrange-Act-Assert) and are named according to a constant scheme. 
This schema usually contains the method name of the function to be tested as well as input parameters or expected result values.&lt;/p&gt;

&lt;p&gt;Detailed information on the design of tests can be found on the Internet in sufficient detail for the language relevant to you.&lt;/p&gt;

&lt;p&gt;I would like to conclude, however, by referring to a concept based fundamentally on the use of automated tests: Test Drive Development (TDD).&lt;/p&gt;

&lt;p&gt;TDD describes a programming concept according to which tests are written before the actual code. 
The idea is to write a test that tests imaginary source code. Since this is not yet available, 
the test will fail (or not compile at all, depending on the language). 
Then the minimum code is written with which the test runs successfully. 
If required, refactoring takes place afterwards. 
The advantage of this concept is testable source code right from the start, 
as well as full code coverage (proportion of code covered by tests). 
Due to the concept of minimalism, TDD often results in a simpler implementation.&lt;/p&gt;

&lt;p&gt;You now have a general overview of the idea behind automated tests in software development 
and I hope I have given you enough motivation to try out the concept. 
And if you’re working on the details, the keyword ‘mock’ might also help. 
Mocks are representatives of components of an application that, for example, 
simulate a database connection and thus facilitate integration tests. Happy testing!&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Aug 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/08/automated-testing</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/08/automated-testing</guid>
        
        <category>development</category>
        
        <category>methodology</category>
        
        <category>programming</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>How I Learn Anything Quickly</title>
        <description>&lt;p&gt;As a software developer, you are probably well aware of the feeling: 
You are overwhelmed by the amount of interesting stuff you want to test and learn. 
But I’m sure that this problem is also very common in other fields.&lt;/p&gt;

&lt;p&gt;If you feel like me, you may read and watch various books, blog articles or online courses, 
but you won’t really keep much of their contents.&lt;/p&gt;

&lt;p&gt;In today’s article, I’d like to help you to learn more effectively about the topics that really interest you, wasting less time.&lt;/p&gt;

&lt;p&gt;I apologize in advance for all my personal examples coming from my projects as a software developer, 
but I’m sure you can draw parallels and transfer my experience to your own even without the appropriate knowledge.&lt;/p&gt;

&lt;p&gt;Before we dive in, I would like to introduce you to a tool that has often helped me when I was looking for an initial idea of a topic: 
learn-anything.xyz is a website that lists sources based on a keyword that offers you learning materials. 
There are many different topics and it can’t hurt to drop by here.&lt;/p&gt;

&lt;p&gt;Before I restructured my learning flow, I used to google for “How to learn XY” and work through the first tutorial I could find. 
You can certainly imagine that this is not really effective. Often the contents are outdated, incomplete or just incorrect. 
Another problem I often had is watching video tutorials without trying out the acquired skills directly. 
Based on the idea “That looks easy” I watched the whole video and didn’t even get a simple “Hello World” application to run afterwards.&lt;/p&gt;

&lt;p&gt;I have fundamentally revised my process of learning new things. My new concept can be described in a single sentence:&lt;/p&gt;

&lt;p&gt;Don’t learn without a reason&lt;/p&gt;

&lt;p&gt;Don’t learn anything just because it’s hip or because everyone else seems to use it. 
Learn something because you are enthusiastic about it and, more importantly, because you have a real application for it. 
Vice versa, of course, if you have an idea for something, you can also use this opportunity to learn something new, 
i.e. to implement it with a different technology or something similar.&lt;/p&gt;

&lt;p&gt;For example, I had the idea to write a simple app to manage lists. The application should only be able to manage shopping lists, 
for example, as efficiently and uncomplicatedly as possible. 
The apps I found on this topic were simply too bulky and cumbersome for my application, which is why I decided to write my own.&lt;/p&gt;

&lt;p&gt;I took the opportunity to improve my knowledge in Android development. 
I’ve hardly ever worked with the integrated SQLite database on Android, 
and I’ve decided to try an OR mapper that I’ve only read a little about so far 
(For everyone who’s interested: Room for Android, 
I’ve got a post on the topic &lt;a href=&quot;https://blog.mjurtz.com/2018/02/introduction-to-room-for-android/&quot;&gt;here&lt;/a&gt;. 
For those who don’t know: an OR mapper is used to transfer data records between an application and a database).&lt;/p&gt;

&lt;p&gt;You can see the result &lt;a href=&quot;https://blog.mjurtz.com/2018/03/sideproject-sist/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So come up with an idea you need to learn what you’re interested in. 
Then learn exactly what you need to get ahead with the implementation. 
This gives you the best opportunity to apply what you have learned and to check immediately whether you have really understood it. 
At the same time, you have a concrete goal in mind as you learn so that you are able to improve measureming your progress.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;My concept of learning things quickly and effectively can be summed up in one sentence: Don’t study without a reason.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Set yourself a specific goal to work towards&lt;/li&gt;
  &lt;li&gt;Break down your goal into small work units&lt;/li&gt;
  &lt;li&gt;Start with the seemingly simple things&lt;/li&gt;
  &lt;li&gt;Learn something when you need it and can put it into practice right away&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you can’t think of anything to take as your goal, you can also simply just recreate existing things.&lt;/p&gt;

&lt;p&gt;Finally, you don’t have to learn every facet of something. 
The important thing - which you will also learn through this concept - is the ability to ask the right questions. 
In most cases you will be able to find details within a very short time that you don’t have in mind.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/learn-anything-quickly</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/learn-anything-quickly</guid>
        
        <category>learn</category>
        
        <category>self</category>
        
        <category>methodology</category>
        
        <category>programming</category>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>Dependency Injection - Overview and Implementation</title>
        <description>&lt;p&gt;Especially when you are at the beginning of your career as a software developer, you probably know that: 
You have already picked up the term “Dependency Injection”, but can’t do anything with it directly? 
Then today’s post is for you!&lt;/p&gt;

&lt;p&gt;I will introduce you to the principle, functionality and the types of dependency injection. 
Finally, I’ll show you how to write a simple IoC container. And don’t worry if you are unfamiliar with the different terms, 
I will explain everything, you don’t need any previous knowledge. 
However, certain basic knowledge in software development is definitely an advantage today. 
My code examples are written in C#, but you will have no problems understanding them if you are used to another programming language.&lt;/p&gt;

&lt;h2 id=&quot;what-is-dependency-injection&quot;&gt;What is Dependency Injection?&lt;/h2&gt;

&lt;p&gt;Dependency Injection (DI) is a term from the topic area “Inversion of Control” (IoC). 
IoC is a fundamental concept, DI is its implementation. An IoC container is a framework for dependency injection.&lt;/p&gt;

&lt;p&gt;DI is the last point of Robert Martin’s SOLID principle. 
Martin defines that high-level modules should not depend on low-level modules, instead an abstraction level should be used. 
The easiest way to get a grasp on the concept is to look at an example: 
Let’s think of a program which processes input from the keyboard and sends it to a printer. 
This can be implemented by combining a class “printer” and “keyboard”. So far, so good. 
However, this approach becomes problematic if the code should be extended, for example to support other input or output devices.&lt;/p&gt;

&lt;p&gt;Martin’s solution is to use abstraction layers that could be implemented as follows: 
Instead of the communication between the concrete classes “printer” and “keyboard”, 
the abstractions “reader” and “writer” are used. These can be base classes, from which the concrete classes then inherit. 
The program flow only requires access to the base class, the implementation details are irrelevant. 
Changes and extensions are now possible without any problems.&lt;/p&gt;

&lt;h2 id=&quot;and-what-is-inversion-of-control&quot;&gt;And what is Inversion of Control?&lt;/h2&gt;

&lt;p&gt;IoC is the underlying concept behind DI. As the name suggests, there is a inversion of control flow in the program. 
Different use cases are imaginable, for example inversion of control over the flow of the application, 
but also inversion of control over instantiation and binding of dependencies.&lt;/p&gt;

&lt;p&gt;The first of these cases can be thought of as a comparison between a typical console application and a GUI application. 
The console application determines the process flow and waits for user interaction, 
while the user determines the process flow for the GUI application.&lt;/p&gt;

&lt;p&gt;The second case aims to create required elements before they are required. In concrete terms, 
this means that objects are not created in the class in which they are needed, but before. 
They are then bound using constructor parameters or property setters, for example.&lt;/p&gt;

&lt;p&gt;Other techniques that follow this approach include the factory pattern or the service locator pattern.&lt;/p&gt;

&lt;h2 id=&quot;di-in-action&quot;&gt;DI in Action&lt;/h2&gt;

&lt;p&gt;Enough theory. The best way to understand the concept is to use examples. 
There are three types of dependency injection that I want you to understand:&lt;/p&gt;

&lt;p&gt;Constructor Injection is probably the most commonly used type. 
A class is created and passed to the dependent class using constructor parameters 
instead of being instantiated in the dependent class itself.&lt;/p&gt;

&lt;p&gt;The following example illustrates this with the class User, 
which accepts a constructor parameter of type IContactOption. 
The instance of an implementation of the interface is not created in the class itself, 
but is specified externally. The interface only has a SendMessage method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The second category is the Setter Injection. No constructor parameter is used, but a property, which is set from the outside.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrimaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PrimaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The last category is a little bit more complicated, you will find this form in the real world much rarer than the other two. 
Interface injection is based on the dependent class implementing an interface for setting a variable.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IDependOnContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDependOnContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// …&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, that’s actually it. The implementation of the concept is far less complicated than the theory. 
However, we still lack the concrete application in our project, which will be discussed next. 
But first, I would like to issue a warning:&lt;/p&gt;

&lt;p&gt;DI has a lot of advantages, but you should be careful with its use. 
DI leaks implementation details of your classes and thus contradicts the principle of encapsulation. 
In addition, the corresponding objects are always created before they are even needed. 
Here you should keep an eye on the performance of your application and decide when you really need the approach. 
DI also partially obscures problems in the structure of your classes. 
Testing your applications will be much easier because you can easily pass mocks, 
but you may overlook indications that a class should be divided into two or more components.&lt;/p&gt;

&lt;h2 id=&quot;structure-of-an-ioc-container&quot;&gt;Structure of an IoC Container&lt;/h2&gt;

&lt;p&gt;An IoC container is a framework for implementing dependency injection. 
The basic feature here is the automatic resolution of dependencies via an overall class, the so-called resolver. 
Let’s look at the following implementation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resolver&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ResolveContactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This very simple example returns an EMailContact object for the IContactOption request. 
In practice, of course, you will have several options here, but there is already a problem with this implementation: 
it cannot be extended. Each interface I want to support requires its own method. 
I would prefer an implementation that allows something like: IContactOption contactOption = resolver.Resolve&lt;IContactOption&gt;();&lt;/IContactOption&gt;&lt;/p&gt;

&lt;p&gt;And that is exactly what we want to implement now. 
This can be achieved by creating a Dictionary&amp;lt;Type, Type&amp;gt; to link the interfaces with the appropriate values. 
The entries must be accessible from the outside. 
Then, when requesting an implementation by calling resolve with its interface as argument, 
I will receive an instance of the concrete class.&lt;/p&gt;

&lt;p&gt;To be able to test this more easily, I have adapted my previous classes as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EMailContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;An email has been sent!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
   
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_primaryContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The resolver is implemented as follows: I’ve created  a method for registering classes and interfaces. 
The resolve-part is done by implementing a method that allows instances to be retrieved using the predefined matching rules. 
The resolving process is as follows: The system first checks whether a suitable entry is stored in the dictionary. 
If this is the case, the system checks whether the stored type has constructor parameters that must be instantiated. 
In the case of a default constructor without parameters, the type is instantiated and this instance is returned. 
Otherwise, the constructor parameters are collected and also instantiated. Here, too, the new instance is returned. 
This way, I’m able to support nested objects.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Resolver&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeToResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_registrations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeToResolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KeyNotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetConstructors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;First&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constParams&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetParameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolvedType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;IList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParameterType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To be able to use the container now, only the registration of the relevant types is necessary. This may look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IContactOption&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EMailContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marcel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The parameter IContactOption for User is automatically instantiated and assigned as EMailContact by the mapping. The call in the last line accordingly outputs the text “An email has been sent”.&lt;/p&gt;

&lt;h2 id=&quot;résumé&quot;&gt;Résumé&lt;/h2&gt;

&lt;p&gt;In a real application you will hardly implement your own IoC container, but use existing solutions. 
Nevertheless, I found the own implementation very helpful in order to be able to better understand the actual concept.
If you want to look at the available solutions, Unity (not the gaming engine), 
Castle Windsor and Ninject are probably the most widely used products (for C#). 
However, the way this works is all similar (though not quite as primitive) to our own implementation.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/dependency-injection-overview-and-implementation</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/dependency-injection-overview-and-implementation</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>pattern</category>
        
        <category>IoC</category>
        
        <category>DI</category>
        
        <category>CSharp</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Agile - Get Started with Kanban</title>
        <description>&lt;p&gt;After I introduced Scrum in my last article, today will be about Kanban. 
Like Scrum, Kanban is an agile software development methodology and I have to say that I apply the principles 
I present today to most of my personal side projects.&lt;/p&gt;

&lt;p&gt;Kanban is Japanese and can be translated as “billboard”. 
Kanban was first introduced by Toyota in the automotive industry and is now mostly associated with just-in-time concepts. 
But I don’t want to bore you with historical details, I want to show you the usage in software development.&lt;/p&gt;

&lt;p&gt;Before we start, you will certainly want to know what advantages Kanban can offer you: 
Kanban helps you to increase quality and speed up the realisation of tasks as well as to identify and eliminate bottlenecks. 
This is done by minimizing the time that tasks spend in queues.&lt;/p&gt;

&lt;p&gt;There are two basic concepts on which Kanban is based: On the one hand this is visualization, 
on the other hand the limitation of parallel work (Work in Progress, WIP).&lt;/p&gt;

&lt;p&gt;The visualization of the work offers various advantages. Tasks are not forgotten, 
which can reduce stress and make it easier to make good decisions. 
It also simplifies the estimation of how long a task will take to complete.&lt;/p&gt;

&lt;p&gt;Limiting parallel work reduces the waiting time of tasks and thus increases the flow of the process. 
At this point I would like to define two key indicators: Lead time and cycle time.&lt;/p&gt;

&lt;p&gt;Lead time describes the period from receipt of a request to delivery of an associated feature. 
It is therefore the time period that is visible to the user. 
Cycle time describes the duration of a task, starting from the beginning of the work until its result is ready for delivery.&lt;/p&gt;

&lt;p&gt;The goal of Kanban is to reduce the response time of a system. This can be achieved in two ways: 
Increasing the throughput of the system or reducing parallel work and thus reducing the time of tasks in queues.&lt;/p&gt;

&lt;p&gt;Let us illustrate this with an example. The workflow of a software company is as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;After a problem is reported (1), it remains in the ticket list until the next meeting (2).&lt;/li&gt;
  &lt;li&gt;At this meeting the relevance of the problem is prioritized, in the following days the solution will be implemented by a developer (3)&lt;/li&gt;
  &lt;li&gt;Next comes the test of the implementation (4), planning of the release (5) and finally the deployment (6)&lt;/li&gt;
  &lt;li&gt;There are always periods of time between these individual stations that are not used to add value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180722_kanban_valuestreammap.png&quot; alt=&quot;Value Stream Map in Kanban&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The following key figures result for this process:
	• Total time (value adding): 6 h 15 min
	• Total waiting time: 20 days
	• Lead Time: 485.25 hours
	• Efficiency: Time (value-adding) / Lead Time = 6.25 / 485.25 = 1.29
	• WIP = Lead Time / Time (value-adding) = 485.25 / 6.25 = 77.64&lt;/p&gt;

&lt;p&gt;As you can see, the efficiency is anything but great. According to Littles Law, there is a WIP of about 78 elements. 
By reducing this to half, the time required could also be reduced to half.&lt;/p&gt;

&lt;p&gt;But now really to software development: 
The idea to use Kanban in software development is to establish a Kanban board to organize tasks. 
Such boards are divided into different columns that define the corresponding stages of a task. 
Typically these are things like “In planning”, “Development”, “Test”, “Deployment”. 
You can see an example of such a board in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180722_kanban_board.png&quot; alt=&quot;Kanban Board Example&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Different tasks are then moved into these columns, with each task going through the development process from left to right. 
As already mentioned, an important principle of Kanban is the limitation of parallel work. 
That is why each column may only contain a certain predefined maximum number of elements. 
If a task spends too long in a certain column, problems with the specific task or bottlenecks in the process can be identified. 
These are then solved as a team, keeping the stress of the people involved at the appropriate points as low as possible.&lt;/p&gt;

&lt;p&gt;The conversion of a kanban board can be carried out both physically and by software. With a physical kanban board, 
the tasks can be displayed with post-items. The advantage here is the ubiquity of the board, 
each team member is always aware of the current status. 
Alternatively, software solutions such as Trello or Jira offer themselves, which follow exactly the same principle, 
whereby tasks can be provided here with task assignments, checklists, deadlines and comments.&lt;/p&gt;

&lt;p&gt;When transferring tasks from one area to the next, it is important to establish a pull system. 
Completed tasks should therefore not be pushed to the next level by the people who have completed them. 
Instead, the employees there should pull the task to themselves.&lt;/p&gt;

&lt;h2 id=&quot;kanban-and-scrum&quot;&gt;Kanban and Scrum&lt;/h2&gt;

&lt;p&gt;Now that you have a rough idea what Kanban is, let’s compare the methodology briefly with Scrum.
Both are concepts of agile software development, but what is the best solution for which purpose?&lt;/p&gt;

&lt;p&gt;Both concepts are based on a pull system. 
Kanban uses this to move tasks to the next area, Scrum using the agreement of user stories for the sprint backlog. 
Both concepts are based on transparency and aim to reduce parallel work to a minimum. 
Scrum implements this rather indirectly, since the requirements that are implemented within a single sprint are clearly defined.&lt;/p&gt;

&lt;p&gt;The product is also constantly being updated and kept release-ready in both approaches. 
The self-organization of the team also plays an important role in both Scrum and Kanban and both concepts require the division 
of requirements into as small subtasks as possible.&lt;/p&gt;

&lt;p&gt;But of course there are also various differences. Kanban does without the iterative model of Scrum, for example, 
tasks run through the entire cycle individually. A Scrum team agrees before each sprint which tasks are to be implemented. 
Kanban, on the other hand, makes these commitments optional.&lt;/p&gt;

&lt;p&gt;Kanban does not prescribe roles like the division into Scrum Master, Product Owner and Team as known from Scrum.&lt;/p&gt;

&lt;p&gt;It is difficult to define exactly when which methodology should be used. 
As in the previous article, it is often the case that none of the methodologies is used in its pure form, 
but a mixed version according to the team’ s requirements.&lt;/p&gt;

&lt;p&gt;Kanban is suitable for various IT use cases. In my opinion, Kanban is a more flexible way of dealing with requirements than Scrum is.
The concept makes sense here for applications where malfunctions and short-term maintenance are to be expected more frequently.
Here, the interval cycles of Scrum are simply too long. 
In addition, Kanban may be easier to implement in corporate structures that still work with the waterfall model, 
since Kanban allows a slow changeover.&lt;/p&gt;

&lt;h2 id=&quot;one-last-thing&quot;&gt;One last thing&lt;/h2&gt;

&lt;p&gt;Finally, in my opinion, Scrum is also excellently suited for the realization of own projects, 
in principle in the form of a function-enhanced TODO list. You can then combine the tasks for yourself with the Pomodoro technique, 
for example, to really make efficient use of your private time.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/agile-get-started-with-kanban</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/agile-get-started-with-kanban</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>methodology</category>
        
        <category>kanban</category>
        
        <category>management</category>
        
        <category>agile</category>
        
        <category>project</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Agile - Get Started with Scrum</title>
        <description>&lt;p&gt;As a software developer you are certainly aware of Scrum. You may have already used Scrum or heard about it only marginally. 
With this article I would like to give you an overview of what Scrum is and how you can apply this methodology. 
Plus: You can also use many of the principles even for working on your side projects alone or in a small group.&lt;/p&gt;

&lt;p&gt;Scrum is probably the best known process model of agile software development. 
It is a collection of definitions and tools for managing projects. Scrum is not a rigid structure, but a flexible toolbox. 
A scrum project team consists of three parties: the product owner, who determines what is to be developed in the next sprint, 
i.e. the next iteration, the development team itself, who is responsible for the implementation and presentation of the results, 
and the Scrum Master, who guarantees the smooth running of the project. Scrum is designed for small, self-organized teams.&lt;/p&gt;

&lt;p&gt;As already mentioned, the project implementation according to Scrum consists of several iterations, so-called sprints. 
A sprint typically lasts between one and four weeks and is used to prioritize selected user stories 
(formulated system requirements formulated from the user’s perspective) from the product backlog 
(all requirements for the project), transfer a selection of these into the sprint backlog 
(collection of requirements for processing in the current sprint) and implement them.&lt;/p&gt;

&lt;p&gt;This prioritization and selection of requirements is called Sprint Planning. 
Although the requirements are set by the product owner, they are agreed with the team during the planning phase. 
This should ensure that the planned requirements are also realistic and feasible.&lt;/p&gt;

&lt;p&gt;During the sprint the Daily Scrum takes place daily, a short meeting to discuss the current status and to clarify possible problems.&lt;/p&gt;

&lt;p&gt;After a sprint has been completed, the sprint review takes place in which the team, together with the product owner, 
validates the various requirements and checks their fulfillment. This is followed by the Sprint Retrospective, 
in which the Scrum team discusses the cooperation with the Scrum Master and defines suggestions for improvement. 
The result of the sprint is delivered as an “increment” and the process starts again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/2018/20180715_scrum_workflow.png&quot; alt=&quot;Basic Scrum Workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To summarize the most important terms in a nutshell:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scrum is a collection of agile software development methods for project planning and implementation&lt;/li&gt;
  &lt;li&gt;The product owner defines the goals of the project and validates their achievement&lt;/li&gt;
  &lt;li&gt;User Stories are the requirements described by the product owner, which are defined from the customer’s point of view&lt;/li&gt;
  &lt;li&gt;The Scrum Master is a member of the team, which deals with the elimination of problems and thus enables the team to work with the best possible efficiency.&lt;/li&gt;
  &lt;li&gt;The product backlog contains a collection of all project requirements&lt;/li&gt;
  &lt;li&gt;The Sprint Backlog contains a selection of these requirements that are to be implemented in the current sprint. 
Prioritization and selection is made by the product owner, the team agrees to the selection&lt;/li&gt;
  &lt;li&gt;Daily Scrum is the daily briefing of the team to discuss possible problems and obstacles.&lt;/li&gt;
  &lt;li&gt;Sprint planning is the planning of the sprint before its execution, which usually takes a complete day (so much for “Agile software development does without extensive planning”)&lt;/li&gt;
  &lt;li&gt;Sprint Review is the final discussion and presentation of results after a sprint with the product owner&lt;/li&gt;
  &lt;li&gt;The Sprint Retrospective takes place after the Sprint Review and serves as an agreement within the team regarding points for improvement&lt;/li&gt;
  &lt;li&gt;An increment is the result of a sprint, which is part of the project result, i.e. the product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So much for the rough plan. But what does Scrum have to offer? And why should I use Scrum and not another agile development methodology? 
First of all: Most teams do not work strictly according to a specific agile methodology such as Scrum or Kanban, 
but roughly follow one and adapt it to the individual needs. 
So if you choose to use Scrum, that doesn’t mean you can’t make customizations or add your own tools.&lt;/p&gt;

&lt;p&gt;In general, working according to agile principles does not always make sense. 
The resulting self-responsible way of working does not suit every team and does not make sense for all tasks. 
Nevertheless, there are also many scenarios where the application of the appropriate methodology can make sense.&lt;/p&gt;

&lt;p&gt;There are some disadvantages of agile methodology, which I would now like to discuss. 
Agile methods require a strong involvement of the customer. 
The product owner is usually an employee of the customer who is very familiar with the project. 
However, if the partner company is not or only little familiar with agile methods, 
it is often not easy to convey to the customer why he should spend a not inconsiderable amount of his employee’s time on the project. 
It is very important to give the customer an understanding of the procedure and to actively involve him.&lt;/p&gt;

&lt;p&gt;It is also essential to understand the basics and use agile methods, not only the convenient ones, 
but also those that may seem annoying in the beginning. Another point is the culture of intolerance to mistakes often found in larger, 
older farms. Mistakes are important because you learn from them and thus improve. 
These errors must be communicated in a team and possible solutions discussed. 
If members are afraid to express their concerns and problems, a Scrum project will most likely fail.&lt;/p&gt;

&lt;p&gt;Teams that are new to this approach may also be unsure about the flat hierarchies and the apparent lack of responsibilities. 
Here it can help to integrate an experienced Scrum-Master into the team.&lt;/p&gt;

&lt;p&gt;Scrum does not define any concrete recommendations for action, but only principles and methods that can be applied. 
The exact selection and structure is then left to the team, 
which is certainly also an obstacle in initial contacts with agile software developers.&lt;/p&gt;

&lt;p&gt;Nevertheless, there are some advantages that Scrum offers compared to classical methods: The rules are quick and easy to learn. 
To use Scrum in a team, no extensive training is required, the principles are easy to learn and can be introduced quickly. 
The communication channels are short and flexible, 
which means that changes can be reacted to quickly and problems can be contained quickly.&lt;/p&gt;

&lt;p&gt;The high level of transparency due to the high degree of communication and the continuous improvement process ensures 
that problems are dealt with quickly and thus enables the team to be highly efficient.&lt;/p&gt;

&lt;h2 id=&quot;résumé&quot;&gt;Résumé&lt;/h2&gt;

&lt;p&gt;Finally, the choice of methodology is not a general one, but depends on many different conditions, both for the team and the project. 
And in terms of agile software development, there is not only Scrum. 
Hopefully this article gave you a rough overview of the approach with Scrum. 
In a follow-up post I will describe alternative concepts so that you can form your own picture and decide what is best for your project. 
However, in my experience I prefer Scrum over for example Kanban when working with a larger team. For personal and smaller projects, 
I usually use Kanban. But that’s the topic for the next post. Stay tuned!&lt;/p&gt;
</description>
        <pubDate>Sun, 15 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/agile-get-started-with-scrum</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/agile-get-started-with-scrum</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>methodology</category>
        
        <category>scrum</category>
        
        <category>management</category>
        
        <category>agile</category>
        
        <category>project</category>
        
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Docker - Installation and First Steps</title>
        <description>&lt;p&gt;After outlining the theory behind container management with Docker in last week’s article, I would like to continue the topic in a more hands-on way today.&lt;/p&gt;

&lt;p&gt;I’ll show you the installation and the first steps in Docker. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Docker is available for Windows, Linux and Mac OS. For the download you’ll need to sign up for a free account.&lt;/p&gt;

&lt;p&gt;I would like to point out that the Windows version is not intended for production use, only for development and testing. It runs (currently) on a Mobylinux Hypervisor VM, but a native Win10 application is under development. Nevertheless, you will hardly notice this, the usage feels native and you can work on Windows with a command line of your choice.&lt;/p&gt;

&lt;p&gt;The first command I want to show you is docker info. This will show you information about your installation. If you are using Windows, you can see here what I just mentioned: The client specifies Windows as OS, but the server indicates Linux.&lt;/p&gt;

&lt;h2 id=&quot;running-your-first-container&quot;&gt;Running Your First Container&lt;/h2&gt;

&lt;p&gt;Next we want to create and start our first container. We use the following command for this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker run is the command to start a container, followed by the name of the image, in this case hello-world (Tip: If you get a timeout under Windows, try to set the DNS server to fixed in Docker’s network settings, this helped me).&lt;/p&gt;

&lt;p&gt;You will often stumble across the term docker engine. The Docker Engine includes the Docker Client and the Docker Daemon. The client makes API calls to the daemon, which then processes the commands. In my example, the Docker Daemon now looks for an image named hello-world. If this is not found locally, the search is continued in the default registry, usually the docker hub. The image is downloaded (if one is found) from there and started. When a container is stopped, the local copy of the image is retained, so that a later call of it does not require a new download.&lt;/p&gt;

&lt;p&gt;The container has now been started. You can view all active containers with the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker ps &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;With the flag -a you can specify that stopped containers should also be displayed.&lt;/p&gt;

&lt;p&gt;You can also download an image without starting a container immediately:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I generally recommend that you always specify the version of the image you want to load. You can enter the version number separated by a colon after the name of the image. Example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull hello-world:1.2 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To remove an image, use the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker rmi hello-world &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The version number can also be specified here; this is done in the same style as for the pull.&lt;/p&gt;

&lt;h2 id=&quot;creating-your-own-images&quot;&gt;Creating Your Own Images&lt;/h2&gt;

&lt;p&gt;Now I want to create my own image. I want to write a simple PHP hello world application. For this I need a so called dockerfile. These files describe images and serve as a kind of blueprint. For the realization of a PHP application PHP and a compatible web server is required. I will use Apache here, so I need an image with Apache, PHP and my own script. First I need a suitable docker file. Fortunately, I don’t have to write it myself, I can use templates from the Hub.&lt;/p&gt;

&lt;p&gt;On the Docker Hub I can find it by searching for’PHP’ and using one of the entries that lists the keyword’Apache’. You will find here different entries, each with a highly specialized version on the left, to the right the versions become more and more general. I recommend that you use one of the more specialized versions to prevent unwanted updates.&lt;/p&gt;

&lt;p&gt;I decide to use the image with PHP 7.2 and Apache Stretch. The Hub page lists how to handle the template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;FROM php:7.0-apache 
COPY src/ /var/www/html/  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since I want to use PHP 7.2, I update the version number accordingly. This script now corresponds to the content of my docker file. Brief summary: I now have a folder containing my docker file with the above content and another folder ‘src’ containing the index.php with a simple Hello-World script:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello Docker!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker images are ‘layered’. The PHP image is based on other images and so on. Our own image is based on php:7.2-apache. This allows us to keep our docker file short and concise and to include PHP and Apache with just a single line. So our docker file will download the PHP image from Docker Hub, and copy the files from the src folder to the /var/www/html/ directory within the container.&lt;/p&gt;

&lt;p&gt;Now the image must be built. To do this, I use the command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; hello-docker &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hello-docker is the name of my image, the -t flag is used to assign a name. At the end you have to specify the path to the docker file. The point references the current directory.&lt;/p&gt;

&lt;p&gt;After the image has been created, it can be started in the form of a new container.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 hello-docker &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The call looks almost like the one we’ve already met. The -p 80:80 addition merely defines that the traffic arriving at port 80 on the host is forwarded to port 80 of the container.&lt;/p&gt;

&lt;p&gt;After the start you can now reach the web server via localhost. Your first own container is now up and running!&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jul 2018 08:00:00 +0200</pubDate>
        <link>http://blog.mjurtz.com/2018/07/docker-installation-and-first-steps</link>
        <guid isPermaLink="true">http://blog.mjurtz.com/2018/07/docker-installation-and-first-steps</guid>
        
        <category>development</category>
        
        <category>software</category>
        
        <category>docker</category>
        
        <category>containers</category>
        
        <category>programming</category>
        
        
        <category>development</category>
        
      </item>
    
  </channel>
</rss>
