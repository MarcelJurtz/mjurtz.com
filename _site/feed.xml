<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Marcel Jurtz</title>
    <description>a developers blog</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 11 Jan 2018 20:21:55 +0100</pubDate>
    <lastBuildDate>Thu, 11 Jan 2018 20:21:55 +0100</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Advanced Git - Git Stash</title>
        <description>&lt;p&gt;In my &lt;a href=&quot;https://blog.mjurtz.com/2017/09/getting-started-git/&quot;&gt;introductory post on git&lt;/a&gt;, I told you that git uses three areas to track changes. Well, maybe I lied to you in this case. There are actually four areas available and I will cover this fourth area in todays post.&lt;/p&gt;
&lt;p&gt;The fourth area is called Stash. Basically, it works like a clipboard to which you can save current changes.&lt;/p&gt;
&lt;h2&gt;Concepts of the Stash ...&lt;/h2&gt;
&lt;p&gt;Imagine the following scenario: You are working on a change. In the middle of your work you remember that you also wanted to do something else. This other change is important and should be handled immediately. However, it cannot be implemented with the uncomitted changes you are currently working on. In short, you need the status of the last commit, but you don't want to discard your current changes and you also can't commit them yet.&lt;/p&gt;
&lt;p&gt;This is where the stash comes in handy. The stash basically allows you to copy the changes that are located in your working area and index and stores them. It also checks out the latest commit so your working area and your index a re in a clean state. You can have multiple of such &lt;em&gt;clipboard contents&lt;/em&gt; on your machine and you can restore each of them individually.&lt;/p&gt;
&lt;h2&gt;... and how to apply them&lt;/h2&gt;
&lt;p&gt;All of the stash commands are initiated by &lt;em&gt;git stash&lt;/em&gt;. To stash the current changes, use &lt;em&gt;git stash save&lt;/em&gt;. For this, you can also simply use &lt;em&gt;git stash&lt;/em&gt; without any suffixes. If you now use &lt;em&gt;git status&lt;/em&gt; to view your changes, you'll see that there are none available and your working area and index are in a clean state.&lt;/p&gt;
&lt;p&gt;You can then use &lt;em&gt;git stash list&lt;/em&gt; to view all the contents of the stash. You'll notice that each entry has an id, which can be used to restore an individual entry. Per default, the most recent entry will be used.&lt;/p&gt;
&lt;p&gt;To restore an entry from the stash, use &lt;em&gt;git stash apply &amp;lt;id&amp;gt;&lt;/em&gt;. This will restore the changes to your working area and index, but the entry will also remain in the stash. To clear all entries from the stash, use &lt;em&gt;git stash clear&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Jan 2018 06:00:26 +0100</pubDate>
        <link>http://localhost:4000//advanced-git-git-stash</link>
        <guid isPermaLink="true">http://localhost:4000//advanced-git-git-stash</guid>
        
        <category>Development</category>
        
        <category>Git</category>
        
        <category>Tools</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>Advanced Git - Git Reset</title>
        <description>&lt;p&gt;In &lt;a href=&quot;https://blog.mjurtz.com/2017/09/getting-started-git/&quot;&gt;one of my earliest posts&lt;/a&gt;, I wrote an introduction to version control, more specifically: git. The topic I will cover today extends this article by a topic which is actually not that complicated. However, people seem to find it hard to deal with it and use it as a highway to StackOverflow.&lt;/p&gt;
&lt;p&gt;I talk about &lt;em&gt;git reset&lt;/em&gt;. This command can be used to reset changes in your working area or to remove staged files from the index. I think that one of the problems here is the context-dependent functionality of the command. Another problem is the commands potentially disruptive character, since it can lead to data loss.&lt;/p&gt;
&lt;h2&gt;Moving the current Branch&lt;/h2&gt;
&lt;p&gt;In general, you can split the commands functionality into two separate parts. First, the command will move the current branch. Let's look at an example. In my current project, I've made some changes that I'd like to reset. In my example, my current commit &lt;strong&gt;25a5d0e&lt;/strong&gt; contains unwanted information and I'd like to return back to the state at commit &lt;strong&gt;ea02e01&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//assets/Reset_History_New-500x540.png&quot; alt=&quot;Git Reset Move Branch&quot; class=&quot;aligncenter wp-image-703 size-medium&quot; width=&quot;500&quot; height=&quot;540&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Of course, this is a very simple example, git reset is not restricted to a single branch. I'd also like to mention, that this operation will lead to commits that don't belong to any branch. In this case, git will automatically detect and delete them using its garbage collection mechanism.&lt;/p&gt;
&lt;h2&gt;Copy Files&lt;/h2&gt;
&lt;p&gt;As I mentioned earlier, the reset command moves the current branch (which is actually a pointer to a specific commit). The second part of its functionality is to optionally copy contents from the repository to the index (also known as &lt;em&gt;staging area&lt;/em&gt;) and the working area.&lt;/p&gt;
&lt;p&gt;To specify where contents should be copied to, you can use the parameters &lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;em&gt;--hard&lt;/em&gt;&lt;/span&gt;, &lt;em&gt;--mixed&lt;/em&gt; or &lt;em&gt;--soft&lt;/em&gt;. First of these copies the contents from the repository to both the index, and the working area. Appending &lt;em&gt;--mixed&lt;/em&gt; will lead to the contents being copied only to the index, not to the working area. When using &lt;em&gt;git reset&lt;/em&gt; without any parameters, this is what will be applied. The last option is to use &lt;em&gt;--soft&lt;/em&gt;, which will prevent any content from being copied. In this case, only the branch-movement-part of the command will be executed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//assets/Reset-500x206.png&quot; alt=&quot;Reset Copy Locations&quot; class=&quot;aligncenter size-medium wp-image-704&quot; width=&quot;500&quot; height=&quot;206&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Working with &lt;em&gt;git reset&lt;/em&gt; is easier than you think. Also, it's definitely helpful to always think of the two components. Doing so, there is another a really cool feature that you may already have seen: You can use &lt;em&gt;git reset&lt;/em&gt; to unstage files. Alternatively to &lt;em&gt;git rm --cached&lt;/em&gt;, you can use &lt;em&gt;git reset HEAD --mixed&lt;/em&gt;, which will overwrite the staged files.&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Jan 2018 19:09:23 +0100</pubDate>
        <link>http://localhost:4000//advanced-git-git-reset</link>
        <guid isPermaLink="true">http://localhost:4000//advanced-git-git-reset</guid>
        
        <category>Development</category>
        
        <category>Git</category>
        
        <category>Productivity</category>
        
        <category>Tools</category>
        
        
        <category>Tools</category>
        
      </item>
    
      <item>
        <title>PGP for Thunderbird</title>
        <description>&lt;p&gt;Today, I'll talk about how you can set up PGP for Thunderbird. PGP (Pretty Good Privacy) allows you to encrypt and digitally sign your emails. I wanted to publish this post for quite some time now and thanks to some help from the 34C3, I finally managed to do it.&lt;/p&gt;
&lt;h2&gt;Pretty Good Privacy (PGP)&lt;/h2&gt;
&lt;p&gt;Before we can start installing all the requirements and setting up PGP, I'd like to give you a short introduction to PGP. Basically, PGP is a tool to encrypt and digitally sign emails by applying public key cryptography. This means that you link your email account to a key pair, which can be used to encrypt and decrypt mails. Each of these key pairs consists of a public and a private key. Using those keys, you can encrypt and digitally sign your emails. Any person that knows your public key will now be able to use it to encrypt emails. On the other hand, you can use your private key to prove that you are the author of the email. Your private key will be used to decrypt mails encrypted with your public key and vice versa.&lt;/p&gt;
&lt;p&gt;To wrap this up: you have your email account set up to send and receive encrypted emails. Use your public key to allow other people to send encrypted emails, and use your private key to encrypt these or digitally sign emails. Any person that knows your public key can decrypt mails you signed with your private key. On the other hand, only you can read emails that were encrypted with your public key.&lt;/p&gt;
&lt;p&gt;One thing I have to mention altough is that PGP will not encrypt your whole message. The encryption only affects the mails content and attachments, but senders and recipients addresses, as well as the subject of the mail are still send in plaintext.&lt;/p&gt;
&lt;h2&gt;Prerequisites and Installation&lt;/h2&gt;
&lt;p&gt;To be able to send and receive encrypted emails, you need several components. First of all, you need an email client. I recommend using Thunderbird since it's open source and works great with the PGP-addon I will cover in the next step.&lt;/p&gt;
&lt;p&gt;The second thing you will need is GPG (Gnu Privacy Guard). GPG is where the actual encryption happens. It is the basis for GPG.&lt;/p&gt;
&lt;p&gt;Last but not least, you need something to tie GPG and email client together. For this task, I use the &lt;a href=&quot;https://addons.mozilla.org/de/thunderbird/addon/enigmail/&quot;&gt;Enigmail Thunderbird Plugin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I recommend starting off by installing Thunderbird and GPG. Depending on the platform you are using, you can either install GPG by downloading it from &lt;a href=&quot;https://gnupg.org/download/index.html&quot;&gt;gnupg.org&lt;/a&gt; or by using your linux distros package manager.&lt;/p&gt;
&lt;p&gt;After you have Thunderbird and GPG installed, you'll want connect Thunderbird to your email account. Note that a PGP key pair is linked to one email address, so if you want to use multiple, you'll have to one key pair for each address.&lt;/p&gt;
&lt;p&gt;On this occasion, I'd also like to mention that you can of course still synchronize encrypted emails with your smartphones email client, but to encrypt them, you'll need the matching private key. While you can use the same keys on both your phone and your pc, I recommend to really take your time thinking about doing this. When you lose your phone, attackers could gain access to your saved emails. Also, the security of a mobile phone is a completely different matter than the security of a PC. For this reason, I chose not to do this and to use encryption only on my computer.&lt;/p&gt;
&lt;p&gt;So much for that. The last thing you'll need to install is the Enigmail addon for Thunderbird. You can do this by using the plugin manager built into Thunderbird. On linux distros, you can alternatively utilize your package manager (this works at least for Arch and Ubuntu).&lt;/p&gt;
&lt;h2&gt;Setting up Enigmail&lt;/h2&gt;
&lt;p&gt;The next step is to set up a key pair and link it to an email account. You can access the Enigmail configuration by clicking on the &lt;span style=&quot;color: #22b14c;&quot;&gt;hamburger menu&lt;/span&gt; in Thunderbird. Select the &lt;span style=&quot;color: #00a2e8;&quot;&gt;&lt;em&gt;Enigmail&lt;/em&gt;&lt;/span&gt; entry by hovering over the arrow symbol, which displays a context menu. Select &lt;span style=&quot;color: #3f48cc;&quot;&gt;&lt;em&gt;manage keys&lt;/em&gt;&lt;/span&gt; to proceed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//assets/menuentry.png&quot; alt=&quot;Enigmail Menu Entry&quot; class=&quot;aligncenter size-full wp-image-698&quot; width=&quot;563&quot; height=&quot;372&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The now displayed list contains all your locally saved keys. At this point, this list should be empty. To create a new key pair, select the &lt;em&gt;Create&lt;/em&gt; entry from the menu bar and then click the &lt;em&gt;New Keypair&lt;/em&gt; button. In the following dialog, start of by selecting the email address that the key pair should be assigned to. I recommend to set a password at this point, you can also specify how long you want the key pair to be valid.&lt;/p&gt;
&lt;p&gt;The key generating process will take a short amount of time. After the keys have been generated, you can specify wether you want to create a revocation certificate. These allow you to manually revoke the validity of your key pair. I recommend doing this, since a person that has gained access to your keys will not be able to use them anymore. You should store the resulting file in a save location and assign it a save password, since a person that has access to it could disable your PGP keys.&lt;/p&gt;
&lt;h2&gt;Mail &amp;amp; Key Exchange&lt;/h2&gt;
&lt;p&gt;When creating an email, you'll notice the new &lt;em&gt;enigmail-menu&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//assets/new_mail.png&quot; alt=&quot;New email in Thunderbird - Enigmail Menu&quot; class=&quot;aligncenter size-full wp-image-699&quot; width=&quot;845&quot; height=&quot;366&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As it is stated in bold red letters, the mail is currently not being encrypted. To change this, you can click the lock icon. To digitally sign your mail, click the pen icon right next to it. Of course, you can do both simultaneously. You can also send your public key as an attachment, but note that this will only be useful if you don't sign your mail as the recipient will already need the key to encrypt the mail otherwise.&lt;/p&gt;
&lt;p&gt;You need the recipients public key in order to encrypt emails. There are several ways to exchange keys. One way are so called key servers. That basically is a service offered by enigmail, where public keys can be uploaded. Thunderbird then can utilize these servers to search for keys by email address.&lt;/p&gt;
&lt;p&gt;While this approach works quite well, there is one problem: You can't be sure that the keys aren't changed from a third party.&lt;/p&gt;
&lt;p&gt;The second option is to share keys via your personal website or any other channel. The best option regarding possible tampering would be to meet in person and exchange keys, but that's not always a viable option. One way I recommend using is to provide public keys on as many ways as possible, simply to allow as many people as possible to find it.&lt;/p&gt;
&lt;p&gt;An additional tooling to prevent tampering, I recommend using fingerprints. This means that you can publish a hash of your key on a trusted way (business card etc.) which people can use to verify your public key.&lt;/p&gt;
&lt;p&gt;If you choose to not or not only use the key servers, you can export and import keys. To manually exchange keys, go to the key menu we used earlier. To export a key, right click the entry and select Export to file. If you want to import keys, simply use the &lt;em&gt;File&lt;/em&gt; entry from the menu and import the file. The key will automatically be added to Thunderbirds key list and can from now on be used for the matching email address.&lt;/p&gt;
&lt;p&gt;To test your keys, I recommend simply sending an encrypted email to yourself and to verify it in your webmail client. The encrypted email will look like this:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;no-highlight&quot;&gt;-----BEGIN PGP MESSAGE-----
Version: GnuPG v2

hQIMAzeTl89mQ+b4AQ//ae5T5gcqMLo/nBIQHNw+O/HSeyOI5Lg0nexgPpB44c8Z
fdUSpRnfK02P6KPrFXSm5h+BZzCX020aVstwzhdvHpK3wiEvrzDUcURrWBJ9RRAC
AbM+r3+V7T017XOj8JIhsT+/NTKzZAqhZzRCC6DFL/cPYkS+n4+w1Hp817W5KIlJ
HdrMFUx64DSWDZ1ylNzrqMi102+tTBqqTqJIm36j8qRXzvQfjYPlxrGPq3DxEW9S
egsw0iKvkTfw+/qdvVFHPYUn/suUJBe89ZD8nFNX9FVv0vCFj2t/IbA9jCKocHOX
0JnxgYrrz31M7NuFJHlXzzYahn2Ebe9ruwtG5K159/ITZUpYLK7/yeuBXNgu1OED
8hvBoq9hwqGt/f8C/lovumNDs8ALvyIzRyhVJ2Flxi2WqFo/7IJwCPfD6HsUpR2d
tyZTQ0fFXyFkIOEb4+QjEW8jgtDS0s8M2Ew+30BvYQ3hiDsNuQ5H23VN6pX3fHY8
F1k7B5fn0EHYPe2R1WbEqEG8qzN+elnM/yJ4OQVirytpFhYBgoDSTMFEQKneBHjj
jHXVVk913sSZnlhQFteEznIwP4OjNoAizRNzfOCXMCyblcyA9XtstZ00VhbcsdUN
+kNT53Ut5HdA38OqOzuGB410P1XXjGh0wrZ19s4Bdb38Ji+Gm7WdNyUbTY3mOCLS
wLUBXyQHI9gaWSA4uKuBJ95BbKrKvl3EdLjWfvfZT192tuK1NLb9CVkEjCIDH4gq
abkb13N3dFyEaKVkacjCQLGNYJ8OxxNP3l6WAodqYZ2+bS6AaHtLAkgJ7tfAKp7+
k8y4XZRSXu15DaE9DQST1ofIaAmJCzcJtDrloQpmBnQJVAPVI4ah+VTrzB4Bfrqw
/5bUcJD09jBsGayOucGNmfTgq0dnuODoEWpPK7faOppjbFC7lHEWgfE/sE9lFwWX
VFQV7Y5DWoJWSSKf19Lk7L7f14GniO/ONBh5iMlPZ2Nmcwkw2zIs7NWyk8SZgDxr
OCQ7jY28HEBVBWFF6oL+Tq8bqENBmf0W67Xnjc7zgjSKtOZl3jCePrQvp1PUvTpQ
DV6Q91RF8Gq8TGZmhZkqv8CNdQcPWPxjefqGr+uuDcLh8kYcBjISqTYjRvZWw8ck
Lid1jZe/8nmyCCXNB/ntXsYL4eo2SM0yb2lV8amV0cz9ru4khdWf
=Q17/
-----END PGP MESSAGE-----&lt;/pre&gt;
&lt;p&gt;In Thunderbird however, it will automatically be decrypted. Note that you might need to enter the passwort you've set for the key pair before the mail can be decrypted.&lt;/p&gt;
&lt;h2&gt;How to continue&lt;/h2&gt;
&lt;p&gt;While this introduction hopefully gave you an idea on how to set things up and get started, I recommend not to stop at this point. There are two websites that I were introduced to and I'd like to share them with you. Both &lt;a href=&quot;https://ssd.eff.org/&quot;&gt;this&lt;/a&gt;, and &lt;a href=&quot;https://securityinabox.org/&quot;&gt;this&lt;/a&gt; website offer a great overview of different topics regarding digital self-defense. Also, stay tuned for further updates on this website!&lt;/p&gt;
</description>
        <pubDate>Mon, 01 Jan 2018 22:35:11 +0100</pubDate>
        <link>http://localhost:4000//pgp-for-thunderbird</link>
        <guid isPermaLink="true">http://localhost:4000//pgp-for-thunderbird</guid>
        
        <category>email</category>
        
        <category>Encryption</category>
        
        <category>Tools</category>
        
        
        <category>Security</category>
        
      </item>
    
      <item>
        <title>C# – Mastering the Basics – Advanced Statements</title>
        <description>&lt;p&gt;In todays episode, I'll show you how to use three advanced statements in C#. I'll go over the so-called &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operators&quot;&gt;null-conditional operator&lt;/a&gt;, the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-conditional-operator&quot;&gt;null-coalescing operator&lt;/a&gt; and the &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator&quot;&gt;ternary operator&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Null-Conditional Operator&lt;/h2&gt;
&lt;p&gt;You can use the null-conditional operator to prevent &lt;em&gt;NullReferenceException&lt;/em&gt;s. The basic principle of the operator is to return a value if it is not null, and return null if it is. The following code shows you how to use the operator, which is initiated by a question mark, followed by a dot.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;List&amp;lt;String&amp;gt; stringList = null;
int? val = stringList?.Count;&lt;/pre&gt;
&lt;p&gt;You can see the operator preceding the call of the Count-property. Running the code without the operator would lead to a NullReferenceException, but this way, &lt;em&gt;null&lt;/em&gt; is assigned to the variable &lt;em&gt;val&lt;/em&gt; instead.&lt;/p&gt;
&lt;h2&gt;Null-Coalescing Operator&lt;/h2&gt;
&lt;p&gt;The next operator is the null-coalescing operator. It is initiated by two question marks and it's used to assign different values based on wether the first choice is null or not. To get a better understanding of this, let's look at an example:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;int? val = null;
int result = val ?? 0;&lt;/pre&gt;
&lt;p&gt;The value of the variable &lt;em&gt;val&lt;/em&gt; is assigned to &lt;em&gt;result&lt;/em&gt;. However, if &lt;em&gt;val&lt;/em&gt; is equal to null, &lt;em&gt;result&lt;/em&gt; will receive the value 0.&lt;/p&gt;
&lt;h2&gt;Ternary Operator&lt;/h2&gt;
&lt;p&gt;The last operator in todays article is the ternary operator. It basically provides a short hand version for if-else-statements that can be written in a single line.&lt;/p&gt;
&lt;p&gt;Let's look at the following example:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;int val1 = 1;
int val2 = 2;
int smaller;

if (val1 &amp;gt; val2)
{
    smaller = val2;
}
else
{
    smaller = val1;
}&lt;/pre&gt;
&lt;p&gt;The if-statement takes up a lot of space while its logic is very simple. This can be replaced by the following code using the ternary operator:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;int val1 = 1;
int val2 = 2;
int smaller = val1 &amp;gt; val2 ? val2 : val1;&lt;/pre&gt;
&lt;p&gt;By using the ternary operator, you can simplify the assignment of variable by typing an expression that returns either true or false after the assignment operator. Complete the statement by a question mark. After that, the two values separated by a colon represent the values that will be assigned to the variable. The first one will be used if the statement is true, otherwise the second one is assigned.&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Dec 2017 13:01:09 +0100</pubDate>
        <link>http://localhost:4000//c-mastering-basics-advanced-statements</link>
        <guid isPermaLink="true">http://localhost:4000//c-mastering-basics-advanced-statements</guid>
        
        <category>.NET</category>
        
        <category>CSharp</category>
        
        <category>Development</category>
        
        <category>Programming</category>
        
        
        <category>CSharp</category>
        
      </item>
    
      <item>
        <title>Octoprint on a Raspberry Pi</title>
        <description>&lt;p&gt;Being tired of running back and forth to my 3D-printer to change stl files and starting / stopping prints, I decided to give &lt;a href=&quot;https://octoprint.org/&quot;&gt;Octoprint&lt;/a&gt; a shot. Octoprint basically provides a webinterface for 3D-printers, which allows you to send tasks over your local network to the printer and to monitor the prints. The software also provides a plugin functionality, so you can create your custom addons if required.&lt;/p&gt;
&lt;p&gt;Note that you can use Octoprint for slicing, but in my case I will be starting of with only sending pre sliced stl files to print.&lt;/p&gt;
&lt;h2&gt;Hardware &amp;amp; Installation&lt;/h2&gt;
&lt;p&gt;In this article, I cover the usage in combination with a Raspberry Pi. If you have a spare Raspberry Pi 3, I recommend using it, since it has built in WIFI. However, you can of course also use older versions with wired connection or by adding a WIFI adapter.&lt;/p&gt;
&lt;p&gt;If you don't have anything installed on your pi, you can use &lt;a href=&quot;https://github.com/guysoft/OctoPi&quot;&gt;OctoPi&lt;/a&gt;, which is a preconfigured image which includes Octoprint. However, since I already have raspbian installed, I'll install Octoprint manually.&lt;/p&gt;
&lt;p&gt;As you can see in the &lt;a href=&quot;https://github.com/foosel/OctoPrint/wiki/Setup-on-a-Raspberry-Pi-running-Raspbian#basic-setup&quot;&gt;installation guide&lt;/a&gt;, you'll first need to install several packages for python. Of course, update your system first.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;null&quot;&gt;sudo apt-get install python-pip python-dev python-setuptools python-virtualenv git libyaml-dev build-essential&lt;/pre&gt;
&lt;p&gt;As soon as this is done, clone the repository from GitHub and run the installation script.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;null&quot;&gt;git clone https://github.com/foosel/OctoPrint.git
cd OctoPrint
virtualenv venv
./venv/bin/pip install pip --upgrade
./venv/bin/python setup.py install
mkdir ~/.octoprint&lt;/pre&gt;
&lt;p&gt;After installing, you might have to update user configuration:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;null&quot;&gt;sudo usermod -a -G tty pi
sudo usermod -a -G dialout pi&lt;/pre&gt;
&lt;p&gt;Now, you should be able to start the service:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;null&quot;&gt;~/OctoPrint/venv/bin/octoprint serve&lt;/pre&gt;
&lt;p&gt;You should be able to connect to the web interface by using the pi's IP on port 5000. After your first connect, you'll face an installation page. These steps are useful if you want to setup custom slicing for octoprint. Since I slice my models in cura and send stl files to the printer, I'll skip these steps.&lt;/p&gt;
&lt;h2&gt;Customization&lt;/h2&gt;
&lt;p&gt;I currently don't have a webcam for my pi, so I won't install webcam support. However, you can check out the instructions &lt;a href=&quot;https://github.com/foosel/OctoPrint/wiki/Setup-on-a-Raspberry-Pi-running-Raspbian#webcam&quot;&gt;here&lt;/a&gt; if you'd like to do this.&lt;/p&gt;
&lt;p&gt;I'd like to set up my installation to automatically start when the pi boots up. These steps are also covered in the &lt;a href=&quot;https://github.com/foosel/OctoPrint/wiki/Setup-on-a-Raspberry-Pi-running-Raspbian#automatic-start-up&quot;&gt;installation guide&lt;/a&gt;, but I'll wrap them up. Start by copying the init script and adjusting its privileges to be executable:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;null&quot;&gt;sudo cp ~/OctoPrint/scripts/octoprint.init /etc/init.d/octoprint
sudo chmod +x /etc/init.d/octoprint
sudo cp ~/OctoPrint/scripts/octoprint.default /etc/default/octoprint&lt;/pre&gt;
&lt;p&gt;Remove the comment-symbol (#) from the DAEMON-line in your &lt;code class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;null&quot;&gt;/etc/default/octoprint&lt;/code&gt; file and add the script to your autostart with &lt;code class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;null&quot;&gt;sudo update-rc.d octoprint defaults&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Besides having automatic startup enabled, you can now start, stop and monitor the octoprint service with &lt;code class=&quot;EnlighterJSRAW&quot;&gt;sudo service octoprint [start / stop / restart / status]&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Connecting to a 3D-Printer&lt;/h2&gt;
&lt;p&gt;Well, that last step is quite simple. In my case, my Anet A8 came with a USB type B cable which can be direcly plugged into the Raspberry Pi. And that's it. After connecting to the printer, you can't just only upload files and print them, you're also able to see the files available on the printers sd card and restart older jobs.&lt;/p&gt;
&lt;h2&gt;Closing Thoughts&lt;/h2&gt;
&lt;p&gt;While that first introduction gave me some insights on what octoprint is capable of, but I've definitely barely scratched the surface. One cool thing for example is the built in API, which allows you to connect for example Android apps to monitor temperatures or to upload files.&lt;/p&gt;
&lt;p&gt;All in all, I've had a great start with Octoprint and really recommend trying it out. Stay tuned for future updates!&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Dec 2017 15:44:40 +0100</pubDate>
        <link>http://localhost:4000//octoprint-raspberry-pi</link>
        <guid isPermaLink="true">http://localhost:4000//octoprint-raspberry-pi</guid>
        
        <category>3D-Printing</category>
        
        <category>Linux</category>
        
        <category>Raspberry Pi</category>
        
        
        <category>Hobby</category>
        
      </item>
    
      <item>
        <title>C# – Mastering the Basics - Extension Methods</title>
        <description>&lt;p&gt;In this series, I go over the very basics of the C# programming language. In todays guide, I will focus on writing custom extension methods for existing, prebuilt classes.&lt;/p&gt;
&lt;p&gt;You can use extension methods to add custom functionality to classes that are built by others. In my very case, I'd like to extend the functionality of the String class to set its first letter to upper case. I already implemented this functionality in my sideproject &lt;a href=&quot;https://github.com/MarcelJurtz/CryptoFolio&quot;&gt;CryptoFolio&lt;/a&gt;, be sure to check out &lt;a href=&quot;https://blog.mjurtz.com/2017/12/sideproject-cryptofolio/&quot;&gt;my article on the topic&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;As you can see in &lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/extension-methods&quot;&gt;Microsofts documentation&lt;/a&gt;, extension methods are defined as static methods, but are called by using instance method syntax. This means that we will create a static method which can later be called by any object of the type &lt;em&gt;String&lt;/em&gt;.&lt;i&gt; &lt;/i&gt;While the implementation of such a method is very similar to a regular method, there is one thing you'll have to remember when writing extension methods: the &lt;em&gt;this&lt;/em&gt; keyword before the parameter. Let's see an example of how this works:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;public static class StringExtensions {
    public static String ToFirstLetterUpperCase(this String s)
    {
        if (s == null)
            return null;

        if (s.Length &amp;gt; 1)
            return char.ToUpper(s[0]) + s.Substring(1);

        return s.ToUpper();
    }
}&lt;/pre&gt;
&lt;p&gt;In the example, I've added a new class called &lt;em&gt;StringExtensions&lt;/em&gt;. This is the place where I will store all of my custom exension methods for strings. As you can see, the method looks very normal, the only thing different is the previously mentioned &lt;em&gt;this&lt;/em&gt; keyword right before the parameters data type.&lt;/p&gt;
&lt;p&gt;After creating the extension method, it can be used by simply calling &lt;em&gt;ToFirstLetterUpperCase()&lt;/em&gt; on any string:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;String s = &quot;hello world!&quot;;
Console.WriteLine(s.ToFirstLetterUpperCase());
// Output: Hello world!&lt;/pre&gt;
</description>
        <pubDate>Fri, 22 Dec 2017 12:00:58 +0100</pubDate>
        <link>http://localhost:4000//c-mastering-basics-extension-methods</link>
        <guid isPermaLink="true">http://localhost:4000//c-mastering-basics-extension-methods</guid>
        
        <category>.NET</category>
        
        <category>.NET Core</category>
        
        <category>CSharp</category>
        
        <category>Development</category>
        
        <category>Programming</category>
        
        
        <category>CSharp</category>
        
      </item>
    
      <item>
        <title>C# – Mastering the Basics – Collections</title>
        <description>&lt;p&gt;Altough the topic &lt;em&gt;&quot;Collections&quot;&lt;/em&gt; matches programming in general, I've decided to add it to my series on mastering the basics of C#. For this reason, you will find some content here that is generally applicable, but I will also discuss different language-specific elements.&lt;/p&gt;
&lt;p&gt;Collections support several different use cases, e. g. searching through a set for objects with certain properties, or iterating through multiple elements by predefined sorting specifications.&lt;/p&gt;
&lt;p&gt;In the first part of this article, I will cover the two basic types of collections in C#, lists and dictionaries. Then, I will go over the groups of collections you might know from Java: lists, sets and maps. I'd like to describe and compare their characteristics and then implement their functionality in C#.&lt;/p&gt;
&lt;h2&gt;Collections in C#&lt;/h2&gt;
&lt;p&gt;The simplest form of collections in C# are arrays. An array allows you to store a group of objects of one specific type. The following example shows a string array, which contains three elements.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;String[] movies = new String[3];

movies[0] = &quot;The Matrix&quot;;
movies[1] = &quot;The Dark Knight&quot;;
movies[2] = &quot;#9&quot;;

foreach(String movie in movies) {
    Console.WriteLine(movie);
}&lt;/pre&gt;
&lt;p&gt;In this simple example, you can see the problem with arrays: the size of it needs to be known before adding the elements. The &quot;real&quot; collections in C# can be utilized to handle this problem.&lt;/p&gt;
&lt;p&gt;The basis of C# collections are List&amp;lt;T&amp;gt; and Dictionary&amp;lt;K,T&amp;gt;, which will be covered in the following section.&lt;/p&gt;
&lt;h3&gt;List&amp;lt;T&amp;gt;&lt;/h3&gt;
&lt;p&gt;Lists offer a way to organize objects in a similar way arrays do. Basically, you create a List of a specific type, which allows you to dynamically add and remove items from this list. Opposed to arrays, lists don't need to specify the amount of objects they can contain, which allows you to dynamically change their size.&lt;/p&gt;
&lt;p&gt;The following snippet instaniates two new instances of the class &quot;Person&quot;, adds both to a list and outputs the value of Name-properties (the class consists only of this one property).&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;List&amp;lt;Person&amp;gt; persons = new List&amp;lt;Person&amp;gt;();

Person alice = new Person { Name = &quot;Alice&quot; };
Person bob = new Person { Name = &quot;Bob&quot; };

persons.Add(alice);
persons.Add(bob);

foreach(Person person in persons) {
    Console.WriteLine(person.Name);
}&lt;/pre&gt;
&lt;p&gt;Besides adding items, the List&amp;lt;T&amp;gt; class offers multiple useful properties and methods, such as Count to receive the amount of objects, Clear() to remove all items or Contains() to check if the list contains a specific object. Check out the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/6sh2ey19(v=vs.110).aspx&quot;&gt;MSDN page&lt;/a&gt; for full documentation.&lt;/p&gt;
&lt;p&gt;One last thing I'd like to mention is the option to access a specific item by its index, as you're probably used to from using arrays.&lt;/p&gt;
&lt;h3&gt;Dictionary&amp;lt;K,T&amp;gt;&lt;/h3&gt;
&lt;p&gt;The second main type of collections C# offers is the Dictionary&amp;lt;K,T&amp;gt;. As the name suggests, it allows you to keep track of multiple objects by a unique key. Both object and key can be of whatever type you'd want it to be.&lt;/p&gt;
&lt;p&gt;The following snippet shows you how to create a dictionary with a string as key and a person as object. I've also added an int property named &lt;em&gt;Age&lt;/em&gt; to the class &lt;em&gt;Person&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;Dictionary&amp;lt;String,Person&amp;gt; persons = new Dictionary&amp;lt;String,Person&amp;gt;();

Person alice = new Person { Name = &quot;Alice&quot;, Age = 30 };
Person bob = new Person { Name = &quot;Bob&quot;, Age = 32 };

persons.Add(&quot;alice&quot;, alice);
persons.Add(&quot;bob&quot;, bob);

Console.WriteLine($&quot;{persons[&quot;bob&quot;].Name} is {persons[&quot;bob&quot;].Age} years old&quot;);
// Output: Bob is 32 years old&lt;/pre&gt;
&lt;p&gt;As you can see, access to a dictionary works like accessing an array by replacing the index with the key. However, you can still iterate over the contained items. At this point, you can choose wether you want to iterate over the dictionary items (key &amp;amp; value) or just key or value.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;// Iterate over dictionary entries
foreach(var entry in persons) {
    Console.WriteLine($&quot;Key: {entry.Key}, Name: {entry.Value.Name}, Age: {entry.Value.Age}&quot;);
}

// Iterate over dictionary values
foreach(Person person in persons.Values) {
    Console.WriteLine(person.Name);
}

// Iterate over dictionary keys
foreach(String key in persons.Keys) {
    Console.WriteLine(key);
}&lt;/pre&gt;
&lt;h2&gt;Set&lt;/h2&gt;
&lt;p&gt;In mathematics, a set is a collection of objects, which has two main criteria: there is no given order and each element of a set is unique.&lt;/p&gt;
&lt;p&gt;Of course, C# offers an implementation to cover such collections as well: &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb359438.aspx&quot;&gt;HashSet&amp;lt;T&amp;gt;&lt;/a&gt; is your way to go. HashSets offer high performance set operations on collections that can't hold duplicate elements nor use a specific order.&lt;/p&gt;
&lt;p&gt;The following snippet instantiates a new HashSet of type Person and adds alice and bob to it. While you can add an object multiple times, it will be added to the set only once, which is why the output of the snippet will only display bob only once.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;HashSet&amp;lt;Person&amp;gt; persons = new HashSet&amp;lt;Person&amp;gt;();

persons.Add(bob);
persons.Add(alice);
persons.Add(bob);

foreach(Person person in persons) {
    Console.WriteLine(person.Name);
}&lt;/pre&gt;
&lt;h2&gt;List&lt;/h2&gt;
&lt;p&gt;Compared to sets, lists are very simple to describe. Lists contain a dynamic amount of objects, whereby an object can be contained multiple times. Also, the order of items in a list is important. The previously described List&amp;lt;T&amp;gt; class already offers predefined methods to sort lists.&lt;/p&gt;
&lt;p&gt;Besides the List&amp;lt;T&amp;gt; class, there are other variants of lists available, that serve different purposes. ArrayList&amp;lt;T&amp;gt; stores data like an array does, and List&amp;lt;T&amp;gt; basically is a wrapper for ArrayList&amp;lt;T&amp;gt;. It allows you to access the list by index and is optimized for random access.&lt;/p&gt;
&lt;p&gt;Another option is LinkedList&amp;lt;T&amp;gt;, which maintains pointers to the actual objects along with references to the next and previous item. This results in more work when adding or removing items from the list since each objects reference must be updated. Also, you can't access a LinkedList via index. However, if you have heavy workload in the form of tail- or head-inserts, this might be your choice.&lt;/p&gt;
&lt;h2&gt;Map&lt;/h2&gt;
&lt;p&gt;The term map is used in Java for collections, which are known as Dictionary under C#. I've already covered this type of collection in the first chapter of the article, but the conclusions will be wrapped up here.&lt;/p&gt;
&lt;p&gt;Dictionaries (or Maps) are used to associate objects to a unique key, by which they can be accessed later. One possible use case for dictionaries could be the association of user session ids with the users properties.&lt;/p&gt;
&lt;p&gt;To conclude this, you may choose to use a dictionary when you need to look up a value by a key. If you have an object like &lt;code class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;{ key, value }&lt;/code&gt; and you need to access both, key and value without knowing them, you might prefer list.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Dec 2017 09:30:04 +0100</pubDate>
        <link>http://localhost:4000//c-mastering-the-basics-collections</link>
        <guid isPermaLink="true">http://localhost:4000//c-mastering-the-basics-collections</guid>
        
        <category>.NET</category>
        
        <category>.NET Core</category>
        
        <category>CSharp</category>
        
        <category>Development</category>
        
        <category>Programming</category>
        
        
        <category>CSharp</category>
        
      </item>
    
      <item>
        <title>Getting Started with .NET Core on Arch Linux</title>
        <description>&lt;p&gt;Hello Internet! Today, we will try to develop and run .NET Core Apps on a Macbook running Arch Linux! Because what could go wrong!&lt;/p&gt;
&lt;p&gt;(Honestly, this went way better than I thought.)&lt;/p&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before we can start writing .NET Core applications on Linux, we need to install some packages. The &lt;a href=&quot;https://wiki.archlinux.org/index.php/.NET_Core&quot;&gt;Arch Wiki&lt;/a&gt; states that to run .NET Core applications, the &lt;i&gt;dotnet-runtime&lt;/i&gt; package needs to be installed. Additionally, we will need &lt;i&gt;dotnet-sdk-2.0&lt;/i&gt; from the &lt;a href=&quot;https://aur.archlinux.org/packages/dotnet-sdk-2.0/&quot;&gt;AUR&lt;/a&gt; to be able to develop custom applications.&lt;/p&gt;
&lt;p&gt;Besides these packages, I recommend installing Visual Studio Code as text editor. I currently use this as my main text editor and it offers a plugin for C# development. You can download it from the &lt;a href=&quot;https://aur.archlinux.org/packages/visual-studio-code/&quot;&gt;AUR&lt;/a&gt; as well and then run it from the terminal by entering the command &lt;i&gt;'code'&lt;/i&gt;.&lt;/p&gt;
&lt;p&gt;Last but not least, if you're getting started with VS Code as well, you can simplify your progress by using &lt;a href=&quot;https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf&quot;&gt;Microsofts cheatsheet&lt;/a&gt; (this is targeting windows users, but I'm sure you'll be fine with it).&lt;/p&gt;
&lt;p&gt;To install the plugin, simply use CTRL + Shift + X and search for 'C#'. You'll find a package from Microsoft called &lt;i&gt;C# for Visual Studio Code (powered by OmniSharp), &lt;/i&gt;which you'll want to install.&lt;/p&gt;
&lt;h2&gt;Hello World!&lt;/h2&gt;
&lt;p&gt;After installing all the mentioned packages and plugins, you're ready to start developing! You can use the built in terminal from VS Code and create a new project folder. Create a new folder wherever you want and use &lt;i&gt;dotnet new&lt;/i&gt; followed by the type of application you'd like to create.&lt;/p&gt;
&lt;p&gt;I'll start with a simple console application by entering &lt;i&gt;dotnet new console&lt;/i&gt;. You can see all available options by entering the command without a project type.&lt;/p&gt;
&lt;p&gt;This command generates all the neccessary files to get started. The entry point of your project will be program.cs, which is already populated with the source code for a basic &lt;i&gt;'Hello World' &lt;/i&gt;- application.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;using System;

namespace Dotnet
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(&quot;Hello World!&quot;);
        }
    }
}&lt;/pre&gt;
&lt;p&gt;You can now run your program by entering &lt;i&gt;dotnet run&lt;/i&gt; inside your project folder. In this case, this will write 'Hello World!' to the terminal.&lt;/p&gt;
&lt;p&gt;One last thing I would like to cover in this post is the possibility to debug C# applications in VS Code.&lt;/p&gt;
&lt;p&gt;The installed plugins comes with integrated intellisense and debugging, which makes it very easy to develop apps. As you may be used to from Visual Studio, you can set breakpoints by clicking on the border to the left of the row number.&lt;/p&gt;
&lt;p&gt;To debug your application, you can use F5 or the the 'Debug' entries from the menu. If that does not work, you might have the program.cs file open directly, without the project folder. In this case, open the folder in VS Code, since it contains debug configuration.&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Dec 2017 16:40:56 +0100</pubDate>
        <link>http://localhost:4000//getting-started-net-core-arch-linux</link>
        <guid isPermaLink="true">http://localhost:4000//getting-started-net-core-arch-linux</guid>
        
        <category>.NET</category>
        
        <category>.NET Core</category>
        
        <category>Development</category>
        
        <category>Linux</category>
        
        <category>Programming</category>
        
        
        <category>CSharp</category>
        
      </item>
    
      <item>
        <title>Comments &amp; how to use them</title>
        <description>&lt;p&gt;Comments are used in a lot of programming languages. While this concept is useful for a lot of purposes, beginners often start bad habits when commenting their code. In this article I will explain when comments are useful and on the other hand illustrate problems where commenting can be less meaningful or even disturbing.&lt;/p&gt;
&lt;h2&gt;Bad Comments ...&lt;/h2&gt;
&lt;p&gt;At first sight (especially at the beginning of your programming career), you might think of comments as the perfect way to describe elements of your code that you don't fully understand. This approach is not entirely wrong, but it does have a few problems that I will now discuss.&lt;/p&gt;
&lt;h3&gt;Comments as excuse for unreadable code&lt;/h3&gt;
&lt;p&gt;A problem of overly intensive commenting is the justification of illegible code. According to the motto &quot;the code is not readable, but the commentary explains everything I need&quot; the whole code quickly becomes unreadable and it takes a lot more time to understand its functionality. A simple example of this is the following code, which in the form of static methods offers the possibility to convert temperatures from Fahrenheit to celsius and vice versa.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;class Converter
{
    /* Celsius to Fahrenheit
     * input: temperature in celsius
     */
    public static double cToF(double x)
    {
        return x * 9 / 5 + 32;
    }

    /* Celsius to Fahrenheit
     * input: temperature in celsius
     */
    public static double fToC(double x)
    {
        return (x - 32) * 5 / 9;
    }
}&lt;/pre&gt;
&lt;p&gt;A much better approach for this very simple example could be implemented like the following, which will work without any comments and will still be understood much better than the previous variant.&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;csharp&quot;&gt;class TempConverter
{
    public static double FahrenheitToDecimal(double fahrenheit)
    {
        double celsius = (fahrenheit - 32) * 5 / 9;
        return celsius;
    }

    public static double CelsiusToFahrenheit(double celsius)
    {
        double fahrenheit = celsius * 9 / 5 + 32;
        return fahrenheit;
    }
}&lt;/pre&gt;
&lt;h3&gt;Readability of the Actual Code&lt;/h3&gt;
&lt;p&gt;Another important point you should consider is that comments can even decrease the readability of your code.  Of course, your source code will be hard to read if you have to read through ten lines of comments before each line of code. This of course a bit exaggerated, but the point becomes clear.&lt;/p&gt;
&lt;p&gt;This problem has to be considered especially in combination with the first one. By using comments to describe even the smallest of activities, there is a risk that source code will be poorly structured. Also, you'll most likely spent less time thinking about naming things, which can reduce readability drastically.&lt;/p&gt;
&lt;h3&gt;Code Changes and Obsolete Comments&lt;/h3&gt;
&lt;p&gt;The last problem I would like to address is the change of code. The more comments written, the higher the probability of changing code and not adapting a descriptive comment. I'm sure that you are aware of this and probably stumbled across that topic more than one time.&lt;/p&gt;
&lt;p&gt;However, this is usually not a very big problem, since the source code itself explains how a method works, for example. This is more difficult if you depend on the content of the comments. Accordingly, this problem also combines with the two previous points.&lt;/p&gt;
&lt;p&gt;While source code typically changes quite quickly, comments often remain unchanged. If the comment now describes a functionality but is obsolete, this can easily lead to confusion.&lt;/p&gt;
&lt;h2&gt;... and how to avoid them&lt;/h2&gt;
&lt;p&gt;Enough of the problems that come with comments. Comments are by no means to be considered as ballast and are definitely useful. With this article, however, I want to create a certain basis to deal with this functionality in a more deliberate way.&lt;/p&gt;
&lt;p&gt;While comments are helpful to keep track of your thoughts, this tool should be used with thoughtfulness. Excessive use can easily lead to the opposite of the expected result. However, it is also important to note that the code alone is definitely not documentation enough. Of course, this does not mean that the entire project documentation should be in the form of comments, but the possibility of commenting on code should certainly not be ignored.&lt;/p&gt;
&lt;p&gt;All in all, I recommend that you think about the meaning of it before adding a comment. Are there other ways to communicate the content of the comment? Do I only use it to describe the functionality of a method? In this case, you should prefer to start with checking whether the naming of the components is clear enough. On the other hand, an argument for the use of comments could be the documentation of unexpected result values or the like, i. e. anything that is not quickly apparent from the source code itself.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 Dec 2017 22:58:08 +0100</pubDate>
        <link>http://localhost:4000//c-mastering-the-basics-comments</link>
        <guid isPermaLink="true">http://localhost:4000//c-mastering-the-basics-comments</guid>
        
        <category>Clean Code</category>
        
        <category>Development</category>
        
        <category>Efficiency</category>
        
        <category>Programming</category>
        
        
        <category>Tips</category>
        
      </item>
    
      <item>
        <title>Validating LiteDB Data from an Android App</title>
        <description>&lt;p&gt;In my new sideproject CryptoFolio, which I announced in &lt;a href=&quot;https://blog.mjurtz.com/2017/12/sideproject-cryptofolio/&quot;&gt;this article&lt;/a&gt;, I described that I'd like to use LiteDB to locally store data that I received from the coinmarketcap-API. LiteDB is basically a NoSQL database, in particular a document store. It functions on a serverless file basis and can be accessed via a simple API.&lt;/p&gt;
&lt;p&gt;While it is quite easy to implement the databases functionality itself, testing the resulting data structure is somewhat more difficult. But to be sure that my data is saved correctly, I needed a way to explore the database located on the android device. Therefore, I use the following approach:&lt;/p&gt;
&lt;p&gt;I start by downloading &lt;a href=&quot;https://github.com/JosefNemec/LiteDbExplorer&quot;&gt;LiteDB Explorer&lt;/a&gt;, a free tool to visually inspect LiteDB database files. However, to view such a file, I need access to it first.&lt;/p&gt;
&lt;p&gt;You can do this by using the Android Debug Bridge (ADB). After enabling the developer options on your device, you can use the command &lt;code class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;generic&quot;&gt;adb backup -noapk com.your.packagename&lt;/code&gt; to copy your applications data from the smartphone to the pc. Note that you can use &lt;code class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;generic&quot;&gt;adb restore backup.db&lt;/code&gt; to go the opposite way, which can be useful for restoring application backups.&lt;/p&gt;
&lt;p&gt;After entering the command, you'll have to confirm the operation on the device.  The backup will be copied to your home directory per default. As a result of this operation, you will receive an .ab-file. I recommend using ADB Backup Extractor, which you can download from &lt;a href=&quot;https://sourceforge.net/projects/adbextractor/files/latest/download&quot;&gt;SourceForge&lt;/a&gt; for free. This tool converts the .ab-file to a regular .tar-file, which can easily be extracted using a tool like 7-Zip.&lt;/p&gt;
&lt;p&gt;Use this command to convert your ab file:&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot; data-enlighter-language=&quot;generic&quot;&gt;java -jar abe.jar [-debug] [-useenv=yourenv] unpack &amp;lt;backup.ab&amp;gt; &amp;lt;backup.tar&amp;gt; [password]&lt;/pre&gt;
&lt;p&gt;Among the unzipped files you will now find the database file. Use the previously mentioned explorer to visualize it.&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Dec 2017 21:00:28 +0100</pubDate>
        <link>http://localhost:4000//validating-litedb-data-on-android-application-data</link>
        <guid isPermaLink="true">http://localhost:4000//validating-litedb-data-on-android-application-data</guid>
        
        <category>Android</category>
        
        <category>App</category>
        
        <category>Development</category>
        
        <category>Tools</category>
        
        
        <category>Tips</category>
        
      </item>
    
  </channel>
</rss>
